[{"body":"Critical CSS reduces load time by generating two optimized CSS files: one for inline styling of content that appears in the initial viewport for a page, and another linked file for styling the rest of the page. Trellis creates these files for each page of your WordPress site.\nNote In this article, a page refers to either a post or an actual page in WordPress. It’s whatever gets served to your reader when they visit your site in a browser.  How Is Critical CSS Generated?  When a page is first visited by a non-logged in user, your Trellis instance submits it to the Trellis Services API hosted by Mediavine. Access to this service is included in your license. The page is rendered in a browser with a 1300 x 900 px viewport and its CSS stylesheet is audited. Any CSS styles that affect content in this viewport are saved into a minified primary Critical CSS file. Any CSS styles that fall outside of this viewport are saved into a minified secondary Non-Critical CSS file. CSS styles that are not referenced by elements on the page are completely left out. When the Critical and Non-Critical files are complete, the Trellis Services API notifies your Trellis instance to download them. These files are saved into your WordPress installation (specifically the /wp-content/mvt-critical/ directory). The next time the page is visited by a non-logged in user, the Critical and Non-Critical CSS files are served.  Note The primary Critical CSS file is loaded as inline styles when the page loads. The secondary Non-Critical CSS file is loaded as an external stylesheet. This renders initial page views much more quickly, as the site includes the most important CSS (the primary Critical CSS styles) in the page markup.  How To Determine the Critical CSS Status of a Page When logged in to WordPress, a Critical CSS Status will appear in the admin bar when you view a page on your site (See Changes to WordPress for more information). The status tells you where Trellis is in the Critical CSS generation process:\n   Status Description     Critical CSS - License Required The site is missing an active Trellis license. Go to Appearance \u003e Mediavine Trellis and click License to purchase or add a Trellis license.   Disabled Critical CSS generation has been disabled for the post or page in the WP Editor. This status will also be displayed if Critical CSS is disabled on your site (check Appearance \u003e Mediavine Trellis and click Critical CSS).   Error The page encountered an error while generating the Critical CSS files. See Troubleshooting for some steps you can take to determine the problem.   None The page has not attempted to generate Critical CSS yet. This can occur if your readers (i.e. non-logged in users) haven’t visited it yet. As of Trellis 0.16.0, a page in the Pending or Processing status will switch to None if it doesn’t receive a response from the Trellis Services API after two hours.   Pending (Deprecated in 0.17.0.) The page has been queued for generation of Critical CSS.   Processing The page is currently in the process of generating Critical CSS files. A request has been sent to the Trellis Services API, but the files haven’t been saved to the site yet.   Success The page successfully generated Critical CSS files.    Important When you visit a page while logged in, Trellis does not submit it for Critical CSS generation. Automatic generation only happens when a non-logged in user visits the page.  When Does Critical CSS Get Refreshed? Knowing that Critical CSS files are only generated when a non-logged in user views a page, it’s natural to wonder when Trellis will trigger an update to those files. Here are the events that prompt Critical CSS to purge its existing files:\n   Event Description     Automatic Updates Whenever Wordpress is automatically updated.   Custom functions The functions mv_trellis_purge_all_critical_css() and mv_trellis_purge_page_critical_css() will trigger an update. See Functions in the Reference section for more information.   Plugin changes Activating or deactivating a plugin.   Critical CSS commands When logged in, the Manage Trellis JS/CSS menu on the admin bar gives you options to purge Critical CSS for the current page or all pages on the site.   Sidebar widget changes If you add, remove, change position, or change settings on a sidebar widget.   Switching themes Whenever you activate Trellis or a Trellis child theme.    If you’ve made a significant change to your theme’s design or functionality, you may want to tell Trellis to discard all existing Critical CSS files and rebuild them from scratch (also referred to as purging). For more information on when to use the Purge features, see Critical CSS in the Admin Bar in the Help Center.\nAdvanced Functionality There are instances where you might want to alter Critical CSS functionality because you intend to use your child theme with other plugins. You might also use JavaScript to alter the styling of page elements after page load. In these scenarios, Critical CSS’ default functionality might give you unexpected results. For dynamically altered elements that appear in the initial viewport, you’ll want to consider adding their selectors to the Critical CSS file. If those elements appear outside of the initial viewport, add their selectors to the Non-Critical CSS file.\nAdding CSS to the Critical CSS File By default, if a CSS selector doesn’t match an element in the initial 1300 x 900 px viewport of a page, it gets saved to that page’s Non-Critical CSS file. This might not be the desired behavior. It’s possible that you need some styles to be present at page load to prevent a layout shift or stop a flash of unstyled content for elements close to the viewport, but not in it.\nWhile publishers can add CSS selectors manually to the Force Critical CSS list in Trellis Settings, you can include them programmatically by adding code to your child theme’s functions.php file.\nIn the example below, selectors are added to an array. You can add full selector names or partial names if you want to match a range of selectors. An add_filter is then used to add the matching selectors to Trellis’ Force Critical CSS list. When a page gets submitted to the Trellis Services API, any matching CSS selectors are added to the Critical CSS file.\nImportant If you add selectors to the Force Critical CSS list, be sure to check your pages in a Google Page Speed Insights report during testing. Adding selectors to the Force Critical CSS list may cause an “Unused CSS” warning to appear if the selectors are not specific enough or only appear outside of the initial viewport.  Example\nIn the example below, a site uses WP Recipe Maker and wants all styles included in the primary Critical CSS file. Since all WP Recipe Maker styles begin with the suffix “wprm,” Trellis will add all of the matching styles.\nfunction theme_forced_styles( $selectors ) { $selectors[] = 'wprm'; return $selectors; } add_filter( 'mv_trellis_css_force_keep', 'theme_forced_styles' ); You can add multiple styles to the array by using an array_merge():\narray_merge( $selectors, [ 'wprm', 'blue' ] ) You can also add them individually by using multiple lines:\n$selectors[] = 'wprm'; $selectors[] = 'blue';  Note Styles added programmatically do not appear in Trellis Settings.  Adding CSS to the Non-Critical CSS File When creating the secondary Non-Critical CSS file, Trellis leaves out any CSS styles that don’t apply to elements on the page. This can create issues if elements are added to the page markup after the initial page load. The Trellis Services API does not execute JavaScript at runtime, so styles for these added elements would not be included in the Non-Critical CSS file.\nPublishers can add these style selectors manually in Trellis Settings, but if you design your child theme to work with a third-party plugin (or are adding your own JavaScript that impacts content styling) you may want to include selectors programmatically. You do this by adding code to your child theme’s functions.php file.\nJust like with Force Critical CSS, the example below shows a custom function where selectors are added to an array. You can add full selector names or partial names if you want to match a range of selectors. An add_filter is then used to add the matching selectors to Trellis’ Force Non-Critical CSS list. Any CSS styles that match the expression will get added to the Non-Critical CSS file.\nExample\nIn the example below, dynamic page elements marked with “pop-up” are styled via JavaScript after page load. Specifying “pop-up” will add all matching styles.\nfunction theme_allowlist_styles( $selectors ) { $selectors[] = 'pop-up'; return $selectors; } add_filter( 'mv_trellis_css_allowlist', 'theme_allowlist_styles' ); You can add multiple styles to the array by using an array_merge():\narray_merge( $selectors, [ 'pop-up', 'red' ] ) You can also add them individually by using multiple lines:\n$selectors[] = 'pop-up'; $selectors[] = 'red';  Note Styles added programmatically do not appear in Trellis Settings.  Issues with Critical CSS If you encounter problems using Critical CSS during development, refer to Troubleshooting.\n","categories":"","description":"Critical CSS is one of Trellis’ most important features and has a big impact on Google’s Core Web Vitals. \n","excerpt":"Critical CSS is one of Trellis’ most important features and has a big …","ref":"/docsytrellis/advanced-topics/critical-css/","tags":["critical css"],"title":"Critical CSS"},{"body":"A filter summary page provides a quickly scannable list of filters that link to a more in-depth filter detail page.\n","categories":"","description":"This section shows available filters for Trellis child theme templates.\n","excerpt":"This section shows available filters for Trellis child theme …","ref":"/docsytrellis/reference/filters/","tags":"","title":"Filters"},{"body":"Before You Begin    Determine your development environment: You can choose to develop your child theme on your local computer or in a hosted environment that’s running WordPress. When developing on a local computer, Critical CSS and REST API warnings might appear, depending on your configuration. Trellis needs to communicate with Mediavine’s Trellis Services API (included in your subscription) to generate Critical CSS files.\n  Check your WordPress and PHP versions: To install Trellis, you must be using WordPress 5.2 or higher and have at least PHP 7.3 installed.\n  (Optional for development) Install an SSL certificate: An SSL certificate lets Trellis create optimized CSS files for faster performance (your Trellis instance also needs the ability to communicate with the Mediavine Trellis Services API). If you don’t have an SSL certificate installed, you’ll see a Critical CSS error in the WP Dashboard and in Trellis Settings. However, this is optional. You can ignore this warning while developing your child theme in a non-production environment.\n  Purchase a License: Go to the Mediavine Marketplace to purchase a Trellis license and download the installation files. A valid license unlocks all Trellis features.\n    Install the Trellis Theme Framework  In the WordPress Admin Dashboard, go to Appearance \u003e Themes. Click Add New. Click Upload Theme. Click Choose File and select the Mediavine-Trellis ZIP file you received with your subscription purchase. Click Install Now. Click Activate.  Trellis is now running on your WordPress site. The Trellis Core minimally-styled templates will be used to display content.\nActivate Your Trellis License  In the WordPress Admin Dashboard, go to Appearance \u003e Mediavine Trellis. Click License.  Enter your Trellis license in the License Code box. Click Activate License.  You now have access to all of the Trellis Theme Framework features.\nNote If you’ve installed Trellis on an existing site with posts and images, it’s a good idea to set your Featured Image Size to match your new theme. Click Display and go to the Featured Image Size option and select the ratio you’d like to use. Then click the Regenerate Featured Images button. This will instruct WordPress to recreate your featured images on posts using the ratio you selected. See How to Regenerate Your Image Sizes in the Trellis Help Center for more information.  (Optional) Install the Trellis Images Plugin Trellis Images is a helper plugin that automatically creates a WebP version of legacy image formats and stores it in your site’s uploads folder (the original image is never altered or removed). WebP images load faster and score higher in Google’s Core Web Vitals.\n In the WordPress Admin Dashboard, go to Plugins \u003e Add New. Click Upload Plugin. Click Choose File and select the Trellis Images plugin you received with your subscription purchase. Click Install Now. Click Activate Plugin.  (Optional) Install the Trellis Child Themes Trellis comes with three child themes: Bamboo, Birch, and Wisteria, each available as a separate installation file with your subscription purchase. When developing a new child theme, it can be useful to refer to these Mediavine-built themes to see how different Trellis features are implemented.\nNote You don’t need to install or activate a child theme to see Trellis at work. Trellis Core comes with minimally-styled templates that will show you all the options that are available. Some of the included child themes will not show all of the options in Trellis Settings or may include functionality specifically coded for that theme.   Click Add New. Click Upload Theme. Click Choose File and select a Trellis child theme ZIP file included with your subscription purchase. Click Install Now. Click Activate.  What’s Next?  Learn about Trellis’ Changes to WordPress Get to know the available options in Trellis Settings Get started creating a Trellis child theme  ","categories":"","description":"Follow these steps to ensure a successful Trellis installation.\n","excerpt":"Follow these steps to ensure a successful Trellis installation.\n","ref":"/docsytrellis/getting-started/installing-trellis/","tags":"","title":"Installing Trellis"},{"body":"Learn more about what Trellis is, the benefits it offers to publishers and developers, and what add-ons come with your Trellis license. Click on a page title for the details.\nWhat’s in This Section? ","categories":"","description":"","excerpt":"Learn more about what Trellis is, the benefits it offers to publishers …","ref":"/docsytrellis/overview/","tags":"","title":"Overview"},{"body":"Changelog 0.18.1 (05/24/2023)  NEW: Added a new mv_trellis_skip_eagerload_classes filter to let developers stop images from being eager loaded. FIXED: Addressed an issue where the first image on feed and archive pages was not eager loaded, which could cause LCP to fail. FIXED: Stopped eager loading hidden Pinterest images, which prevented the first displayed image from getting eager loaded. FIXED: Resolved some Lighthouse errors reported for PWA icons. The “all” attribute for purpose was changed to “any” in the manifest.json file. FIXED: Resolved cURL 28 errors on Non-Critical CSS files which would prevent them from downloading. This could occur on servers with a lot of CSS markup where the timeout of cURL requests is too short.  0.18.0 (04/03/2023)  NEW: When adding custom HTML to Hooks in Settings, Trellis will perform a validation after clicking Save. If unsupported or improperly formatted HTML is detected, a popup window will appear alerting the publisher. Buttons allow the publisher to go back to edit the HTML or have Trellis remove it. NEW: A “Purchase Trellis” message now appears in the Trellis pane of the WordPress Editor if an active license is missing. A link will take the publisher to the Mediavine Marketplace. CHANGED: The Purge Page Critical CSS button will now only appear in the WordPress Editor if the Critical CSS status is Success. CHANGED: The Schema Type control in the WordPress Editor will no longer appear if Trellis SEO is disabled. Trellis only outputs schema information when a site is using Trellis SEO. CHANGED: Replaced the hand icon used for the Hooks setting with an actual hook icon. CHANGED: Added help text to the Trellis pane in the WordPress Editor if Critical CSS is disabled in Trellis Settings. Previously, Critical CSS functions in the editor would just disappear, which could confuse the user. CHANGED: Added BlinkMacSystemFont to Trellis’ default font stack. Previously, some Chrome users could see Helvetica appear, which is not a web-safe font. CHANGED: Hid the “Hide Featured Image from Small Screens” setting when the “Display Featured Images” setting is disabled. CHANGED: Adjusted copy in Advanced Settings \u003e Trellis SEO for Article Schema Type so that publishers will understand that it only applies to new posts when enabled. Publishers can change the Schema Type on existing posts in the WordPress Editor. CHANGED: Critical CSS is now cleared when a user adds or updates CSS in the Customizer, and when a license is activated. CHANGED: Added a “Critical CSS - License Required” status when a site is missing an active Trellis license. Critical CSS is only served with an active license. The new status is a link that takes the user to the License tab of Trellis Settings. CHANGED: Improved copy in the Posts/Page Exclusions table of Trellis Settings. A better explanation is now shown for posts where Critical CSS was disabled in Trellis versions older than 0.17.0. CHANGED: Adjusted lazy loading code so that the first image in a post is eager loaded. CHANGED: Moved WebP image swapping code from Trellis Core to Trellis Images. CHANGED: Improved copy for the Heading Font and Body Font settings in Trellis Settings. A link to a Help Desk article will explain what fonts will be used if a web-safe font is not available. FIXED: Improved accessibility on feed pages for keyboard and screenreader users by adjusting HTML on the “Read More” link. FIXED: Removed unnecessary spacing that appeared after clicking the button in the Regenerate Images section of Display Settings. FIXED: Resolved HTML validation errors with post tag links. Previously,  tags could appear within  tags, which was incorrect. The  was changed to a . FIXED: Added code to prevent unbalanced HTML tags that could appear in legacy child themes when using Trellis Comments. FIXED: Adjusted a query for Trellis Comments to only get approved comments that populate a hidden div used for SEO purposes. FIXED: Improved compatibility when using WP Rocket. Previously, some changes to Trellis Settings would not take effect until WP Rocket’s cache was cleared. FIXED: Adjusted code so that the can_dismiss property of Admin Notices works properly. Previously, Admin Notices could always be dismissed even when the property was set to false. FIXED: Updated how Trellis applies user-specified CSS on images due to recent changes in WordPress Core. User-specified CSS classes entered on images in the WordPress Editor should appear in the immediate parent tag. They were being added to a tag above the parent tag. FIXED: Resolved preg_match and strip_tag deprecation notices when using PHP 8.1.  0.17.2 (02/28/2023)  FIXED: Replaces absolute path stored in compatibility class options with relative path. FIXED: Adds check to ensure that file exists before attempting to load compatibility classes.  0.17.1 (02/09/2023)  FIXED: Ensures that Trellis' local model script is not optimized by WP Rocket.  0.17.0 (01/30/2023)  NEW: Trellis 0.17.0 now requires PHP version 7.3 or higher. NEW: Critical CSS settings and features are now available in a separate Critical CSS tab in Trellis Settings. Publishers can enable/disable Critical CSS, purge Critical CSS files, add or remove selectors from the Critical and Non-Critical CSS files, and see any Critical CSS issues that have been identified by Trellis. NEW: The Critical CSS tab now features a Post/Page Exclusion table showing any posts or pages where Critical CSS has been disabled. Publishers can re-enable Critical CSS for individual posts or pages using an Enable button. NEW: A Purge All Critical CSS button is now available in the Critical CSS tab. This button removes all existing Critical CSS files. New Critical CSS files will be generated as readers visit the site’s pages. NEW: A status indicator is now shown on the Trellis icon (Block editor only) and more descriptive text in the Trellis Settings sidebar in the WordPress Editor. This informs publishers if there are any detected Critical CSS issues.  Green indicator: This means that Critical CSS files are processing or were successfully generated. Grey indicator: This means that Critical CSS files are pending, disabled, or don’t exist. Red indicator: This means that there was an error generating the Critical CSS files.   NEW: A Purge Critical CSS button is now available in the WordPress Editor. This lets publishers delete the Critical CSS associated with a single page or post. It will be regenerated when a reader visits the page. NEW: A Display Tag Links toggle in Trellis Settings \u003e Display \u003e Layout now controls whether tag links are shown after a post. The default is to show tag links. NEW: Publishers can now control whether to show a Next/Previous link on posts via an Article Navigation setting in Trellis Settings. The default is to show the Next/Previous link. NEW: Removed Trellis Settings from the WordPress Customizer. Settings are more easily displayed (along with additional configuration options) in Trellis Settings. NEW: Publishers can now use a Hide Page Title control on any page in the Page editor. NEW: For child theme developers, two new functions were added to the Trellis Core front page template (header-content-front-page.php) for static front pages:  mvt_title_before() fires off the tha_title_before hook before the page title output (as long as the title isn’t hidden). mvt_title_after() fires off the tha_title_after hook after the page title output (as long as the title isn’t hidden).   CHANGED: Removed the Enable Stale CSS While Revalidating feature. Trellis will now serve the original page/post CSS while the Critical CSS files are regenerating. This may result in a slower site speed until the files are regenerated, but will help reduce confusion for publishers. For example, if a plugin updated a site’s CSS while the stale Critical CSS was shown during regeneration, publishers would think the plugin wasn’t working. CHANGED: Renamed the CSS Allowlist section in Trellis Settings to Force Non-Critical CSS. CHANGED: Added more detailed descriptions to Force Critical CSS and Force Non-Critical CSS features to help publishers better understand the features. CHANGED: Modified how entered CSS selectors are displayed in the Force Critical CSS and Force Non-Critical CSS settings. Values entered for these features are now shown as user interface “chips” which can be removed from the setting by clicking the X control. CHANGED: Added descriptive text to the PWA Short Name and PWA Site Icon settings to inform the publisher that these items must be set for the Progressive Web App feature to work. CHANGED: Added a caret (\u003e) control to Trellis notices when additional information is available. Previously, notices showed a link which could be missed at a casual glance. CHANGED: Added code to resolve a “Links do not have discernible name” failure in the GPSI/Lighthouse accessibility audit. The aria-hidden=\"true\" tabindex=\"-1” attributes are now added to Featured Image tags in the post pagination section. CHANGED: Modified the behavior of links in Trellis Settings to open in a new browser tab instead of the current tab. This affects License, Marketplace, and links to help articles. CHANGED: Modified admin notices so that they can be dismissed like other notices. CHANGED: Removed the Critical CSS Error notice and replaced it with a dismissible Critical CSS Warning notice. CHANGED: Added a warning for publishers choosing a 16px font size in Trellis Settings. For optimal ad performance, the font size should be 18px or larger. CHANGED: Changed the name of the About Widget to be Trellis About Widget to better identify it as Trellis functionality. CHANGED: Child theme developers can no longer use the mv_trellis_admin_notices filter as it has been removed. This filter removed all notices during an upgrade, but it’s no longer needed due to changes in how Trellis handles notices. FIXED: Removed underlines when displaying WP Core button blocks. By default, underlines will only be applied when hovering over these elements. FIXED: Added a message and button to the Critical CSS tab when a Trellis license is not found. Publishers will be directed to the Mediavine Marketplace. FIXED: Added a compatibility class for RankMath so that publishers can add links to category pages. FIXED: Added code to ensure all Trellis theme styling is applied in the Gutenberg and Widget Block editors. Previously, some default WordPress styling could be shown. FIXED: Improved the code for the About Widget to better ensure that changes can be saved. FIXED: Resolved an issue where a Trellis theme could trigger side-scrolling on smaller screens. FIXED: Resolved an issue where the Yoast compatibility class code triggered Trellis to clear its cache, even if Yoast Breadcrumb settings were not changed. FIXED: Resolved an issue where Purge Page CSS in the WordPress Admin Bar didn’t work on static home pages. FIXED: Added missing RSS feed links on the home page to optimize Trellis sites for Google Discover. FIXED: Added .excerpt-link:hover styles to the Critical CSS file in Trellis Core. Previously, hover colors could be missing when Critical CSS was generated. FIXED: Resolved an issue where the Critical CSS status could show as white when it should be a different color. FIXED: Clearing the Trellis cache no longer removes \u003clink\u003e tags from Trellis Settings \u003e Hooks. FIXED: Added an Error notice in the Widget Editor when the Mediavine Sidebar Ad Hint widget was the last widget in the sidebar. Sidebar Ad Hints should not be the last widget in a sidebar. FIXED: Removed the \u003ctitle\u003e tag on the Search Bar SVG image when the Search Bar is enabled. The prevents duplicate title tags in the site HTML. FIXED: Resolved an issue with images that had a width:auto attribute. In Create and WPRM, this would manifest as images that would appear larger than their actual size. FIXED: Resolved an issue where special characters weren’t decoded properly on some mobile browsers. FIXED: Resolved an issue where inline images within a paragraph could be downsized to 300px when they should be larger. FIXED: Resolved an issue where Trellis Comments were not styled when Trellis and Create were running on a post and the browser was reloaded with the comments on screen. FIXED: Resolved a compatibility issue when Jetpack, WooCommerce, and Trellis Comments were active. WooCommerce’s Product Page \u003e Review tab was missing if either Trellis Comments or Jetpack Comments were enabled. FIXED: Resolved a Lighthouse fail with the message “Tap targets are not sized properly” message. Pagination link padding was adjusted. FIXED: Resolved an issue where Settings \u003e Display \u003e Custom Font Loading could be active even if there was no Trellis license. This only occurred when custom Body and Font settings were selected and the Trellis license was removed. FIXED: Removed the link from the Manage Trellis JS/CSS button in the Admin bar so that it isn’t clickable. Previously, clicking on it could show a blank Settings page.  0.16.1 (08/24/2022)  FEATURE: Adds a new setting to Enable/Disable Trellis JS Optimizations. FEATURE: Disables JS Optimizations when Autoptimize JS Optimizations are enabled FEATURE: Disables JS Optimizations when NitroPack is enabled FEATURE: Disables JS Optimizations when Litespeed Cache JS Optimizations are enabled FEATURE: Disables JS Optimizations when WP Fastest Cache JS Optimizations are enabled FEATURE: Disables JS Optimizations when W3 Total Cache JS Optimizations are enabled FEATURE: Disables JS Optimizations when Clearfy Cache JS Optimizations are enabled FEATURE: Disables JS Optimizations when WP Rocket JS Optimizations are enabled FEATURE: Disables JS Optimizations when Jetpack JS Optimizations are enabled FEATURE: Disables JS Optimizations when SG Optimizer JS Optimizations are enabled FIX: Resolves an issue with the Rebuilding Minified JS action not functioning properly FIX: Enables partial JS file URLs to be used instead of just full JS file URLs FIX: Resolves error when localizing the same font for Body Font and Heading Font settings FIX: Removes the code that automatically added images to the image generation queue when pages are viewed FIX: Removes Link To Issues Tab From Critical CSS Status Bar CHANGE: Removes the need to rebuild minified JS after adding a JS file exclusion CHANGE: Adds image selected, for the About Me Widget, to the image generation queue when the correct size doesn’t exist CHANGE: Stops the process of getting the count of images in the image generation queue when server resources aren’t available CHANGE: Removes Critical CSS Error notices CHANGE: Sends Critical CSS Errors with REST API check CHANGE: Removes Issues Tab CHANGE: Reduces Critical CSS timeout duration and time between REST request tests to 48 hours  0.16.0 (07/13/2022)  FEATURE: Added Create compatibility class to add its critical css selectors to the forceInclude filter FEATURE: WP Rocket specific code moved to compatibility class FEATURE: New way to process settings and database updates when the theme is updated FEATURE: Links the post meta Author name to their Website url, or falls back to the Author Posts url FEATURE: New setting to disable Trellis comments/Jetpack compatibility class FEATURE: Added public functions for purging critical css, mv_trellis_purge_page_critical_css and mv_trellis_purge_all_critical_css FEATURE: Admin update notices are dismissible FEATURE: Added theme supports check for mvt_hooks to check for Trellis specific hooks FEATURE: Added function ’mvt_content_header_after’ to fire new ‘hook tha_content_header_after' immediately after closing  content tag FEATURE: Added a link to the MV Marketplace when viewing Theme Details FEATURE: Adds “disabled” to list of possible Critical CSS statuses displayed on WordPress Admin Bar FEATURE: Javascript Optimization exclusion setting FEATURE: Posts and Pages with “Processing” Critical CSS Status are set back to “None” after 2 hours FEATURE: mvt_processing_css_status_timeout filter added for altering the timeout of “Processing” status Critical CSS FEATURE: Added “Show on mobile” setting for all blocks in the Gutenberg widget editor FEATURE: Added filter mv_trellis_post_link_featured_image_sizes for post link featured images sizes attribute FEATURE: Ability to process all image sizes in queue FEATURE: REST endpoint for adding images to queue FEATURE: 2nd level mobile menu drop-down FEATURE: Display notice when font fails to localize FEATURE: Adds admin notice when Trellis issues present with a link to issues page FEATURE: Collapsible Notice Messages FEATURE: Adds filter mv_trellis_disable_add_async_styles to disable adding async to enqueued styles FEATURE: Adds filter mv_trellis_disable_add_async_attribute to disable adding async to enqueued scripts FEATURE: Adds filter mv_trellis_disable_convert_iframe_to_lazyload_when_enabled to disable adding or modifying iframe loading attribute FEATURE: Adds filter mv_trellis_disable_{$this-\u003eslug}_compatibility to disable adding plugin compatibility code FEATURE: Adds filter mv_trellis_disable_convert_image_to_lazyload_when_enabled to disable adding or modifying image loading attribute FEATURE: Adds filter mv_trellis_disable_set_image_data_pin_attribute to disable adding data-pin-media attribute FEATURE: Adds filter mv_trellis_disable_set_image_dimensions to disable setting image dimensions FEATURE: Adds filter mv_trellis_disable_set_image_cls_aspect_styles to disable setting and adding aspect ratio styles FEATURE: Adds filter mv_trellis_disable_process_images to disable processing all image optimizations FEATURE: Adds GA4 Support FEATURE: Images that Trellis generates for src-set are now put into a queue only if they don’t exist and are needed FEATURE: Image generation queue runs as a background process that scales with server resources FEATURE: Add images to size generation queue on post save FEATURE: Ability to regenerate all images and featured images in Trellis Settings FEATURE: Reduced number of custom image sizes created when a one is uploaded FEATURE: Expands on functionality of collapsible admin notices with collapsed label and collapsed message text FIX: No longer hiding WP Rocket settings FIX: Comment forms are removed on posts with comments disabled when using Trellis Comments FIX: Removed Trellis font selection settings from the Customizer FIX: Adds ‘ggnoads’ class to post navigation images to prevent gum gum ads on those images FIX: Replaced cUrl with wp_remote_get for font localization FIX: Reduces Critical CSS selectors by only pulling used WP Blocks on the current page FIX: Removes automatic adjustment of WP Rocket’s settings when the plugin is activated FIX: Post Thumbnail Size now based on selected Featured Image Size in Trellis settings FIX: Removes excess Mediavine links in footer branding FIX: Fixes issue with Convert Pro popups not displaying when Critical CSS is enabled FIX: MV ad hint last unit in sidebar notice fixed FIX: MV ad hint sidebar notice fixed FIX: Pre-cache links that start with the site url FIX: All comments are displayed if Trellis Comments are disabled FIX: Disables Critical CSS on WooCommerce Checkout and Cart pages FIX: Breadcrumbs will not display on the front page, feed or static FIX: Restores Submit button on WooCommerce review page FIX: Removed the Critical CSS label from admin bar when in page or post edit mode FIX: Clearing Trellis Cache/Upgrading Trellis will now reset “Processing” Critical CSS statuses FIX: Thrive Leads mobile content selector FIX: Adjusted sizes attribute for post link featured images to allow the browser to select the appropriate image size FIX: Fixes layout issues from broken HTML in user comment content FIX: Ensures correct title is being added to Critical CSS issues list for category pages FIX: PWA version is updated whenever Critical CSS is successful, is purged, or Critical CSS is disabled for a post FIX: UI no longer crashes when trying to Queue a page for Critical CSS from the Issues tab FIX: Fixes CLS and blurriness for the about widget image on Wisteria and Birch by ensuring the correct source size is used FIX: Ensures that All In One SEO settings appear in the Classic Editor for legacy versions of the plugin FIX: Data attributes no longer removed from Trellis Setting Hooks fields when settings are rebuilt FIX: Adds author ‘url’ field to json-ld output for type ‘person’ with Trellis SEO active COSMETIC: Adjusts default image sizes attribute to 728px CHANGE: Updates Theme URI to the Mediavine Marketplace CHANGE: Updates minimum PHP version to 7.2 CHANGE: Remove ‘Enable Additional Image Sizes’ setting CHANGE: Updates font localization to REST request CHANGE: Removes possibility that fonts are served from Google CHANGE: Font localization is now a requirement to change fonts CHANGE: Button has been added for confirming a custom-typed font CHANGE: Sanitization of custom font input CHANGE: Adjusts Universal Analytics Field Copy CHANGE: Updates privacy parameters for UA tracking disabling both allow_google_signals and allow_ad_personalization_signals   REMOVAL: WP Rocket Trellis setting    0.15.3 (03/30/2022)  FEATURE: Images can be eager loaded by adding the eager-load  class FIX: Fixes issue where image tags with the loading=“eager” property were being lazy loaded FIX: Adds support for Trellis Images with non-lazyloaded images FIX: Critical CSS issues list now display if Critical CSS is turned off due to an issue FIX: BTF sidebar localModel position FIX: Fixes CLS image aspect ratio issues on posts with broken HTML FIX: About Me Widget Images Sizes on specific child themes is fixed FIX: Curly brace for an inline style when using Grow Social is no longer missing FIX: Fixes issue where image tags with the loading=“eager” property were being lazy loaded FIX: Trellis will not add meta description nor open graph tags when Grow Social is handling them CHANGE: Updated PHP deprecation nag version to 7.2 CHANGE: Trellis now requires PHP 7.1 or greater COSMETIC: Text boxes now appear with a border around them instead of inline text boxes COSMETIC: Checkboxes are now easy to see in Customizer Settings COSMETIC: Monotext now uses the same font as everything else  0.15.2 (02/02/2022)  FIX: Posts with bad HTML will now still load instead of being a blank page FIX: Prevents fatals when checking for Critical CSS on term pages FIX: Fixes custom kses allowed elements to not throw warnings after the WordPress 5.9 update FIX: Prevents stripping of HTML tags from Footer Copyright Text setting  0.15.1 (01/17/2022)  FIX: Force a critical css purge when updating to 0.15.1  0.15.0 (01/17/2022)  FEATURE: New setting to disable Trellis comments/Jetpack compatibility class FEATURE: Add button to with link to Trellis marketplace for settings when no license active FEATURE: Added a way to bypass the Trellis lazyload functionality in favor of browser native lazyloading FEATURE: Added filter mv_trellis_about_widget_image_sizes to adjust About widget thumbnail sizes attribute FEATURE: Adds new hooks to be run through the Critical CSS generation lifecycle FEATURE: Harmonize color setting inputs with color picker FEATURE: Link to the changelog on Trellis Docs added to the theme description, viewable when looking at the theme details FEATURE: More/Read More block now works in RSS feeds for RSS feed-driven emails FEATURE: New template for Featured post - template-parts/header/header-featured.php FEATURE: Update Admin UI, increasing usability of settings with subsections FEATURE: Transients are no longer used and replaced with the Throttle API which uses options under the hood FIX: About widget thumbnail is no longer lazyloaded FIX: About widget thumbnail sizes attribute has been adjusted for its available space FIX: Ads will not display on mobile pages when Show Ads on Pages is disabled FIX: Category page content is now processed allowing Trellis Images to optimize its images FIX: CSS validation errors FIX: Disable new WP Rocket delay_js FIX: Disabling and Purging Critical CSS on pages set to the Front Page now work FIX: Don’t show ‘Display on mobile devices’ option for ATF ad widget FIX: EDD no longer causes issues with featured images FIX: Feed Ad Spacing setting None value displays correctly in both the Customizer and Settings Page FIX: Fixes issue with false negatives about site’s REST API support FIX: Improve Critical CSS setting language FIX: Improves Trellis license checks and caches the status for 12 hours. Includes a button in the Trellis Settings to recheck FIX: Made strings translatable where applicable FIX: Post Meta Date Display now has the correct default value FIX: Prevents multiple WP Fastest Cache menu items from appearing FIX: PWA Short name set maxLength, add placeholder text, update copy FIX: Remove WP 5.8 block_categories deprecated notice FIX: Remove Add Media buttons from category description editor because WordPress doesn’t support images in category descriptions FIX: Removed BTF ad hint/placeholder and added a value for sidebar_btf_selector local model FIX: Service worker registration error in rich search results FIX: Shows Breadcrumb option in Post Meta Settings only when Yoast breadcrumbs are active and enabled FIX: Sidebar is a sibling of main#content for all page types FIX: Theme settings will be updated when Mediavine Control Panel is activated and deactivated FIX: Underlines added to post content links FIX: Updated widget Display on Mobile so it’ll work as expected with legacy widgets in the new widget editor COSMETIC: .tags-links set to max-width: 100% COSMETIC: Hide trellis settings on mobile and add notice COSMETIC: Remove License tab from the Customizer COSMETIC: Remove plain ‘no issues found’ box from settings COSMETIC: Update disabled license text to button with link to Marketplace Trellis page LANGUAGE: Updated SEO Setting Copy to reflect expected behavior  0.14.4 (10/27/2021)  FIX: Increases performance of Trellis Comments, reducing server load on pages with numerous comments FIX: Fixes smooth scroll conflict with non-Create arrival FIX: Prevents the Trellis Settings from crashing if the Google Font settings didn’t exist  0.14.3 (08/30/2021)  FIX: Removed Next and Previous text from article navigation. In some cases it was being added to the SERP title. FIX: Hooks not migrating properly when upgrading Trellis  0.14.2 (08/30/2021)  COSMETIC: Moved the featured image above the page title on article pagination  0.14.1 (08/30/2021)  FIX: Force the purge of critical css when upgrading Trellis from a version before 0.14.1  0.14.0 (08/30/2021)  FEATURE: New settings for post meta display options. FEATURE: Added filter mv_trellis_image_sizes_attribute to allow the Trellis default to be changed FEATURE: Added filter mv_trellis_excerpt_image_res for excerpt image resolution size FEATURE: Added filter mv_trellis_excerpt_image_sizes for excerpt image sizes attribute FEATURE: Added filter mv_trellis_featured_post_image_res for featured post image resolution size FEATURE: Added filter mv_trellis_featured_post_image_sizes for featured post image sizes attribute FEATURE: Added hook function mvt_aside_before_entry_content that will run tha_aside_before_entry_content just before opening div.entry-content FEATURE: Added hook function mvt_aside_after_entry_content that will run tha_aside_after_entry_content just after closing div.entry-content FEATURE: Added filter mv_trellis_entry_content_classes for adjusting div.entry-content classes FEATURE: Added hook function mvt_trellis_entry_footer_top that will run tha_entry_footer_top just inside the entry footer (footer.entry-footer) FEATURE: Added hook function mvt_trellis_entry_footer_bottom that will run tha_entry_footer_bottom just before closing the entry footer tag (footer.entry-footer) FEATURE: Added filter mv_trellis_article_nav_image_res for article nav image resolution size FEATURE: Added filter mv_trellis_excerpt_image_res for excerpt image resolution size FEATURE: Added filter mv_trellis_grow_sidebar_margin_space to adjust side space given to Grow Social sidebar FEATURE: Added filter mv_trellis_grow_sidebar_media_query_min_width to adjust min-width to apply side space given to Grow Social sidebar FEATURE: Added filter mv_trellis_grow_sidebar_media_query_max_width to adjust max-width to apply side space given to Grow Social sidebar FEATURE Added filter mv_trellis_grow_sidebar_compatibility_styles to overwrite the styles output when the Grow Social sidebar is active FIX: Updated html output to be more semantic FIX: Updates the sizes attribute for images to be more specific for Trellis based themes FIX: HTML used in the Author Biographical Info displays as expected. FIX: mv_trellis_the_title now includes a title for 404s FIX: Moved Grow Social specific styles into the compatibility class that will only load when needed FIX: Updated scripts for better IE11 support FIX: Updated WooCommerce compatibility class to work with semantic changes CHANGE: Renamed the filter used to override the article nav image orientation, from mv_trellis_image_orientation to mv_trellis_article_nav_image_orientation COSMETIC: Many style updates for the semantic html changes COSMETIC: Removed “Cozy” option from Layout Size Trellis Setting REMOVED: Bamboo specific styles for Web Stories compatibility  0.13.4 (06/14/2021)  FIX: Removed hook that disabled Yoast json-ld before checking to see if Trellis SEO Output is enabled  0.13.3 (06/08/2021)  FIX: adjusted logic to not output description meta when Trellis SEO Output is disabled  0.13.2 (06/08/2021)  FIX: removed logo inline css that’s causing images to not scale as expected  0.13.1 (05/26/2021)  FEATURE: Font CLS fix with settings FEATURE: New setting to hide featured images on mobile FIX: Sidebar ATF CLS FIX: Logo CLS Issue  0.13.0 (05/26/2021)  FEATURE: Adds checks for REST API Availability FEATURE: Adds native ad templates and base styles FEATURE: Anonymize Google Analytics FEATURE: Preload fonts when possible FEATURE: Custom CSS that will break in the semantic HTML update is posted to intercom. FEATURE: Add touch screen support to desktop menu FIX: Remove custom CSS impact from MV Dashboard FIX: Remove ad targeting impact from Cloudflare’s RocketLoader. FIX: WB_REVISION is no longer added to Front Page posts paginated links FIX: Site logo/title link URL now has ending slash FIX: Default Font is now System Default and warnings are provided for when using a non-web safe font. FIX: Moved comment base styles to main style sheet FIX: Post navigation images use the Featured Image Size setting for orientation FIX: Added role=“comment” to comment containers FIX: Fix display of fallback user avatars in Safari FIX: Fix list style of nested lists FIX: License Notice no longer displays ‘Invalid Date’ on the license’s expiration. FIX: Critical CSS is no longer generated for WooCommerce pages. FIX: If the WP setting ‘Comment author must fill out name and email’ is disabled, then users can comment without a username or email now. FIX: Set THA hooks theme support earlier FIX: Added force keep selector to fix Web Story display FIX: Trellis Display Settings not Rendering in Customizer FIX: Added role=“comment” to comment containers FIX: All of the hard-coded strings are now using the ‘mediavine’ text-domain. FIX: Excerpt thumbnails should use the correct size FIX: High Vulnerability Security Issue is no longer present inside of Critical CSS CHANGE: “Comments are closed.” notice only displays on posts that have previous comments COSMETIC: Improves UX of color selection settings COSMETIC: Clean up mobile menu and remove lines COSMETIC: Clean up font stack COSMETIC: Change normal font name to medium in settings REMOVE: Removed Helvetica from the Web Safe font list REMOVE: Trellis hooks that were replaced with THA hooks are no longer available  0.12.1 (02/25/2021)  FIX: Constrains the range of inputs allowed by the Critical CSS endpoint.  0.12.0 (02/25/2021)  FEATURE: Added a Critical CSS Issues tab to the Trellis Settings Page FEATURE: Changed the text \u0026 link on the global error message FEATURE: Added multisite support FEATURE: More granular control over H tags display FEATURE: Adjusts sizes attributes on images to get proper size added during PSI tests. FEATURE: Display author name and biographical info on the author page. FEATURE: Adds a new “Trellis SEO Output” setting that replaces the old “JSON-LD Source” \u0026 “Meta Description Source”. JSON-LD, meta description, and open graph are now only output if this setting is ENABLED. FIX: .txt files are no longer processed by the service worker FIX: Tooltip for the “Display Featured Images” Setting was incorrect FIX: tha_head_bottom now fires after wp_head() FIX: Critical CSS is no longer generated on the Subscribe to Comments Reloaded page FIX: Add a srcset width of 960px to address Google Page Speed Insights warnings about image optimization FIX: Update the Instructions for the Footer Copyright Text setting to declare support for HTML FIX: Remove resize event listener for sub-menu-open FIX: html lang attribute now outputs the Site Language setting value REMOVE: Scss and js source files are no longer included as part of the distribution REMOVE: custom-functions.php and custom-style.css removed COSMETIC: The Trellis settings for Primary and Secondary color are used for the search field border default and focus colors, respectively COSMETIC: Removed gutters over 1200px COSMETIC: Adds display adjustments for Web Stories  0.11.0 (02/25/2021)  FEATURE: Added Background Accent Color field for customizing the background color of page/post headers FEATURE: Theme authors can now use remove_theme_support( ‘mv_trellis_background_accent_color’ ) to disable support for changing page/post header background colors FEATURE: Added filters for the labels \u0026 instructions for Theme Settings FEATURE: Added theme support attribute to settings schema. Only settings that have theme support or don’t declare the need for this attribute will be added to the localized array of settings FEATURE: Add a setting for adding third-party service workers FEATURE: Adds form validation for invalid hook content FIX: moved array of license dependant settings to the back end so they can be filtered by child themes FIX: The most recent sticky post will display as the featured post on the home page FIX: No longer deferring Thrive Leads frontend javascript FIX: Thrive Leads styles needed for interaction after page load will be included in critical css FIX: Prevent pixelation of JPG and PNG logos FIX: Allow Trellis users to specify Full size images for Featured Image FIX: Provide a default for the Featured Image Size field when default_image_ratio isn’t populated FIX: Adds new method for extracting stored widget values FIX: Modified date will not display if it is older than or the same as the published date FIX: Change .about-author-title to \u003ch3\u003e FIX: Added descriptive text to home page sticky excerpt ‘Read More’ link FIX: Removed extra markup from RSS feed FIX: Added wp-embed back into our minified script FIX: Trellis Settings text fields are now sanitized using wp_kses REMOVAL: Remove JP2 support from lazyloading COSMETIC: removed space for Grow sidebar on screens smaller than 700px COSMETIC: Featured Hero background color controlled by Background Accent Color setting  0.10.3 (11/25/2020)  FIX: Added local model selector, content_selector_mobile  0.10.2 (11/14/2020)  FIX: Prevents tha_head_bottom hook from being wrapped in a div  0.10.1 (11/11/2020)  FEATURE: Allow a user to delete all critical CSS files that have been generated (rather than marking them as stale) FEATURE: Makes mobile sub-menus open \u0026 close with an arrow instead of being always-visible FEATURE: Add a setting to prevent meta description conflicts FEATURE: Adds settings to set allowlist and force critical CSS options for Critical CSS API FIX: Disable some settings if license is invalid FIX: Add pagination for articles with multiple pages FIX: Add more detail to article meta and set default to display both modified and published dates FIX: SCSS variables within calc() are now replaced properly FIX: Fix scrolling conflict with WRPM Comment Ratings enabled FIX: loading=“lazy” will be removed on images that have lazyloading disabled FIX: Corrects an issue where “Comments are Closed” message displays on pages FIX: No longer adding width/height attribute to externally hosted images FIX: Fix comment submission in IE11 FIX: Renamed filter mv_trellis_css_bypass to mv_trellis_css_allowlist FIX: Correctly output Akismet privacy notice in comments FIX: Password-protected posts/pages will not request critical css REMOVAL: Removes WebP Image Host URL setting COSMETIC: Add spacing to  elements COSMETIC: Adjusted spacing around user-entered content  0.10.0 (10/26/2020)  FEATURE: ability to hide the page title on a page that is used as the static home page FEATURE: Improve instructions for Trellis License FEATURE: Improve instructions for Enable Additional Image Size settings FEATURE: Replace color picker component FEATURE: delete critical css when adding or removing a primary sidebar widget FEATURE: updating a sidebar widget setting invalidates critical css, only applies to the primary sidebar FEATURE: Added a Trellis Setting to display the featured image on posts FEATURE: Adds data sync for licensed Trellis users FEATURE: Adds Intercom widget to settings and customizer for users with valid licenses FIX: Meta fields will only show for appropriate post types in Gutenberg editor FIX: Fixes JavaScript errors in IE11 FIX: Prevent JS error on login page FIX: Update license warning copy FIX: Prevent CLS issues FIX: removed add_action instance of mv_trellis_after_entry FIX: html used in Trellis Settings Hooks will persist changing or upgrading Trellis based themes FIX: Fix fetching and updating of comments when using plain permalinks COSMETIC: Clean up display of logo, searchbars, and sidebar and footer navs COSMETIC: Corrected the display of headers preceding galleries COSMETIC: Corrected the image caption overlay display COSMETIC: Replaced the search form close X with \u0026times; COSMETIC: Search field input now uses the Trellis Settings Primary Color for its outline/border when it has focus COSMETIC: Search toggle icon now uses Trellis Settings Primary Color for its fill and Secondary color when hovered COSMETIC: Set body background color to white COSMETIC: footer widgets no longer have their text centered by default COSMETIC: all li styles within widgets default to list-style:none, margin-left:0, and text-align:left COSMETIC: all a styles within widgets default to text-decoration:none, same font size, and text-transform:uppercase COSMETIC: updated calendar widget to handle new markup COSMETIC: Grow floating sidebar will not cover content on screen widths greater than 700px COSMETIC: only display horizontal scrollbar for code when needed COSMETIC: comment avatar images will not get squashed on smaller screens  0.9.3 (10/12/2020)  FIX: fixes an issue where Critical CSS behavior depended on Create being active  0.9.2 (10/02/2020)  FEATURE: added a filter for the page title FEATURE: plugin compatibility handling framework added FEATURE: Checks and validates Trellis Pro license FEATURE: added filter mv_trellis_site_title_text_classes for site title markup classes FEATURE: added filter mv_trellis_site_title_logo_classes for site logo source markup classes FEATURE: added filter mv_trellis_site_title_logo_alt_text for site logo alt text FEATURE: Automatically disable Trellis JSON-LD at theme activation if Yoast or AIOSEO exist. FEATURE: Add notices for license status FEATURE: Add button to remove license FIX: Displays a notice on posts when discussion is turned off FIX: resolved compatibility issue with Sassy Social Share FIX: handle Worth the Read content wrapping compatibility issue FIX: Ampersands in author names in comments will render correctly. FIX: Prevent display of comments on password-protected pages FIX: Critical css will not respond with a WP_Error for critical css Rest API calls FIX: Email me whenever Anyone posts a comment is now checked for new comments FIX: Fix non-functional buttons in About widget FIX: Make sure theme can be previewed on a fresh WordPress installation from the customizer. FIX: removed Delay Google Font setting, it’s no longer needed FIX: removing this htaccess directive in hopes of not conflicting with StackCache FIX: Removed some boilerplate code for a React app that never ended up being created. FIX: Remove unused CSSComb config FIX: Move placement of comment hooks so the content isn’t removed on load FIX: Remove Genesis hooks from Trellis, preventing duplicate content on plugins that support both Genesis and THA FIX: Fix issue where ad hints weren’t added within post archives COSMETIC: Hide dangerous buttons  0.9.1 (09/30/2020)  FEATURE: Add Trellis Hooks with UI to add custom content FEATURE: Add Yoast Breadcrumb support FEATURE: added setting to specify which post date(s) are to be displayed in the post meta. FEATURE: Add logo optimization filter for Trellis Images to use. FEATURE: Add optimized image lazy loading using detection and queueing FEATURE: Added a dropdown for setting the post thumbnail orientation FEATURE: added a way to handle errors with critical css generation FEATURE: Rename “Sidebar Unit” widget to “Mediavine Sidebar Ad Hint” and add usage notices FIX: Typography: H1 tags in archives and feeds should be H2 unless it’s the page title. FIX: article navigation images will not be shown with pinnable images FIX: comments will display on pages that have them enabled FIX: the menu will not display over the header search form FIX: Avoid caching non-200 response types FIX: Avoid caching third party JavaScript FIX: Fixes an undefined index notice that can occur when a child theme is activated FIX: critical CSS generation for static home pages FIX: Only displays article schema when on that specific post/page FIX: Remove single-size optimized logo sources from Trellis. FIX: Activating or updating Trellis based themes will not remove previously localized fonts FIX: critical css can handle page slugs with non-english characters and % FIX: Home page featured post image will display reliably FIX: Enable Additional Image Sizes should work as expected when disabled COSMETIC: excerpt title hover uses the selected secondary color. COSMETIC: b tag will have the same font-weight as the strong tag COSMETIC: ensure the sidebar stays below the header COSMETIC: ensure footer is clearing floated elements from the entry content COSMETIC: figcaptions will be distinguishable from paragraph text COSMETIC: the sidebar should not overlap the content above it anymore  0.9.0 (06/10/2020)  FIX: ad hint widget now has a save setting button for display on mobile FIX: don’t try to convert svg to webp/jp2 FIX: moved output of Trellis css variables to before the Trellis css output FIX: removed margin from sub menus that pushed it away from its parent FIX: Fixes issue where critical CSS wasn’t properly generated for static home pages FIX: keep the sidebar btf ad from overlapping the footer FIX: Adds mv_trellis_disable_lazy_load_classes filter to disable image lazy loading based off class name FIX: resolved an issue where the secondary css file would be deleted when critical css was rebuilt. COSMETIC: added max-width to sidebar widgets to center on narrower screens  0.8.3 (05/13/2020)  FEATURE: Adds native browser lazyloading attribute to iframe tags FIX: Adjusts localModel so script wrapper works with third party recipe card plugins FIX: Prevents lazyload script from trying to convert gifs to webp/jp2 FIX: Asynchronously loads secondary CSS COSMETIC: Adds space above the sidebar on smaller screens COSMETIC: Centers sidebar widgets on small screens  0.8.2 (05/05/2020)  FEATURE: adds Trellis Setting to enable Critical CSS FEATURE: add setting to enable/disable PWA, default: enabled ENHANCEMENT: Update Workbox Dependencies FIX: Fixes about widget image display FIX: correct PHP notice in debug logs COSMETIC: use new logo for admin theme selector COSMETIC: gave long navigation links a little space between wrapped lines  0.8.1 (04/29/2020)  FEATURE: Add option for Pro users to disable Trellis/Mediavine links in footer FEATURE: Adds rel=\"noopener nofollow\" to Trellis/Mediavine links FEATURE: trigger cache clearing when theme update is triggered FEATURE: Add sidebar images to lazyload processing FEATURE: Disable Yoast and All-In-One SEO options in JSON-LD if these plugins aren’t active FEATURE: Added two endpoints, mv-trellis/v1/clear-db and mv-trellis/v1/reset-theme for clearing and resetting theme options FEATURE: add theme_default to localized settings array FIX: added local model defaults FIX: added space between links in lists increasing the clickability FIX: increased text contrast in multiple places FIX: Default JSON-LD to Yoast if Yoast is active when Trellis is activated FIX: ColorPicker now displays placeholder Default when it is empty instead of forcing the value to #777. COSMETIC: set default Layout Space to ‘Cozy’ COSMETIC: footer widgets are not restricted to 200px wide COSMETIC: Adjusted padding on single page header wrapper COSMETIC: child theme css isn’t enqueued in WP admin  0.8.0 (04/14/2020)  FEATURE: Trellis API updated to V3 FEATURE: Added detection for Grow social sidebar to add needed body class FEATURE: added filter ‘mv_trellis_local_script_model’ to allow overriding of local model settings FEATURE: Adds ability to rollback Rocket settings on activation FEATURE: Added additional options to JSON-LD Source field in Customizer ENHANCEMENT: when critical css is refreshed, the old css stays in place until the newly rebuild can take its place ENHANCEMENT: check critical css file size before it’s written to the pub server FIX: Critical css is deleted on Trellis based theme switch FIX: if disable_critical_css flag is set, get_css_paths will exit early FIX: pluralization of “Comments” label when there’s a single comment FIX: Resolves a console error when loading comments FIX: sub-menu UI FIX: menu UI in IE11 FIX: post meta author uses the ‘Display name publicly as’ user setting FIX: site meta description will only be output when Yoast SEO is not active FIX: bug with blank customizer page FIX: bug where Pro settings wouldn’t be available after saving the setting FIX: removed the setting that created the footer menu display location FIX: Added hook to disable All in One SEO JSON+LD if plugin is enabled FIX: Calculates image size attributes faster when lazy loading COSMETIC: force videos to 16:9 ratio on mobile COSMETIC: Pushed content 65px to left if social sidebar is active COSMETIC: Hide Trellis Pro feature settings in the WP Customizer  0.7.1 (03/04/2020)  FEATURE: support for SVGs added FEATURE: added check for custom function and custom styles within site root FEATURE: added CloudFlare support ENHANCEMENT: added php-scoper to help remove scope issues ENHANCEMENT: migrated to UI 5.0 ENHANCEMENT: added hook for running script when theme is updated ENHANCEMENT: font selector in Trellis settings updated, size limited with better scrolling ENHANCEMENT: font selector in Trellis settings updated, font name displayed in that font  0.7.0 (01/16/2020)  FEATURE: Full width page template added ENHANCEMENT: Heading Font setting accepts custom font(s) ENHANCEMENT: add theme slug to body class ENHANCEMENT: added 3 action hooks to footer: mv_trellis_before_footer, mv_trellis_footer, mv_trellis_after_footer ENHANCEMENT: new shortcodes: mv_trellis_footer_backtotop, mv_trellis_footer_copyright, mv_trellis_footer_childtheme_link, mv_trellis_footer_trellis_link, mv_trellis_footer_medivine_link, mv_trellis_footer_wordpress_link, mv_trellis_footer_site_title ENHANCEMENT: footer copyright line is built using the new shortcodes ENHANCEMENT: Site logo placed within a picture element ENHANCEMENT: added bypass to specify css classes that need to be included in the critical draw ENHANCEMENT: expanded webp and jp2 server support ENHANCEMENT: updated htaccess entry for support of the following: woff, woff2, webp, jp2 FIX: renamed Theme class to Init, better reflecting what it does FIX: font sizes for content is properly set based on the Trellis setting FIX: adjusted lazyload script match regex - replaces end of url matches, not all matches FIX: Fix blank page when navigating from Trellis settings to Customizer COSMETIC: many css tweaks COSMETIC: Automatic case correction for Mediavine  0.6.0 (12/09/2019)  FEATURE: use picture element for site logo FEATURE: Google font localization. Selected Google fonts will be served from the site ENHANCEMENT: web safe fonts are marked as such and listed first in theme options ENHANCEMENT: when a search has no results, display most recent posts under the ‘No results’ statement. ENHANCEMENT: gutter sizes are filterable for Layout Space option ENHANCEMENT: added option to widgets that will allow them to be hidden on smaller screens ENHANCEMENT: added option for default image size ratio ENHANCEMENT: added data-pin-attribute to images with original image src ENHANCEMENT: added footer copyright filter ENHANCEMENT: description on how to use settings api added to readme ENHANCEMENT: many updates to lazyloading images FIX: navigation items wrap FIX: menu item names don’t break mid-word FIX: cache namespaces FIX: removed link from Posted on date for single posts FIX: removed hardcoded footer navigation location FIX: CI tests that were failing due to WP svn rate limits FIX: IE support for picture elements COSMETIC: many css tweaks COSMETIC: removed mobile specific widget area  0.5.1 (11/08/2019)  FIX: Remove extra div tag from article content  0.5.0 (11/07/2019)  ENHANCEMENT: css tweaks ENHANCEMENT: added search bar to header replacing the mobile search bar ENHANCEMENT: added setting for adjusting element spacing ENHANCEMENT: added setting for logo size ENHANCEMENT: better cache clearing ENHANCEMENT: better support for rocket cache ENHANCEMENT: better custom font stack support ENHANCEMENT: added fallbacks for Google fonts ENHANCEMENT: added post meta to single post header ENHANCEMENT: added custom title option for category archive list ENHANCEMENT: added custom title option for author archive list FIX: long words not breaking and extending outside of the container FIX: support for IE11 FIX: error caused by old version of LIBXML on server  ","categories":"","description":"A list of changes made to the main Trellis framework, including the Trellis Core templates.\n","excerpt":"A list of changes made to the main Trellis framework, including the …","ref":"/docsytrellis/changelogs/trellis/","tags":"","title":"Trellis"},{"body":"While you can use it right out of the box, Trellis’ real power comes from developers like you creating your own child themes. Use Trellis’ customizable and extensible code to make child themes catered to your specifications.\nWhat’s Included? When you purchase Trellis, you’ll get access to the following:\n The Trellis Core framework, which includes a starter theme with minimalistic styling that’s coded for speed and performance. It also includes customizable settings to let publishers fine-tune Trellis’ features for their content. Bamboo, Birch, and Wisteria child themes. These separately installed themes offer unique styles to cater to different types of content. Use them as the basis for your own child themes. Trellis Images, an optional helper plugin that automatically generates and swaps out legacy images for Google-friendly WebP versions.  What’s Next?  Learn more about Trellis’ Benefits See what Add-Ons come with Trellis  ","categories":"","description":"Trellis is a [WordPress theme framework](https://codex.wordpress.org/Theme_Frameworks) built with modern web technologies. It’s designed to boost site speed and optimize ad revenue and includes three custom-built child themes.\n","excerpt":"Trellis is a [WordPress theme …","ref":"/docsytrellis/overview/what-does-trellis-do/","tags":"","title":"What Does Trellis Do?"},{"body":"Changelog 1.0.0 (10/05/2022)  FEATURE: Adds link to public changelog in theme details FEATURE: Adds support for Trellis tha_content_header_after hook FEATURE: Adds theme support for “Hide page title” setting (requires core Trellis 0.17.0) FIX: Constrains maximum width of tag links to content area FIX: Increases full width page template from 728px to 1200px wide on desktop FIX: Adds underlines to all links in post content to improve accessibility FIX: Fixes nested duplicate media query FIX: Solves desktop sidescroll caused by sub-menu of final menu-item FIX: Adds mvt_title_before() to static front page template before page title output FIX: Adds mvt_title_after() to static front page template after page title output FIX: Removes redundant layout setting notice FIX: Fixes nested submenu to work like Trellis Core on mobile Fix: Remove colon in header author meta after word ‘By’ COSMETIC: Reduces the padding between the heading and post content COSMETIC: Updates the screenshot preview that appears in Appearance -\u003e Themes CHANGE: Removes unneeded Mediavine ad hint div from markup CHANGE: Updates Theme URI to the Mediavine Marketplace  0.6.2 (08/23/2021)  FIX: Removed Next and Previous text from article navigation. In some cases it was being added to the SERP title.  0.6.1 (08/23/2021)  FIX: Transitional code is now returning the filtered local model after adding the sidebar breakpoint value  0.6.0 (08/23/2021)  FEATURE: Transitional code added for backwards compatibility until Trellis 0.14.x is released FEATURE: Add support for Trellis Heading Control FEATURE: Customized the sidebar_minimum_width local model value for Bamboo FEATURE: Add support for Trellis Post Meta display selections FIX: Updated html output to be more semantic FIX: Adjusted the orientation and resolution requested for Featured Post and Excerpt images FIX: Adjusted the sizes attribute for Featured Post and Excerpt images FIX: Hide widgets when Display on Mobile is not checked FIX: Updated styles for Critical CSS status on WP admin bar COSMETIC: Updated the header and post meta sections to ‘lift’ content higher on the pages/posts COSMETIC: Many style updates for the semantic html changes COSMETIC: Removed “Cozy” option from Layout Size Trellis Setting REMOVED: Specific styles for Web Stories compatibility  0.5.1 (05/26/2021)  FIX: Removed hardcoded font family Roboto Slab  0.5.0 (03/08/2021)  FIX: Moved the before content hook to the correct place FIX: Correct function is now used just before the header container COSMETIC: Reduced font sizes, margins, and padding to ‘lift’ more content into view on smaller screens COSMETIC: Trellis font-size setting is now applied to excerpt contents  0.4.0 (11/30/2020)  FIX: No longer hiding the date last updated on posts using css FIX: Fix hero image size on tiny phone COSMETIC: Adjusted the Navigation Menu widget sub-menu indentation COSMETIC: Updated the styles for widgets that display their output as a list COSMETIC: Updated dropdown/select field styles COSMETIC: Updated the styles for the primary menu for smaller screens COSMETIC: Updated the styles for the sub-menu toggle icons COSMETIC: Added padding to keep the Grow floating sidebar from covering content COSMETIC: Fixes appearance of radio buttons  0.3.0 (10/27/2020)  FEATURE: Add support for Trellis Hooks UI to add custom content FIX: Added child_slug to child theme options. This is used for identification and added to the body class FIX: added max-width for iframe to keep in from expanding outside its parent container COSMETIC: body background and color properties have been updated to use #fff and #1e1e1e respectively COSMETIC: updated the styles of the following html tags: code, pre, blockquote, pullquote, and cite COSMETIC: added styles to display Jetpack galleries properly  0.2.0 (06/17/2020)  FIX: add svg logo support COSMETIC: removed image grayscale filter from excerpt featured and the about widget images COSMETIC: adjusted the side margin/padding for screens below 380px to give ads more room COSMETIC: cleaned up menu margins  0.1.0 (04/14/2020)  initial release  ","categories":"","description":"A list of changes made to the Bamboo child theme.\n","excerpt":"A list of changes made to the Bamboo child theme.\n","ref":"/docsytrellis/changelogs/bamboo/","tags":"","title":"Bamboo"},{"body":"These controls let the publisher purge Critical CSS and JavaScript files, add Trellis-specific widgets to areas in the child theme, define the schema for posts, and adjust theme-specific styling, as well as other Trellis settings.\nAdditions to the WordPress Admin Bar When logged in, the WordPress Admin Bar will contain a menu for controlling Trellis’ JavaScript and Critical CSS features. It also shows the status of Critical CSS file generation.\nManage Trellis JS/CSS Menu This menu provides options for rebuilding the Trellis minified Javascript file and for purging Critical CSS files (for the entire site or for the displayed page). The specific commands are explained in the table below.\nNote The Manage Trellis JS/CSS menu will show different commands depending on if you are viewing a page or are in an admin dashboard (refer to the table below). The Critical CSS Status will only appear if you are viewing a page or post on your site.     Command Description     Rebuild Minified JS Rebuilds the minified JavaScript files for the entire site.\n   Purge All Critical CSS Rebuilds the optimized CSS files for the entire site and removes existing optimized CSS files. No optimized CSS will be served until replacement CSS files have been rebuilt. This option is useful for troubleshooting if you have a display issue appearing on your site, as removing the optimized CSS will use the site’s original CSS files for rendering.\n   Purge Page CSS Same as Purge All Critical CSS but only for the current page.    For a more detailed explanation of the menu options, see Critical CSS in the Admin Bar in the Trellis Help Center.\nCritical CSS Status When viewing pages on your site, a Critical CSS Status bar shows where Trellis is in the Critical CSS file generation process. One of the statuses in the table below will be displayed.\n   Status Description     Critical CSS - License Required The site is missing an active Trellis license. Go to Trellis Settings and click License to purchase or add a Trellis license.   Disabled Critical CSS generation has been disabled for the post or page. It will also be displayed if Critical CSS is disabled in Trellis Settings.   Error The page encountered an error while generating the Critical CSS files. See Troubleshooting for some steps you can take to determine the problem.   None The page has not attempted to generate Critical CSS yet. As of Trellis 0.16.0, a page in the Pending or Processing status will switch to None if it doesn’t receive a response from the Trellis Services API after two hours.   Pending (Deprecated in 0.17.0.) The page has been queued for regeneration of Critical CSS.   Processing The page is currently in the process of generating Critical CSS files. A request has been sent to the Trellis Services API, but the files haven’t been saved to the site yet.   Success The page successfully generated Critical CSS files.    Trellis Widgets Trellis adds two new widgets to WordPress: a Mediavine Sidebar Ad Hint widget and a Trellis About Widget.\n   Widget Description     Trellis About Widget A WordPress legacy widget that displays general information about the site. Publishers can add a Title, Description, Image, and whether to display it on mobile devices.   Mediavine Sidebar Ad Hint Used for sites that display Mediavine ads. The widget controls the placement of Mediavine top sidebar ads and whether they are shown on mobile devices. For more information, see How to Move Your First Sidebar Ad in the Trellis Help Center.    Trellis Settings in the WordPress Editor When editing posts or pages, publishers can configure specific Trellis features (see the table below). In the Block editor, a new menu is added to the top toolbar. In the Classic editor, a block is shown below the content. Different options are available depending on whether the content is a post or a page.\nBlock Editor (Post Settings)\nClassic Editor (Post Settings)\nAvailable Settings for Posts    Setting Description     Disable on Home/RSS Feed Hides the post from the Home page and RSS feed.   Schema Type Defines the schema type of the post for SEO purposes. Only visible when Trellis Settings \u003e Advanced \u003e Trellis SEO Output is enabled. Options include Article, NewsArticle, and BlogPosting.   Disable Critical CSS Disables Critical CSS generation for the post. Useful if the publisher is seeing conflicts or display issues with Critical CSS on an individual post.   Purge Page Critical CSS Deletes the Critical CSS files for the current post only. (As of 0.18.0) Only visible if the post’s Critical CSS files have been successfully generated.   Critical CSS Status Shows the Critical CSS status for the current post. Options include the entries listed in the Critical CSS Status section above.    Available Settings for Pages    Setting Description     Disable Critical CSS Disables Critical CSS generation for the page. Useful if the publisher is seeing conflicts or display issues with Critical CSS on an individual page.   Purge Page Critical CSS Deletes the Critical CSS files for the current page. (As of 0.18.0) Only visible if the page’s Critical CSS files have been successfully generated.   Critical CSS Status Shows the Critical CSS status for the current page. Options include the entries listed in the Critical CSS Status section above.   Hide Page Title Suppresses the page’s title when rendered.    Trellis Settings Trellis adds a Mediavine Trellis submenu to the WordPress Appearance menu. This brings up Trellis Settings, where publishers and developers can set theme options, add a license, and control overall Trellis behavior.\nMore information is available on the Trellis Settings page, which discusses each setting and how to integrate it into Trellis child themes.\nWhat’s Next?  Get to know the available options in Trellis Settings Get started creating a Trellis child theme  ","categories":"","description":"When Trellis is activated, additional controls are added to different parts of the WordPress interface.\n","excerpt":"When Trellis is activated, additional controls are added to different …","ref":"/docsytrellis/getting-started/changes-to-wordpress/","tags":"","title":"Changes to WordPress"},{"body":"mv_trellis_about_widget_image_height Filters the height attribute to be set on the About Widget \u003cimg\u003e tag.\n mv_trellis_about_widget_image_width Filters the width attribute to be set on the About Widget \u003cimg\u003e tag.\n mv_trellis_about_widget_image_size Filters the size to be used when getting the About Widget image. This can be a Trellis image size, a WordPress image size, or a custom size.\n mv_trellis_about_widget_image_sizes Filters the sizes attribute value for the About Widget thumbnail.\n mv_trellis_admin_runtime_dependencies Filters the dependencies needed for the mv-trellis/runtime script.\n mv_trellis_allowed_google_fonts Filters the allowed Google Fonts list. Array keys are the labels provided to the settings and the values are the CSS values.\n mv_trellis_allowed_non_google_fonts Filters the allowed Non-Google Fonts list. Array keys are the labels provided to the settings and the values are the CSS values.\n mv_trellis_always_scan_template_files Filters if the template part files should be scanned on each page load. When set to False, Trellis will only scan template part files upon activation, update, or when clearing the Trellis cache.\n mv_trellis_article_nav_image_orientation Filters the image orientation for post navigation images.\n mv_trellis_article_nav_image_res Filters the resolution to be used when getting the post navigation image size.\n mv_trellis_async_styles_ignore Filters the style filepaths that are ignored from loading asynchronously on the front-end.\n mv_trellis_base_gutters Filters the base gutter sizes used for layout spacing. A value (in pixels) represents the amount of space to apply between layout elements. Uses the Layout Space value in Trellis Settings. Defaults to Comfortable.\n mv_trellis_before_update_{$setting[‘slug’]} Filters a Trellis setting before updating it in the options table. This provides a way to trigger an action before the value is saved.\nFor example, when changing the featured image size, a developer might want to make sure all of the image sizes used in the srcset are generated.\n mv_trellis_childtheme_link_shortcode Filters the output of the child theme link shortcode. In Trellis Settings, if the Hide Mediavine/Trellis Footer Links setting is disabled, Trellis will display a link to the child theme in the footer.\n mv_trellis_comments_template Filters the comments template filepath. Defaults to an empty string so that the comments.php file from the theme is loaded.\n mv_trellis_copyright_shortcode Filters the copyright shortcode output.\n mv_trellis_crit_css_min_file_size Filters the minimum size (in bytes) expected for a Critical CSS file to be saved. If the generated Critical CSS for a post or page is below this threshold, Trellis will not create a Critical CSS file.\n mv_trellis_critical_css_rate_limit_in_seconds Filters the rate limit (in seconds) between requests for generating Critical CSS.\n mv_trellis_critical_css_timeout_in_seconds Filters the amount of time (in seconds) before another Critical CSS request can be made. Prevents sites with errors from continuing to make requests that will timeout.\n mv_trellis_css_allowlist Filters a list of regex values to keep in the Non-Critical CSS file. Partial selector names can be passed in the array to designate multiple selectors.\n mv_trellis_css_force_keep Filters a list of regex values to include in the Critical CSS file. Regex patterns must match CSS selectors. Partial selector names can be passed in the array to designate multiple selectors.\n mv_trellis_css_vars Filters the CSS variables to be output in a page. Returns an array of CSS variables in 'name' =\u003e 'value' format.\n mv_trellis_default_featured_image_size Filters the featured image size before it’s returned. Defaults to the value of the Featured Image Size in Trellis Settings.\n mv_trellis_disable_add_async_attribute Filters whether to return early, disabling asynchronous loading on all enqueued scripts.\n mv_trellis_disable_convert_iframe_to_lazyload_when_enabled Filters whether to return early, preventing the addition of a \"loading=lazy\" attribute to iframes.\n mv_trellis_disable_convert_image_to_lazyload_when_enabled Filters whether to return early, disabling the adding or modifying of a \"loading=lazy\" attribute to images.\n mv_trellis_disable_eagerload_first_image Filters whether to return early, disabling eager loading on the first image in post content.\n mv_trellis_disable_lazy_load_classes Filters an array of classes that are used to disable lazy loading for specific items.\n mv_trellis_disable_ld_output_for_compatibility Filters the addition of Trellis LD output for compatibility.\n mv_trellis_disable_og_output_for_compatibility Filters the addition of Trellis Open Graph output for compatibility.\n mv_trellis_disable_og_plugin_slugs (Deprecated in 0.17.0) Filters an array of plugin slugs that will disable Trellis Open Graph output if any are active.\n mv_trellis_disable_process_images Filters whether to return early, disabling the processing of all images.\n mv_trellis_disable_{$this-\u003eslug}_compatibility Filters whether to return early, disabling all compatibility code for the specified plugin slug. Compatibility code is written by Mediavine and corresponds to plugins listed in Trellis’ compatibility directory (mediavine-trellis/inc/compatibility).\n mv_trellis_disable_seo_output_for_compatibility Filters the addition of Trellis SEO output.\n mv_trellis_disable_set_image_cls_aspect_styles Filters whether to return early, disabling the addition of inline aspect ratio styles.\n mv_trellis_disable_set_image_data_pin_attribute Filters whether to return early, disabling the addition of the data-pin-media url.\n mv_trellis_disable_set_image_dimensions Filters whether to return early, disabling the setting of image dimensions.\n mv_trellis_disable_svg_preload_first_image Filters whether to return early, disabling the svg preload on the first image in post content.\n mv_trellis_enable_lazy_load Filters whether to return early, disabling Trellis lazy loading.\n mv_trellis_enqueue_child_style Filters whether the child style should be enqueued.\n mv_trellis_enable_js_optimizations Filters whether JavaScript optimizations are enabled. This is used by compatibility classes for JavaScript optimization plugins.\n mv_trellis_entry_content_classes Filters the classes added to the .entry-content \u003cdiv\u003e.\n mv_trellis_excerpt_image_res Filters the resolution to be used when getting the excerpt image size. Trellis includes the options of high, med_high, med, and low.\n mv_trellis_excerpt_image_sizes Filters the sizes attribute of the excerpt thumbnail images.\n mv_trellis_featured_post_image_res Filters the resolution to be used when getting the featured post thumbnail images. Trellis includes the options of high, med_high, med, and low.\n mv_trellis_featured_post_image_sizes Filters the featured post image sizes attribute.\n mv_trellis_filter_{$post_type}_meta_fields Filters the meta field blocks to be registered for this specific post type.\n mv_trellis_filter_localized_font_types Filters which font types/formats are allowed to be localized.\n mv_trellis_flags Filters the Trellis flags to look for in the submitted URL.\n mv_trellis_force_disable_critical_css Filters whether to stop a Critical CSS request.\n mv_trellis_footer_copy_text Filters the footer copyright text before being processed by the mv_trellis_copyright_shortcode shortcode.\n mv_trellis_get_{$post_type}_meta_fields Filters the meta fields for a specific post type.\n mv_trellis_google_font_style_{$font_type}_default Filters the font styles for all fonts.\n mv_trellis_google_font_style_{$font_type}_{$sanitized_font_name} Filters the font styles for a specified font.\n mv_trellis_grow_sidebar_compatibility_styles Filters style overrides for the Grow Social sidebar.\n mv_trellis_grow_sidebar_margin_space Filters the sidebar margin overrides for Grow Social. Helps to prevent Grow Social from covering content.\n mv_trellis_grow_sidebar_media_query_max_width Filters the media query max width style override for Grow Social.\n mv_trellis_grow_sidebar_media_query_min_width Filters the media query min width style override for Grow Social.\n mv_trellis_hierarchy Filters the hierarchy of the file search order.\n mv_trellis_image_orientation Filters the image orientation. This is the image size passed to mv_trellis_get_attachment_image_tag. Defaults to the value of the Featured Image Size in Trellis Settings.\n mv_trellis_image_sizes Filters the list of theme image sizes before they are returned.\n mv_trellis_image_sizes_attribute Filters the Trellis adjusted sizes attribute for an image.\n mv_trellis_images_stop_process (Only available if using Trellis Images) Filters whether to return early, disabling image processing.\n mv_trellis_js_plugin_name Filters the displayed plugin name responsible for disabling JavaScript optimizations.\n mv_trellis_license_required_settings Filters the array of settings dependent on a Trellis license.\n mv_trellis_link_shortcode Filters the HTML string for the link to the Trellis homepage that appears in the site footer.\n mv_trellis_local_script_model Filters the local model overrides for the Mediavine ad script wrapper.\n mv_trellis_logo_sources Filters the source tags for the site logo that are output in a picture element.\n mv_trellis_match_image_dimensions Filters whether Trellis should check if specified dimensions match the registered image size.\n mv_trellis_mediavine_link_shortcode Filters the HTML string for the link to the Mediavine homepage in the site footer.\n mv_trellis_memory_exceeded Filters the result of Trellis' memory limit being reached.\n mv_trellis_memory_limit_percent Filters the percentage of available WordPress memory as a decimal. Trellis uses this amount to determine if there is enough memory available for its batch processes.\n mv_trellis_model_sidebar_breakpoint Filters the value added to the model for the sidebar breakpoint. This is used by the Mediavine ad script wrapper so that ads are not served when the sidebar is pushed below the content.\n mv_trellis_nonasync_js_handles Filters the script handles that Trellis should not load asynchronously. Should match handles passed to wp_register_script.\n mv_trellis_nonasync_js_urls Filters the list of script source URLs that Trellis should not load asynchronously.\n mv_trellis_nonasync_js_prefixes Filters the list of handle prefixes where Trellis should not load scripts asynchronously. Prefixes should be at the start of the handles passed to wp_register_script.\n mv_trellis_pages_pagination_args Arguments to be passed to the_posts_pagination. Available arguments are described on the WordPress paginate_links function page.\n mv_trellis_post_link_featured_image_sizes Filters the post link featured image sizes attribute.\n mv_trellis_process_content Filters the DOMDocument for making changes before it’s output to the browser.\n mv_trellis_resolution_sizes Filters the resolution sizes to associate with image sizes.\n mv_trellis_settings Filters the theme settings. Used to add or modify theme settings whenever the settings are being built or rebuilt.\n mv_trellis_settings_groups Filters the Trellis Settings tabs or groups.\n mv_trellis_settings_update Filters the theme settings to be updated.\n mv_trellis_sidebar_content Filters the sidebar HTML output. Used internally to apply lazy loading attributes to images.\n mv_trellis_site_title_logo_alt_text Filters the site logo image alt text.\n mv_trellis_site_title_logo_classes Filters the logo \u003cimg\u003e tag classes.\n mv_trellis_site_title_shortcode Filters the site title shortcode output displayed in the site footer.\n mv_trellis_site_title_text_classes Filters the site title tag classes.\n mv_trellis_skip_eagerload_classes Filters a list of image classes that will not be eager loaded.\n mv_trellis_sw_ignore Filters the paths to be ignored by the service worker.\n mv_trellis_the_title Filters the page title.\n mv_trellis_top_breadcrumbs_placement Filters the action hook called for the breadcrumb output near the top of pages.\n mv_trellis_web_stories_compatibility_styles Filters the Web Stories compatibility style overrides.\n mv_trellis_wordpress_link_shortcode Filters the HTML string for the link to WordPress in the site footer.\n mvt_processing_css_status_timeout Filters the expiration timestamp for when a Critical CSS request process should timeout.\n mvt_requires_default_wp_fields Filters whether default WordPress Core comment fields should be used in the comments_form call in comments.php. If Trellis Comments are enabled, WordPress comment fields are not used.\n","categories":"","description":"An alphabetically-sorted list of available filters in Trellis, showing only the filter name and description. Click on a filter name for detailed information.\n","excerpt":"An alphabetically-sorted list of available filters in Trellis, showing …","ref":"/docsytrellis/reference/filters/filters-summary/","tags":["filters"],"title":"Filters Summary"},{"body":"You’ll find the function’s name, description, and other pertinent information in the list below.\nNote To view the complete function, look for it within Trellis Core’s functions.php file, located in mediavine-trellis/inc/functions.php.   mv_trellis_entry_author Outputs the entry’s author.\nParameters\n None  Return\n string The author name.   mv_trellis_entry_content_class Outputs a class attribute for the entry-content container. Includes classes specified by the mv_trellis_entry_content_classes filter.\nParameters\n $class string|array A string or array of additional classes to be added to the entry-content class attribute.  Return\n string Complete list of classes to be added to the entry-content class attribute.   mv_trellis_entry_date Outputs the entry publish date or updated date (if the entry has been updated).\nParameters\n None  Return\n string Publish date or updated date of the entry.   mv_trellis_entry_tags Outputs a list of tags, if they exist, with optional content before or after the list.\nParameters\n $before string The content to display before the tags. Defaults to empty. $sep string The separator to use between the returned tags. Defaults to comma. $after string The content to display after the tags. Defaults to empty.  Return\n string A list of tags with appended and prepended content, using specified separators.   mv_trellis_entry_taxonomies Returns a list of taxonomies, if they exist.\nParameters\n $sep string The separator to use for the taxonomies. Defaults to comma.  Return\n string A list of taxonomies with the separator between them.   mv_trellis_get_asset_url Returns the absolute path of an asset.\nParameters\n $asset_path string An optional relative path to the asset. Defaults to empty.  Return\n string The absolute path to the asset.   mv_trellis_get_attachment_image_tag Returns the best resolution image in an \u003cimg\u003e tag with srcset data.\nParameters\n $img_id int|string Image attachment ID. $img_size string Image size. Defaults to large. $attributes array A key/value array of attributes to be added (such as class). Defaults to none. $highest_res string The max resolution to allow. Defaults to null. $lazy_load bool Whether to add lazy load markup to the image. Defaults to True.  Return\n string|null The HTML \u003cimg\u003e tag or null if no image is available.   mv_trellis_get_child_theme Gets the name of the child theme.\nNote Use this function when checking for the existence of Trellis.  Return\n string|null Name of the child theme or null if the name is not found.   mv_trellis_get_data Gets data that has been previously set using the mv_trellis_set_data function. This is used for passing data across template parts.\nDefault\n Null, which returns all set data.  Parameters\n $data_key string|null Key of the data to retrieve. If no key is set, all data is retrieved.  Return\n mixed Data from a specified key or all data in an array.   mv_trellis_get_featured_image_tag Gets the HTML tag of the featured image.\nParameters\n $post_id int Optional post ID. $attr array Attributes array. Defaults to empty. $echo bool Whether to echo the tag or return. Optional, but defaults to True.  Return\n string|null HTML of the featured image or null if $echo is false.   mv_trellis_get_featured_post Gets the ID of the featured/sticky post displayed on the home page.\nParameters\n None  Return\n int The ID of the featured post.   mv_trellis_get_template_part Loads the found template part.\nParameters\n $slug string Template file (including path) to search for. $name string|array The mv_trellis_template_type will search through the Trellis template hierarchy for the matching template name. Including an array will limit the files to search from what is specified in the array.  Return\n string The HTML of the matching template part.   mv_trellis_get_term_description Gets the specified term description. Checks for Genesis data if no description is found.\nParameters\n $term_id int ID of the term. Looks for the current term if an ID is not provided.  Return\n string HTML of the term description.   mv_trellis_get_wp_kses_post_with_images Adds image and style related tags (including attributes) to the default list for posts. Used to sanitize Trellis DOM manipulations and image handling.\nParameters\n None  Return\n array A list of image and style tags.   mv_trellis_has_flag Returns whether any specified flags are found in the URL.\nParameters\n $flag string The flag.  Return\n bool Whether the specified flag exists in the URL.   mv_trellis_is_core Returns whether Trellis Core is the active theme.\nNote Using the WP Core function is_child_theme() is more reliable and is available earlier.  Return\n bool True if Trellis Core is the active theme, False if a Trellis child theme is active.   mv_trellis_is_meta_item_enabled Checks to see if a meta option (like category count or author) is selected in a Post Meta location.\nParameters\n $item_slug string Slug of the meta item. $meta_location string Location of where the meta item is set to output. Trelis Core defaults to using post_meta_top or post_meta_bottom as the possible locations.  Return\n bool Whether the post meta item is set for the specified location.   mv_trellis_is_plugin_active Checks to see if a plugin is active based on a specified slug.\nParameters\n $plugin_slug string|array Slug of the plugin or an array of slugs to check.  Return\n bool True if the plugin is active, false if the plugin is not found.   mv_trellis_nav_menu Outputs the nav menu with toggle button support.\nParameters\n $args array Arguments to be used in the core wp_nav_menu function. $toggle_btn bool Displays the toggle button. Defaults to False. $toggle_text string Text string to be used in the toggle button. Defaults to “Menu.” $toggle_template_part string Template part to be used for the toggle button. This overrides $toggle_text. Defaults to null.  Return\n string The HTML containing the navigation menu.   mv_trellis_output_sidebar Outputs the sidebars. Content is first run through the mv_trellis_sidebar_content filter.\nParameters\n $sidebar_id string The sidebar id to process.  Return\n string HTML content of the specified sidebar.   mv_trellis_purge_all_critical_css Deletes all site Critical CSS and removes any pending rebuild requests.\nParameters\n None  Return\n Not applicable.   mv_trellis_purge_page_critical_css Deletes Critical CSS files for a specific post or page.\nParameters\n $id int|string Post or page id. Used to get the post or page slug when the slug is not provided. $slug string Post or page slug.  Return\n Not applicable.   mv_trellis_remove_data Removes data from an array that was set using the mv_trellis_set_data function. Data in the array is available across template parts.\nParameters\n $data_key string The key of the data to remove.  Return\n Not applicable.   mv_trellis_set_data Sets data that can be used across template parts.\nParameters\n $data_key string Key of the data. $data_value mixed Value of the data.  Return\n Not applicable. Sets data for retrieval using mv_trellis_get_data.   mv_trellis_site_title Outputs the HTML of the site title and logo.\nParameters\n $link bool Whether to display the site title and logo wrapped in an anchor tag. Defaults to True.  Return\n string HTML of the site title and logo.   mv_trellis_the_attachment_image_tag Echoes the best resolution image in an \u003cimg\u003e tag with srcset data.\nParameters\n $img_id int|string The image attachment ID. $img_size string The image size. $attributes array A Key/value array of attributes added (such as class). $highest_res string The max resolution allowed. $lazy_load bool Whether lazy loaded markup is added to the image.  Return\n string|null The HTML \u003cimg\u003e tag or null if no image is available.   mv_trellis_the_posts_pagination Displays archive/feed pagination controls using arguments passed by the mv_trellis_pages_pagination_args filter.\nParameters\n Customize arguments in your functions.php file by using the mv_trellis_pages_pagination_args filter. See Filters for more information.  Return\n string HTML output of the pagination links.   mv_trellis_the_term_description Echos the term description with optional content before and after. Checks for Genesis data if no description is found.\nParameters\n $before string Content to prepend to the term description. Defaults to empty. $after string Content to append to the term description. Defaults to empty.  Return\n string The term description, complete with any specified before or after content.   mv_trellis_the_title Outputs a title (page, author, category, etc.) with optional content before or after.\nParameters\n $before string Content or markup to be output before the title. Defaults to empty. $after string Content or markup to be output after the title. Defaults to empty. $echo bool Whether the title content will be echoed. Defaults to True.  Return\n string The title, complete with optional content before or after.   mv_trellis_yoast_breadcrumbs Outputs Yoast Breadcrumbs markup if Yoast SEO is available.\nParameters\n None  Return\n string HTML markup of Yoast breadcrumb data.   mvt_adjust_excerpt_image_orientation_res Returns the specified resolution size for excerpt featured images.\nParameters\n $orientation string The selected orientation for the image.  Return\n string The resolution size.   mvt_adjust_excerpt_image_sizes Adjusts the sizes attribute value for excerpt thumbnail images.\nDefault\n (max-width: 599px) 300px, 270px  Parameters\n $sizes string The value of the image sizes attribute.  Return\n string The adjusted sizes attribute value.   mvt_adjust_featured_post_image_orientation_res Returns the specificed resolution size of the excerpt featured image for the featured post.\nParameters\n $orientation string The selected orientation for the image.  Return\n string The resolution size.   mvt_adjust_featured_post_image_sizes Adjusts the sizes attribute value for the featured post thumbnail images.\nDefault\n (max-width: 340px) calc(100vw - 40px), (max-width: 450px) calc(100vw - 100px), (max-width: 959px) 350px, (max-width: 1134px) 275px, 350px  Parameters\n $sizes string The value of the image sizes attribute.  Return\n string The adjusted sizes attribute value.   mvt_get_image_orientation_res Appends a filtered resolution size to the image orientation. Ensures the specific resolution size of the image is used.\nParameters\n $orientation string The selected orientation for the image. Defaults to empty. $image_res string The selected resolution for the image.  Return\n string The orientation with an appended resolution size.   mvt_title_after Fires off the tha_title_after hook after the closing title \u003c/h1\u003e tag (as long as the page title output isn’t hidden).\nParameters\n None.  Return\n Not applicable.   mvt_title_before Fires off the tha_title_before hook before the title \u003ch1\u003e tag (as long as the page title output isn’t hidden).\nParameters\n None.  Return\n Not applicable.  ","categories":"","description":"Trellis provides public functions for child theme developers. You can use them to modify data or functionality in a child theme.\n","excerpt":"Trellis provides public functions for child theme developers. You can …","ref":"/docsytrellis/reference/functions/","tags":"","title":"Functions"},{"body":"Follow the instructions on these pages to install Trellis and learn what changes it makes to the WordPress interface. You’ll also find detailed descriptions of Trellis settings and how they interact with your child theme.\nWhat’s in This Section? ","categories":"","description":"","excerpt":"Follow the instructions on these pages to install Trellis and learn …","ref":"/docsytrellis/getting-started/","tags":"","title":"Getting Started"},{"body":"When using Trellis, several image-specific features are available to make your pages load faster and improve your site’s Google Core Web Vitals score. These include:\n Image delivery enhancements. For the first image in the content (or the featured image), Trellis checks if it is eager loaded (via a specified class or attribute). If not, it will add code. It also initally renders the first image as a gray SVG image, swapping it out for the actual image when it comes into view. For all other images, Trellis makes sure that a loading=\"lazy\" attribute exists to take advantage of modern web browsers' support for lazy loading. Developers can alter eager and lazy loading behavior per image or across the entire site (see more below). Image thumbnail size optimizations. Trellis instructs WordPress to create additional image sizes for uploaded images based on the Featured Image size setting. Existing images can be retroactively processed via a Regenerate Featured Images button or Regenerate All Images button in Trellis Settings. (Optional) Image formatting optimizations. If the optional Trellis Images plugin is installed, Trellis will generate WebP versions of legacy image formats when visitors go to a page and then swap them for the WebP version.  Eager Loading and First Image Delivery Trellis checks for an eager-load class or a loading=\"eager\" attribute on the first image in content (or the featured image). If it doesn’t find either, it will automatically add the loading=\"eager\" attribute.\nAdditionally, Trellis increases LCP scores by initially rendering the first image as a gray SVG with the same dimensions. When the page finishes loading, Trellis uses JavaScript to replace the SVG with the correct image just before it comes into view.\nDisabling First Image Eager Loading Across the Site (As of 0.18.0) If you want to disable Trellis' automatic eager loading functions, you can add the following filter to your child theme’s functions.php file:\n/** * Disable Trellis eager loading */ add_filter( 'mv_trellis_disable_eagerload_first_image', '__return_true' ); Disabling First Image Eager Loading Per Image (As of 0.15.3) If you want to prevent Trellis from adding a loading=\"eager\" attribute to specific images, you can add a class to the \u003cimg\u003e tag.\n   Class Description     eager-load This class stops Trellis from adding the loading=\"eager\" attribute.    Disabling First Image SVG Replacement (As of 0.18.0) If you want to disable Trellis' SVG replacement feature, you can add the following filter to your child theme’s functions.php file:\n/** * Disable Trellis first image SVG replacement */ add_filter( 'mv_trellis_disable_svg_preload_first_image', '__return_true' ); Lazy Loading Delivery Lazy loading is the practice of delaying the load or initialization of objects until they’re needed by the browser. For all images other than the first image (or featured image), Trellis ensures that a loading=\"lazy\" attribute is present for images and iframes. This allows modern browsers to use their native lazy loading features.\nNote Lazy loading is also automatically applied to iframe content. The instructions for disabling lazy loading per image also applies to iframes.  Disabling Lazy Loading Across the Site If you plan on using a different lazy loading solution (or just want to disable Trellis’ lazy loading functionality site-wide), you can add the following filter to your child theme’s functions.php file:\n/** * Disable Trellis lazy loading */ add_filter( 'mv_trellis_enable_lazy_load', '__return_false' ); Disabling Lazy Loading Per Element If you want to disable Trellis' lazy loading features on a specific element, you can apply a class to an \u003cimg\u003e or \u003ciframe\u003e tag or block.\n   Class Description     no-lazyload This class stops Trellis from checking for the loading=\"lazy\" attribute. The content will be served as-is.    Image Size Optimization WordPress has a predefined set of image sizes it creates when a new image is uploaded. When active, Trellis modifies this set to add more sizes that are frequently used in publisher sites. This helps prevent the “Properly Size Images\" Warning in Google Pagespeed Insights.\nPublishers can choose a desired featured image thumbnail size and ratio in the Display tab of Trellis Settings. Depending on the size selected, additional sizes (as listed in the Image Sizes chart) will be created by WordPress whenever an image is uploaded or on post save when the featured image size is changed.\nThe Regenerate Featured Images button will add all featured images to a queue and have their necessary Trellis sizes created by WordPress. See Trellis Featured Images in the Help Center for more information.\nIf a publisher wants to regenerate Trellis sizes on all of the images on their site (Featured Images included), they can go to the Advanced tab of Trellis Settings and use the Regenerate All Images button. Depending on the size selected in the Featured Image Size, additional sizes (as listed in the Image Sizes chart) will be created by WordPress. See How to Regenerate Your Image Sizes in Trellis in the Help Center for more information.\nImage Sizes Chart By default, Trellis will generate all image sizes for the selected Featured Image Size and a high res size for all other sizes not selected. Image sizes are grouped by setting.\nNote Trellis never alters original images. The additional images it creates will, however, be cropped accordingly and take up space in the site’s upload directory.  Trellis: Square (1x1)    Image Size Slug Dimensions Cropping     mv_trellis_1x1 (also mv_trellis_1x1_high_res) 728x728 Cropped to fit.   mv_trellis_1x1_med_high_res 480x480 Cropped to fit.   mv_trellis_1x1_med_res 320x320 Cropped to fit.   mv_trellis_1x1_low_res 200x200 Cropped to fit.   mv_trellis_3x4 546x728 Cropped to fit.   mv_trellis_4x3 728x546 Cropped to fit.   mv_trellis_16x9 728x410 Cropped to fit.   mv_trellis_srcset_960 960x960 Proportionally resized to fit inside dimensions.   mv_trellis_srcset_1080 1080x1080 Proportionally resized to fit inside dimensions.    Trellis: 3x4    Image Size Slug Dimensions Cropping     mv_trellis_3x4 (also mv_trellis_3x4_high_res) 546x728 Cropped to fit.   mv_trellis_3x4_med_res 360x480 Cropped to fit.   mv_trellis_3x4_low_res 240x320 Cropped to fit.   mv_trellis_1x1 728x728 Cropped to fit.   mv_trellis_4x3 728x546 Cropped to fit.   mv_trellis_16x9 728x410 Cropped to fit.   mv_trellis_srcset_960 960x960 Proportionally resized to fit inside dimensions.   mv_trellis_srcset_1080 1080x1080 Proportionally resized to fit inside dimensions.    Trellis: 4x3 (Trellis Default)    Image Size Slug Dimensions Cropping     mv_trellis_4x3 (also mv_trellis_4x3_high_res) 728x546 Cropped to fit.   mv_trellis_4x3_med_res 480x360 Cropped to fit.   mv_trellis_4x3_low_res 320x240 Cropped to fit.   mv_trellis_1x1 728x728 Cropped to fit.   mv_trellis_3x4 546x728 Cropped to fit.   mv_trellis_16x9 728x410 Cropped to fit.   mv_trellis_srcset_960 960x960 Proportionally resized to fit inside dimensions.   mv_trellis_srcset_1080 1080x1080 Proportionally resized to fit inside dimensions.    Trellis: 16x9    Image Size Slug Dimensions Cropping     mv_trellis_16x9 (also mv_trellis_16x9_high_res) 728x410 Cropped to fit.   mv_trellis_16x9_med_res 480x270 Cropped to fit.   mv_trellis_16x9_low_res 320x180 Cropped to fit.   mv_trellis_1x1 728x728 Cropped to fit.   mv_trellis_3x4 546x728 Cropped to fit.   mv_trellis_4x3 728x546 Cropped to fit.   mv_trellis_srcset_960 960x960 Proportionally resized to fit inside dimensions.   mv_trellis_srcset_1080 1080x1080 Proportionally resized to fit inside dimensions.    WP Core Sizes While most WP Core sizes are unaffected, Trellis does make changes to the 1200 x 1200 and post-thumbnail sizes.\n   Image Size Slug Dimensions Cropping Modifications     thumbnail 150x150 Cropped to fit None. This size is provided by WP Core.   medium 300x300 Proportionally resized to fit inside dimensions None. This size is provided by WP Core.   medium_large 768x768 Proportionally resized to fit inside dimensions None. This size is provided by WP Core.   large 1024x1024 Proportionally resized to fit inside dimensions None. This size is provided by WP Core.   1200x1200 1200x1200 Proportionally resized to fit inside dimensions Trellis replaces the WP Core 1536x1536 size with this one.   2048x2048 2048x2048 Proportionally resized to fit inside dimensions None. This size is provided by WP Core.   post-thumbnail Depends Uses the default image size of the selected Trellis Featured Image size. Since it uses Trellis’ size, no additional post-thumbnail file is generated. Provided by WP Core, but the dimensions are controlled by Trellis.    Useful Filters and Functions The following image filters and functions can be used in Trellis child theme code. For additional filters and functions, see the Reference section.\nFilters  mv_trellis_article_nav_image_orientation mv_trellis_article_nav_image_res mv_trellis_default_featured_image_size mv_trellis_disable_convert_image_to_lazyload_when_enabled mv_trellis_disable_eagerload_first_image mv_trellis_disable_lazy_load_classes mv_trellis_disable_process_images mv_trellis_disable_set_image_cls_aspect_styles mv_trellis_disable_set_image_dimensions mv_trellis_disable_svg_preload_first_image mv_trellis_enable_lazy_load mv_trellis_excerpt_image_res mv_trellis_excerpt_image_sizes mv_trellis_featured_post_image_res mv_trellis_featured_post_image_sizes mv_trellis_image_orientation mv_trellis_image_sizes mv_trellis_image_sizes_attribute mv_trellis_match_image_dimensions mv_trellis_post_link_featured_image_sizes mv_trellis_resolution_sizes  Functions  mv_trellis_get_attachment_image_tag mv_trellis_the_attachment_image_tag mvt_adjust_excerpt_image_orientation_res mvt_adjust_featured_post_image_orientation_res mvt_adjust_excerpt_image_sizes mvt_adjust_featured_post_image_sizes mvt_get_image_orientation_res mv_trellis_get_featured_image_tag  ","categories":"","description":"Trellis automatically applies first image eager loading, thumbnail optimizations, and other optional image formatting features. \n","excerpt":"Trellis automatically applies first image eager loading, thumbnail …","ref":"/docsytrellis/advanced-topics/image-delivery/","tags":["image sizes","lazy loading","WebP"],"title":"Image Delivery and Optimizations"},{"body":"Trellis and its helper plugins can replace image generators, HTML/CSS/JavaScript optimizers, and other WordPress plugins (or it can work beside some of your favorite ones). You can refer to our Conflicts and Compatibilities article for detailed information. Here’s a summary of Trellis’ main features:\nFor Publishers  Better Core Web Vitals metrics: Trellis automates key components to raise a site’s Core Web Vitals scores. First Input Delay (FID), Cumulative Layout Shift (CLS), and Largest Contentful Paint (LCP) measurements all improve when using Trellis. Better Core Web Vitals metrics boost a site’s ranking with Google. Image size optimization: Trellis tells WordPress to generate additional image sizes that are more commonly used. Properly sized images load faster, look better, and reduce warnings in Google Page Insights. Built-in Mediavine ad integration: Functions in Trellis automate the placement and sizing of Mediavine ads. A Mediavine Sidebar Ad widget lets publishers utilize the upper sidebar ad unit, and Trellis also provides a default HTML structure for optimal desktop and sidebar ad display. Progressive Web App (PWA) support: Trellis includes the ability to create a PWA for readers. Sites can be installed like an app on a mobile or desktop device without a publisher paying for native app development.  For Developers  Optimized CSS: Trellis’ Critical CSS feature creates two separate, optimized CSS files: one for initial viewport content, and another for the rest. When a reader visits a page, Trellis serves the initial viewport stylesheet as inline styles—the other is loaded after as a linked stylesheet. Learn more about Critical CSS in our Advanced Topics section or in our Working with Critical CSS Help Center article. Service worker integration: Trellis uses service workers to cache assets in the browser, reducing the need for network round trips. Better SEO with JSON-LD: Trellis generates structured data for search engines in the JSON-LD format (preferred by Google). This improves page indexing and supports displaying rich snippets in search results. JavaScript enhancements: Trellis minifies JavaScript files and defers loading asynchronously. This prevents render blocking and serves up pages faster. Template caching: Trellis caches paths to template files, providing an immediate performance boost. No need for WordPress to do repeated template lookups. REST API-based comments: When using Trellis Comments, only the first five comments will initially render. Additional comments appear when the user scrolls to the comments section. Font localization: Trellis localizes specific Google Fonts. This speeds up font loading in the browser and keeps site visitor data from being sent to the Google Fonts API. Eager and lazy loaded image delivery: Trellis automatically eager loads the first image in content (or the featured image). All other images and iframes are lazy loaded to futher improve performance.  What’s Next?  See what Add-Ons come with Trellis Get started creating a Trellis child theme Implement Trellis’ advanced features in your own code in the Advanced Topics section  ","categories":"","description":"Improve Core Web Vitals metrics, offer Progressive Web Apps (PWAs), and more when you use Trellis as your theme framework.\n","excerpt":"Improve Core Web Vitals metrics, offer Progressive Web Apps (PWAs), …","ref":"/docsytrellis/overview/trellis-benefits/","tags":"","title":"Trellis Benefits"},{"body":"Trellis Images Automatically create WebP versions of your existing legacy images and swap them out on-the-fly. When a user visits a post that includes a legacy image, Trellis Images passes it on to Mediavine’s image processing service (included free in your Trellis subscription). When done, a WebP version of the image is sent back to your site and stored in the uploads directory (the original image is never altered or removed).\nThe next time a visitor lands on the page, they’ll be served the WebP version instead. WebP lossless images are smaller than equivalent PNGs and JPEGs, and are preferred by Google. See the WebP site for more information.\nNote Trellis Images is an optional plugin included with your purchase. If you already create WebP images as part of your workflow (or prefer a different plugin), you don’t need to install Trellis Images.  What’s Next?  Get started creating a Trellis child theme Implement Trellis’ features in your own code in the Advanced Topics section  ","categories":"","description":"When you purchase Trellis, you’ll also get add-ons that can replace existing plugins on your site or help optimize performance.\n","excerpt":"When you purchase Trellis, you’ll also get add-ons that can replace …","ref":"/docsytrellis/overview/add-ons/","tags":"","title":"Add-Ons"},{"body":"Learn more about Trellis' features in these deep-dive documents. You’ll read about how a feature works and see a list of related filters and hooks, where applicable.\nWhat’s in This Section? ","categories":"","description":"","excerpt":"Learn more about Trellis' features in these deep-dive documents. …","ref":"/docsytrellis/advanced-topics/","tags":"","title":"Advanced Topics"},{"body":"Changelog 1.0.0 (02/14/2022)  FEATURE: Adds theme support for “Hide page title” setting to Birch FIX: Tighten #content selector to prevent grid conflicts FIX: Solves desktop sidescroll caused by sub-menu of final menu-item FIX: Applies secondary color to hover for footer links. FIX: Removes styles that cause sub menu text to wrap FIX: Add break-word to body FIX: Adding hover color FIX: blurry about me image FIX: Resolve css validation errors FIX: For better mobile results, make .search-field width a calculation FIX: Prevents sidebar from dropping below content on woocommerce pages FIX: Adds mvt_title_before() to static front page template before page title output FIX: Adds mvt_title_after() to static front page template after page title output FIX: Removes redundant layout setting notice FIX: Fixes missing hover color from excerpt links when critical CSS is generated FIX: Sets max-width for post tags COSMETIC: Spacing between before/after content containers and the content COSMETIC: Revert .wp-block-button_link to style before update COSMETIC: Remove padding-right: 0 from hero excerpt COSMETIC: Remove CSS rule causing sidebar Grow padding on first button COSMETIC: About Me Widget’s Image is now 300px for max-width COSMETIC: Adds padding between logo and open mobile menu CHANGE: Updates Theme URI to the Mediavine Marketplace CHANGE: Changed the Theme URI to point to the Mediavine Marketplace CHANGE: Update child settings UI  0.6.3 (08/26/2021)  FIX: Static Homepage with no title’s sidebar is now in the correct place.  0.6.2 (08/23/2021)  FIX: Removed Next and Previous text from article navigation. In some cases it was being added to the SERP title.  0.6.1 (08/23/2021)  FIX: Design back to how it was in 0.5.0 FIX: Sticky sidebar ad FIX: Visual content shift at 1130px wide  0.6.0 (08/23/2021)  FEATURE: Transitional code added for backwards compatibility until Trellis 0.14.x is released FEATURE: Sidebar breakpoint is now added to the local model for use by the web wrapper FEATURE: Implement Trellis Heading Settings from Trellis Core FEATURE: New Post Meta Settings that allow for choice of meta placement on posts FIX: Hide widgets when toggled for mobile/tablet FIX: Critical CSS Status Bar now gives a status FIX: Updates the sizes attribute for images to be more specific for Trellis based themes FIX: Grow Social Sidebar is now accounted for in styling FIX: Updated HTML output to be more semantic COSMETIC: Update Web Stories archive page style COSMETIC: Many style updates for the semantic HTML changes COSMETIC: Removed “Cozy” option from Layout Size Trellis Setting COSMETIC: Changed desktop menu submenu pop out direction for last two menu items COSMETIC: Removed lines from mobile menu  0.5.0 (03/08/2021)  FEATURE: Use new background accent color COSMETIC: Meta area was tightened on mobile/tablet COSMETIC: Move navigation toggle into header area on tablet/mobile  0.4.0 (01/18/2021)  FEATURE: Add round style variation FEATURE: Add header width settings so user can control menu width FIX: Round variation dual body selector syntax FIX: Round variation and header width setting added to pro license requirement FIX: New .full image class added to 16x9 styles FIX: Generic fallback style for when a new image class is added FIX: Remove .max-width setting that effect full-width pages FIX: Fix left paddings on .widget_nav_menu FIX: Adjust $gutter variable settings COSMETIC: Add form styles COSMETIC: Move search field to top of mobile menu  0.3.1 (11/16/2020)  FIX: Tiny phone gutters reduced to 10px to accommodate ads in 320px display  0.3.0 (11/16/2020)  FIX: Remove two erroneous font-family settings FIX: Adjust ‘About Author’ widget styling to match designer mockup FIX: Tighten up pagination text FIX: Style the #footer_branding area below the footer-copy. FIX: Style button hover state and input field base setting set. FIX: Removed 100vw setting and replaced with targeted max-widths for non full width content. FIX: Search field put inside mobile menu FIX: Change the way the Trellis breadcrumb is hidden when Yoast breadcrumb is present. FIX: Remove two erroneous font-family settings COSMETIC: Change article navigation image to 16x9. COSMETIC: Tighten article link selector so it only applies to paragraph links  0.2.1 (11/03/2020)  FIX: Post titles cut off on iPhones FIX: CSS conflict with next version of Grow FIX: Missing bulleted list styles  0.2.0 (11/02/2020)  COSMETIC: many style updates  0.1.0 (10/27/2020)  Initial release  ","categories":"","description":"A list of changes made to the Birch child theme.\n","excerpt":"A list of changes made to the Birch child theme.\n","ref":"/docsytrellis/changelogs/birch/","tags":"","title":"Birch"},{"body":"Trellis provides a number of filters that can be used to modify data or functionality. You’ll find the filter’s name, description, syntax, default value, and any arguments it accepts in the list below.\nNote The syntax is shown using the apply_filters() function. Developers should use add_filter() to add code to filter values.   mv_trellis_about_widget_image_height Filters the height attribute to be set on the About Widget \u003cimg\u003e tag.\napply_filters('mv_trellis_about_widget_image_height', int $height) Default\n 100  Arguments\n $height int The height of the About Widget image in pixels.   mv_trellis_about_widget_image_width Filters the width attribute to be set on the About Widget \u003cimg\u003e tag.\napply_filters( 'mv_trellis_about_widget_image_width', int $width) Default\n 100  Arguments\n $width int The width of the About Widget image in pixels.   mv_trellis_about_widget_image_size Filters the size to be used when getting the About Widget image. This can be a Trellis image size, a WordPress image size, or a custom size.\napply_filters('mv_trellis_about_widget_image_size', string $img_size) Default\n mv_trellis_1x1_low_res  Arguments\n $img_size string The registered image size.   mv_trellis_about_widget_image_sizes Filters the sizes attribute value for the About Widget thumbnail.\napply_filters('mv_trellis_about_widget_image_sizes', string $sizes) Default\n 100px  Arguments\n $sizes string The value of the About Widget thumbnail sizes attribute.   mv_trellis_admin_runtime_dependencies Filters the dependencies needed for the mv-trellis/runtime script.\napply_filters('mv_trellis_admin_runtime_dependencies', array $list) Default\n Empty array  Arguments\n $list array A list of registered dependencies.   mv_trellis_allowed_google_fonts Filters the allowed Google Fonts list. Array keys are the labels provided to the settings and the values are the CSS values.\napply_filters('mv_trellis_allowed_google_fonts', array $list) Default\n'Abril Fatface' =\u003e '\"Abril Fatface\",serif', 'Amatic SC' =\u003e '\"Amatic SC\",cursive,serif', 'Crimson Text' =\u003e '\"Crimson Text\",serif', 'Great Vibes' =\u003e '\"Great Vibes\",cursive,serif', 'Inconsolata' =\u003e 'Inconsolata,monospace', 'Libre Baskerville' =\u003e '\"Libre Baskerville\",serif', 'Lato' =\u003e 'Lato,sans-serif', 'Lora' =\u003e 'Lora,serif', 'Merriweather' =\u003e 'Merriweather,serif', 'Mr De Haviland' =\u003e '\"Mr De Haviland\",cursive,serif', 'Noto Serif' =\u003e '\"Noto Serif\",serif', 'Open Sans' =\u003e '\"Open Sans\",sans-serif', 'Poppins' =\u003e 'Poppins,sans-serif', 'Playball' =\u003e '\"Playball\",fantasy,serif', 'Playfair Display' =\u003e '\"Playfair Display\",serif', 'Raleway' =\u003e 'Raleway,sans-serif', 'Roboto Slab' =\u003e '\"Roboto Slab\",serif', 'Tangerine' =\u003e 'Tangerine,cursive,serif', 'Work Sans' =\u003e '\"Work Sans\",sans-serif', Arguments\n $list array Key/value list of allowed Google Fonts.   mv_trellis_allowed_non_google_fonts Filters the allowed Non-Google Fonts list. Array keys are the labels provided to the settings and the values are the CSS values.\napply_filters('mv_trellis_allowed_non_google_fonts', array $list) Default\n'Arial (Web Safe)' =\u003e 'Arial,\"Helvetica Neue\",Helvetica,sans-serif', 'Baskerville (Web Safe)' =\u003e 'Baskerville,\"Baskerville Old Face\",\"Hoefler Text\",Garamond,\"Times New Roman\",serif', 'Book Antiqua (Web Safe)' =\u003e '\"Book Antiqua\",Palatino,\"Palatino Linotype\",\"Palatino LT STD\",Georgia,serif', 'Calibri (Web Safe)' =\u003e 'Calibri,Candara,Segoe,\"Segoe UI\",Optima,Arial,sans-serif', 'Cambria (Web Safe)' =\u003e 'Cambria,Georgia,serif', 'Century Gothic (Web Safe)' =\u003e '\"Century Gothic\",CenturyGothic,AppleGothic,sans-serif', 'Constantia (Web Safe)' =\u003e 'Constantia,\"Lucida Bright\",Lucidabright,\"Lucida Serif\",Lucida,\"DejaVu Serif\",\"Bitstream Vera Serif\",\"Liberation Serif\",Georgia,serif', 'Courier New (Web Safe)' =\u003e '\"Courier New\",Courier,\"Lucida Sans Typewriter\",\"Lucida Typewriter\",monospace', 'Franklin Gothic (Web Safe)' =\u003e '\"Franklin Gothic Medium\",\"Franklin Gothic\",\"ITC Franklin Gothic\",Arial,sans-serif', 'Futura (Web Safe)' =\u003e 'Futura,\"Trebuchet MS\",Arial,sans-serif', 'Garamond (Web Safe)' =\u003e 'Garamond,Baskerville,\"Baskerville Old Face\",\"Hoefler Text\",\"Times New Roman\",serif', 'Georgia (Web Safe)' =\u003e 'Georgia,Times,\"Times New Roman\",serif', 'Gill Sans (Web Safe)' =\u003e '\"Gill Sans\",\"Gill Sans MT\",Calibri,sans-serif', 'Lucida Bright (Web Safe)' =\u003e '\"Lucida Bright\",Georgia,serif', 'Palatino (Web Safe)' =\u003e 'Palatino,\"Palatino Linotype\",\"Palatino LT STD\",\"Book Antiqua\",Georgia,serif', 'System Default (Web Safe)' =\u003e 'system,-apple-system,\".SFNSText-Regular\",\"San Francisco\",\"Roboto\",\"Segoe UI\",\"Helvetica Neue\",\"Lucida Grande\",sans-serif', 'Tahoma (Web Safe)' =\u003e 'Tahoma,Verdana,Segoe,sans-serif', 'Times New Roman (Web Safe)' =\u003e 'TimesNewRoman,\"Times New Roman\",Times,Baskerville,Georgia,serif', 'Trebuchet (Web Safe)' =\u003e '\"Trebuchet MS\",\"Lucida Grande\",\"Lucida Sans Unicode\",\"Lucida Sans\",Tahoma,sans-serif', 'Verdana (Web Safe)' =\u003e 'Verdana,Geneva,sans-serif', Arguments\n $list array Key/value list of allowed Non-Google fonts.   mv_trellis_always_scan_template_files Filters if the template part files should be scanned on each page load. When set to False, Trellis will only scan template part files upon activation, update, or when clearing the Trellis cache.\napply_filters( 'mv_trellis_always_scan_template_files', bool $value ) Default\n False  Arguments\n $value bool Whether to scan on every page load.   mv_trellis_article_nav_image_orientation Filters the image orientation for post navigation images.\napply_filters( 'mv_trellis_article_nav_image_orientation', string $orientation ) Default\n mv_trellis_4x3  Arguments\n $orientation string The image orientation as set by the Featured Image Size in Trellis Settings. Default options include mv_trellis_1x1, mv_trellis_3x4, mv_trellis_4x3, mv_trellis_16x9, and full.   mv_trellis_article_nav_image_res Filters the resolution to be used when getting the post navigation image size.\napply_filters( 'mv_trellis_article_nav_image_res', string $value ) Default\n low  Arguments\n $value string The image resolution to use for the post navigation size. Default options include high, med_high, med, and low.   mv_trellis_async_styles_ignore Filters the style filepaths that are ignored from loading asynchronously on the front-end.\napply_filters( 'mv_trellis_async_styles_ignore', array $list ) Default\n Empty array  Arguments\n $list array List of filepaths to ignore.   mv_trellis_base_gutters Filters the base gutter sizes used for layout spacing. A value (in pixels) represents the amount of space to apply between layout elements. Uses the Layout Space value in Trellis Settings. Defaults to Comfortable. These values impact the base padding and margin values used by Trellis CSS variables:\n gutter-small = base/2 gutter = base gutter-double = base * 2 gutter-large = base * 2.5  The return value should match one of the specified keys.\napply_filters( 'mv_trellis_base_gutters', array $base_gutters ) Default\n [ ‘Compact’ =\u003e 10, ‘Comfortable’ =\u003e 20 ]  Arguments\n $base_gutters array The base values for Compact and Comfortable spacing.   mv_trellis_before_update_{$setting[’slug’]} Filters a Trellis setting before updating it in the options table. This provides a way to trigger an action before the value is saved.\nFor example, when changing the featured image size, a developer might want to make sure all of the image sizes used in the srcset are generated.\napply_filters( 'mv_trellis_before_update_' . $setting['slug'], array $setting ) Default\n Array of all the Trellis setting data.  Arguments\n $setting array The specified setting data.   mv_trellis_childtheme_link_shortcode Filters the output of the child theme link shortcode. In Trellis Settings, if the Hide Mediavine/Trellis Footer Links setting is disabled, Trellis will display a link to the child theme in the footer.\napply_filters( 'mv_trellis_childtheme_link_shortcode', string $output, array $atts ) Default\n The HTML link to the Trellis Framework, currently https://mediavine.com/.  Arguments\n  $output string HTML output of the shortcode.\n  $atts array List of shortcode attributes.\n  [ 'after' =\u003e '', 'before' =\u003e '\u0026#x000B7' ]  mv_trellis_comments_template Filters the comments template filepath. Defaults to an empty string so that the comments.php file from the theme is loaded.\napply_filters( 'mv_trellis_comments_template', string $comments_template_file ); Default\n Empty  Arguments\n $comments_template_file string The location of the comments template file.   mv_trellis_copyright_shortcode Filters the copyright shortcode output.\napply_filters( 'mv_trellis_copyright_shortcode', string $output, array $atts ) Default\n Copyright © {current_year} {site_title}  Arguments\n $output string HTML copyright output of the shortcode. $atts array List of shortcode attributes.  [ 'after' =\u003e '' 'before' =\u003e '' 'copyright' =\u003e '\u0026#x000A9;' 'first' =\u003e '' ]  mv_trellis_crit_css_min_file_size Filters the minimum size (in bytes) expected for a Critical CSS file to be saved. If the generated Critical CSS for a post or page is below this threshold, Trellis will not create a Critical CSS file.\napply_filters('mv_trellis_crit_css_min_file_size', int $min_crit_css_size\t) Default\n 2048  Arguments\n $min_crit_css_size int Minimum size in bytes.   mv_trellis_critical_css_rate_limit_in_seconds Filters the rate limit (in seconds) between requests for generating Critical CSS.\napply_filters( 'mv_trellis_critical_css_rate_limit_in_seconds', int|bool $critical_css_rate_limit_in_seconds ); Default\n 30  Arguments\n $critical_css_rate_limit_in_seconds int|bool Rate limit in seconds. Set to False to disable Critical CSS rate limiting.   mv_trellis_critical_css_timeout_in_seconds Filters the amount of time (in seconds) before another Critical CSS request can be made. Prevents sites with errors from continuing to make requests that will timeout.\napply_filters( 'mv_trellis_critical_css_timeout_in_seconds', int|bool $value ) Default\n 172800 ( two days)  Arguments\n $critical_css_timeout_in_seconds int|bool Timeout duration in seconds. Set to False to allow Critical CSS requests indefinitely.   mv_trellis_css_allowlist Filters a list of regex values to keep in the Non-Critical CSS file. Partial selector names can be passed in the array to designate multiple selectors.\napply_filters( 'mv_trellis_css_allowlist', array $bypass_settings ) Default\n Empty array  Arguments\n $bypass_settings array List of CSS selectors that will be kept in the secondary Non-Critical CSS file.   mv_trellis_css_force_keep Filters a list of regex values to include in the Critical CSS file. Regex patterns must match CSS selectors. Partial selector names can be passed in the array to designate multiple selectors.\napply_filters( 'mv_trellis_css_force_keep', array $force_keep_settings ); Default\n Empty array  Arguments\n $force_keep_settings array List of CSS selectors to be kept in the primary Critical CSS file.   mv_trellis_css_vars Filters the CSS variables to be output in a page. Returns an array of CSS variables in 'name' =\u003e 'value' format.\napply_filters( 'mv_trellis_css_vars', array $css_vars, array $css_options ) Default\nVariable values are those set in Trellis Settings.\n'color-body' =\u003e $css_options['color_body'], 'color-link' =\u003e $css_options['color_link'], 'color-link-hover' =\u003e $css_options['color_link_hover'], 'font-body' =\u003e $css_options['google_font_body'], 'font-heading' =\u003e $css_options['google_font_heading'], 'font-size-ex-sm' =\u003e $base_font_fl * 0.667 . 'rem', 'font-size-sm' =\u003e $base_font_fl * 0.875 . 'rem', 'font-size' =\u003e $css_options['font_size'], 'font-size-lg' =\u003e $base_font_fl * 1.125 . 'rem', 'color-primary' =\u003e '#' . str_replace( '#', '', $primary_color ), 'color-link' =\u003e 'var(--mv-trellis-color-primary)', 'color-secondary' =\u003e '#' . str_replace( '#', '', $secondary_color ), 'color-link-hover' =\u003e 'var(--mv-trellis-color-secondary)', 'max-logo-size' =\u003e $max_logo_size; Arguments\n $css_vars array List of CSS variables in ‘name’ =\u003e ‘value’ format. $css_options array CSS variable options set in the theme’s functions.   mv_trellis_default_featured_image_size Filters the featured image size before it’s returned. Defaults to the value of the Featured Image Size in Trellis Settings.\napply_filters( 'mv_trellis_default_featured_image_size', array $default ) Default\n mv_trellis_4x3  Arguments\n $default array The default image size to use, including optional resolution sizes.   mv_trellis_disable_add_async_attribute Filters whether to return early, disabling asynchronous loading on all enqueued scripts.\napply_filters( 'mv_trellis_disable_add_async_attribute', bool $value ) Default\n False  Arguments\n $value bool Whether to disable asynchronous loading of scripts.   mv_trellis_disable_convert_iframe_to_lazyload_when_enabled Filters whether to return early, preventing the addition of a \"loading=lazy\" attribute to iframes.\napply_filters( 'mv_trellis_disable_convert_iframe_to_lazyload_when_enabled', bool $value ) Default\n False  Arguments\n $value bool Whether to disable adding \"loading=lazy\" attribute to iframes.   mv_trellis_disable_convert_image_to_lazyload_when_enabled Filters whether to return early, disabling the adding or modifying of a \"loading=lazy\" attribute to images.\napply_filters( 'mv_trellis_disable_convert_image_to_lazyload_when_enabled', bool $value ) Default\n False  Arguments\n $value bool Whether to disable adding \"loading=lazy\" attribute to images.   mv_trellis_disable_eagerload_first_image Filters whether to return early, disabling eager loading on the first image in post content.\napply_filters( 'mv_trellis_disable_eagerload_first_image', bool $value ) Default\n False  Arguments\n $value bool Whether to disable eager loading on the first image.   mv_trellis_disable_lazy_load_classes Filters an array of classes that are used to disable lazy loading for specific items.\napply_filters( 'mv_trellis_disable_lazy_load_classes', array $values ) Default\n [‘no-lazyload’]  Arguments\n $values array List of classes that will not be lazy loaded.   mv_trellis_disable_ld_output_for_compatibility Filters the addition of Trellis LD output for compatibility.\napply_filters( 'mv_trellis_disable_ld_output_for_compatibility', bool $value ) Default\n False  Arguments\n $value bool Whether to disable output of Trellis LD data.   mv_trellis_disable_og_output_for_compatibility Filters the addition of Trellis Open Graph output for compatibility.\napply_filters( 'mv_trellis_disable_og_output_for_compatibility', bool $value ) Default\n False  Arguments\n $value bool Whether to disable output of Trellis Open Graph data.   mv_trellis_disable_og_plugin_slugs (Deprecated in 0.17.0) Filters an array of plugin slugs that will disable Trellis Open Graph output if any are active.\nNote For Trellis 0.17.0 and above, use mv_trellis_disable_og_output_for_compatibility within the compatibility class instead.  apply_filters( 'mv_trellis_disable_og_plugin_slugs', array $disable_og_plugin_slugs ) Default\n [‘wordpress-seo’]  Arguments\n $disable_og_plugin_slugs array A list of plugin slugs that disable Trellis Open Graph output.   mv_trellis_disable_process_images Filters whether to return early, disabling the processing of all images.\napply_filters( 'mv_trellis_disable_process_images', bool $value ) Default\n False  Arguments\n $value bool Whether to disable image processing on all images.   mv_trellis_disable_{$this-\u003eslug}_compatibility Filters whether to return early, disabling all compatibility code for the specified plugin slug. Compatibility code is written by Mediavine and corresponds to plugins listed in Trellis’ compatibility directory (mediavine-trellis/inc/compatibility).\napply_filters( \"mv_trellis_disable_{$this-\u003eslug}_compatibility\", bool $value ) Default\n False  Arguments\n $value bool Whether to disable compatibility code for the specified plugin slug.   mv_trellis_disable_seo_output_for_compatibility Filters the addition of Trellis SEO output.\napply_filters( 'mv_trellis_disable_seo_output_for_compatibility', bool $value ) Default\n False  Arguments\n $value bool Whether to disable output of Trellis SEO data.   mv_trellis_disable_set_image_cls_aspect_styles Filters whether to return early, disabling the addition of inline aspect ratio styles.\napply_filters( 'mv_trellis_disable_set_image_cls_aspect_styles', bool $value ) Default\n False  Arguments\n $value bool Whether to disable adding inline aspect ratio styles.   mv_trellis_disable_set_image_data_pin_attribute Filters whether to return early, disabling the addition of the data-pin-media url.\napply_filters( 'mv_trellis_disable_set_image_data_pin_attribute', bool $value ) Default\n False  Arguments\n $value bool Whether to disable adding data-pin-media attribute.   mv_trellis_disable_set_image_dimensions Filters whether to return early, disabling the setting of image dimensions.\napply_filters( 'mv_trellis_disable_set_image_dimensions', bool $value ) Default\n False  Arguments\n $value bool Whether to disable setting image dimension attributes.   mv_trellis_disable_svg_preload_first_image Filters whether to return early, disabling the svg preload on the first image in post content.\napply_filters( 'mv_trellis_disable_svg_preload_first_image', bool $value ) Default\n False  Arguments\n $value bool Whether to disable the svg preload on the first image.   mv_trellis_enable_lazy_load Filters whether to return early, disabling Trellis lazy loading.\nNote Mediavine recommends keeping lazy loading enabled for the best performance.  apply_filters( 'mv_trellis_enable_lazy_load', bool $value ) Default\n True  Arguments\n $value bool Whether lazy loading is enabled or disabled.   mv_trellis_enqueue_child_style Filters whether the child style should be enqueued.\napply_filters( 'mv_trellis_enqueue_child_style', bool $value ) Default\n True  Arguments\n $value bool Whether the child style is enqueued or not.   mv_trellis_enable_js_optimizations Filters whether JavaScript optimizations are enabled. This is used by compatibility classes for JavaScript optimization plugins.\napply_filters( 'mv_trellis_enable_js_optimizations', bool $value ) Default\n True  Arguments\n $value bool Whether JavaScript optimizations should be enabled.   mv_trellis_entry_content_classes Filters the classes added to the .entry-content \u003cdiv\u003e.\napply_filters( 'mv_trellis_entry_content_classes', array $class ) Default\n Empty array  Arguments\n $class array List of classes added to entry-content.   mv_trellis_excerpt_image_res Filters the resolution to be used when getting the excerpt image size. Trellis includes the options of high, med_high, med, and low.\napply_filters( 'mv_trellis_excerpt_image_res', string $image_res ) Default\n low  Arguments\n $image_res string The image resolution.   mv_trellis_excerpt_image_sizes Filters the sizes attribute of the excerpt thumbnail images.\napply_filters( 'mv_trellis_excerpt_image_sizes', string $sizes ) Default\n (max-width: 599px) 300px, 270px  Arguments\n $sizes string The sizes attribute value of excerpt thumbnail images.   mv_trellis_featured_post_image_res Filters the resolution to be used when getting the featured post thumbnail images. Trellis includes the options of high, med_high, med, and low.\n$image_res = apply_filters( 'mv_trellis_featured_post_image_res', string $image_res ); Default\n med  Arguments\n $image_res string The featured post thumbnail image resolution.   mv_trellis_featured_post_image_sizes Filters the featured post image sizes attribute.\napply_filters( 'mv_trellis_featured_post_image_sizes', string $sizes ) Default\n (max-width: 340px) calc(100vw - 40px), (max-width: 450px) calc(100vw - 100px), (max-width: 959px) 350px, (max-width: 1134px) 275px, 350px  Arguments\n $sizes string The value of the sizes attribute for featured post images.   mv_trellis_filter_{$post_type}_meta_fields Filters the meta field blocks to be registered for this specific post type.\napply_filters( 'mv_trellis_filter_' . $post_type . '_meta_fields', array $fields, WP_Post $post ) Default\n Empty array  Arguments\n  $fields array List of meta fields to pass to add_meta_box().\n[ 'slug' =\u003e {field_slug}, 'type' =\u003e {field_type}, 'title' =\u003e {field_title} ]  $post WP_Post The current post.     mv_trellis_filter_localized_font_types Filters which font types/formats are allowed to be localized.\napply_filters( 'mv_trellis_filter_localized_font_types', array $font_types ) Default\n [ ‘woff2’]  Arguments\n $font_types array List of types/formats of fonts to localize.   mv_trellis_flags Filters the Trellis flags to look for in the submitted URL.\napply_filters( 'mv_trellis_flags', array $flags ) Default\n Empty array  Arguments\n $flags array List of Trellis URL flags.   mv_trellis_force_disable_critical_css Filters whether to stop a Critical CSS request.\napply_filters( 'mv_trellis_force_disable_critical_css', bool $value ) Default\n False  Arguments\n $value bool Whether to disable Critical CSS processing.   mv_trellis_footer_copy_text Filters the footer copyright text before being processed by the mv_trellis_copyright_shortcode shortcode.\napply_filters( 'mv_trellis_footer_copy_text', string $copy_text ) Default\n Copyright and footer links text.  Arguments\n $copy_text string Contents of the copyright text.   mv_trellis_get_{$post_type}_meta_fields Filters the meta fields for a specific post type.\napply_filters( 'mv_trellis_get_' . string $post_type . '_meta_fields', array $fields ) Default\n Empty array  Arguments\n  $fields array List of meta fields and their attributes.\n[ 'slug' =\u003e {field_slug}, 'type' =\u003e {field_type}, 'title' =\u003e {field_title} ]    mv_trellis_google_font_style_{$font_type}_default Filters the font styles for all fonts.\napply_filters( \"mv_trellis_google_font_style_{$font_type}_default\", array $google_font_style ) Default\n [ ‘400’, ‘400i’, ‘700’, ‘700i’ ]  Arguments\n $google_font_style array A list of styles to load.   mv_trellis_google_font_style_{$font_type}_{$sanitized_font_name} Filters the font styles for a specified font.\napply_filters( \"mv_trellis_google_font_style_{$font_type}_{$sanitized_font_name}\", array $google_font_style ) Default\n [ ‘400’, ‘400i’, ‘700’, ‘700i’ ]  Arguments\n $google_font_style array A list of styles to load for a particular font.   mv_trellis_grow_sidebar_compatibility_styles Filters style overrides for the Grow Social sidebar.\napply_filters( 'mv_trellis_grow_sidebar_compatibility_styles', string $grow_sidebar_styles ) Default\n@media only screen and (min-width: ' . $media_query_min_width . ') and (max-width: ' . $media_query_max_width . ') { .has-grow-sidebar .content \u003e .wrapper,.has-grow-sidebar .footer \u003e .wrapper {' . $sidebar_margin_css . '} .has-grow-sidebar .wrapper-content {padding-left:10px;padding-right:10px;} } @media only screen and (max-width:1184px) { .has-grow-sidebar .widget-container.mv_trellis_mobile_hide{display:none;} .has-grow-sidebar .wrapper-content{display:block;} } Arguments\n $grow_sidebar_styles string CSS styles to adjust the display of the Grow Social floating sidebar when it’s active.   mv_trellis_grow_sidebar_margin_space Filters the sidebar margin overrides for Grow Social. Helps to prevent Grow Social from covering content.\napply_filters( 'mv_trellis_grow_sidebar_margin_space', string $value ) Default\n 60px  Arguments\n $value string The margin to be used (in pixels).   mv_trellis_grow_sidebar_media_query_max_width Filters the media query max width style override for Grow Social.\napply_filters( 'mv_trellis_grow_sidebar_media_query_max_width', string $value ) Default\n 1350px  Arguments\n $value string Specifies the max width that these styles are applied.   mv_trellis_grow_sidebar_media_query_min_width Filters the media query min width style override for Grow Social.\napply_filters( 'mv_trellis_grow_sidebar_media_query_min_width', string $value ) Default\n 721px  Arguments\n $value string Specifies the min width that these styles are applied.   mv_trellis_hierarchy Filters the hierarchy of the file search order.\nDefault\nNote This list shows the default name and order of template parts to search in plain text, but an array must be passed as an argument to the filter.  1. {$slug}-front-page-{$theme_style}.php 2. {$slug}-front-page.php 3. {$slug}-home-{$theme_style}.php 4. {$slug}-home.php 5. {$slug}-author-{$theme_style}.php 6. {$slug}-author.php 7. {$slug}-category-{$theme_style}.php 8. {$slug}-category.php 9. {$slug}-archive-{$post_type}-{$theme_style}.php 10. {$slug}-archive-{$post_type}.php 11. {$slug}-taxonomy-{$theme_style}.php 12. {$slug}-taxonomy.php 13. {$slug}-date-{$theme_style}.php 14. {$slug}-date.php 15. {$slug}-tag-{$theme_style}.php 16. {$slug}-tag.php 17. {$slug}-archive-{$theme_style}.php 18. {$slug}-archive.php 19. {$slug}-{$post_type}-{$theme_style}.php 20. {$slug}-{$post_type}.php 21. {$slug}-singular-{$theme_style}.php 22. {$slug}-singular.php 23. {$slug}-search-{$theme_style}.php 24. {$slug}-search.php 25. {$slug}-404-{$theme_style}.php 26. {$slug}-404.php 27. {$slug}-{$theme_style}.php 28. {$slug}.php Arguments\n $parts_to_search array List of template parts in the file search order.   mv_trellis_image_orientation Filters the image orientation. This is the image size passed to mv_trellis_get_attachment_image_tag. Defaults to the value of the Featured Image Size in Trellis Settings.\napply_filters( 'mv_trellis_image_orientation', string $orientation ) Default\n mv_trellis_4x3  Arguments\n $orientation string The slug of the image orientation.   mv_trellis_image_sizes Filters the list of theme image sizes before they are returned.\napply_filters( 'mv_trellis_image_sizes', array $options ) Default\n Array of Trellis custom image sizes in slug =\u003e name format.  Arguments\n $options array Theme image sizes in a key/value format.   mv_trellis_image_sizes_attribute Filters the Trellis adjusted sizes attribute for an image.\napply_filters( 'mv_trellis_image_sizes_attribute', string $sizes, string|array $size, string|null $image_src, array|null $image_meta, int $attachment_id ) Default\n (max-width: 760px) calc(100vw - ' . $css_gutter_double . ‘), 720px  Arguments\n $sizes string A source size value for use in a sizes attribute. $size string|array The requested image size. It can be any registered image size name or an array of width and height values in pixels (in that order). $image_src string|null The URL to the image file or null. $image_meta array|null The image metadata as returned by wp_get_attachment_metadata or null. $attachment_id int The image attachment ID of the original image or 0. If set to 0, only $image_meta is used.   mv_trellis_images_stop_process (Only available if using Trellis Images) Filters whether to return early, disabling image processing.\napply_filters( 'mv_trellis_images_stop_process', bool $value ) Default\n False  Arguments\n $value bool Whether to disable image processing.   mv_trellis_js_plugin_name Filters the displayed plugin name responsible for disabling JavaScript optimizations.\napply_filters( 'mv_trellis_js_plugin_name', string $value ) Default\n Empty  Arguments\n $value string The plugin name.   mv_trellis_license_required_settings Filters the array of settings dependent on a Trellis license.\napply_filters( 'mv_trellis_license_required_settings', array $license_dependent ) Default\n$license_dependent = [ 'google_font_body', 'google_font_heading', 'featured_image_size', 'google_analytics_delay', 'hide_footer_links', 'enable_pwa', 'site_logo', 'primary_css_color', 'secondary_css_color', 'background_accent_css_color', 'max_logo_size', 'el_comfort_level', 'pwa_short_name', 'pwa_theme_color', 'site_icon', 'js_optimizations', ]; Arguments\n $license_dependent array List of slugs for settings that are dependent on a license.   mv_trellis_link_shortcode Filters the HTML string for the link to the Trellis homepage that appears in the site footer.\napply_filters( 'mv_trellis_link_shortcode', string $output, array $atts ) Default\n\u003ca href=\"https://mediavine.com/\" target=\"_blank\" rel=\"noopener nofollow\"\u003eTrellis Framework\u003c/a\u003e Arguments\n  $output string HTML Trellis link output.\n  $atts array Trellis link shortcode attributes.\n[ 'after' =\u003e '', 'before' =\u003e '' ]    mv_trellis_local_script_model Filters the local model overrides for the Mediavine ad script wrapper.\napply_filters( 'mv_trellis_local_script_model', array $local_model_default_values ) Default\n$local_model_default_values = [ 'optimize_mobile_pagespeed' =\u003e true, 'optimize_desktop_pagespeed' =\u003e true, 'content_selector' =\u003e '.mvt-content', 'footer_selector' =\u003e 'footer.footer', 'content_selector_mobile' =\u003e '.mvt-content', 'comments_selector' =\u003e '', 'sidebar_atf_selector' =\u003e '.sidebar-primary .widget-container:nth-last-child(3)', 'sidebar_atf_position' =\u003e 'afterend', 'sidebar_btf_selector' =\u003e '.mv-sticky-slot', 'sidebar_btf_position' =\u003e 'beforeend', 'content_stop_selector' =\u003e '', 'sidebar_btf_stop_selector' =\u003e 'footer.footer', 'custom_css' =\u003e '', 'ad_box' =\u003e true, /** * Filters the value added to the model for the sidebar breakpoint. Default is 1135. * (Advanced use) * * @param string The last pixel width that the sidebar is viewable */ 'sidebar_minimum_width' =\u003e apply_filters( 'mv_trellis_model_sidebar_breakpoint', '1135' ), ]; Arguments\n $local_model_values array Key/value pairs to override.   mv_trellis_logo_sources Filters the source tags for the site logo that are output in a picture element.\napply_filters( 'mv_trellis_logo_sources', '', string $img_html ) Default\n Empty  Arguments\n $value string The added source tags to be output before the \u003cimg\u003e tag. $img_html string The default logo \u003cimg\u003e tag.   mv_trellis_match_image_dimensions Filters whether Trellis should check if specified dimensions match the registered image size.\napply_filters( 'mv_trellis_match_image_dimensions', bool $value, int $img_id, string $img_size ) Default\n False  Arguments\n $value bool Whether the image dimensions should match. $img_id int The ID of the image. $img_size string The size of the image.   mv_trellis_mediavine_link_shortcode Filters the HTML string for the link to the Mediavine homepage in the site footer.\napply_filters( 'mv_trellis_mediavine_link_shortcode', string $output, array $atts ) Default\n\u003ca href=\"https://www.mediavine.com/\" target=\"_blank\" rel=\"noopener nofollow\"\u003eMediavine\u003c/a\u003e Arguments\n  $output string Mediavine link output.\n  $atts array Mediavine link shortcode attributes. Only accepts after and before.\n[ 'after' ⇒ '', 'before' ⇒ __( 'by', 'mediavine' ) ]    mv_trellis_memory_exceeded Filters the result of Trellis’ memory limit being reached.\napply_filters( 'mv_trellis_memory_exceeded', bool $return ) Default\n False  Arguments\n $return bool Whether Trellis has exceeded its memory limit.   mv_trellis_memory_limit_percent Filters the percentage of available WordPress memory as a decimal. Trellis uses this amount to determine if there is enough memory available for its batch processes.\napply_filters( 'mv_trellis_memory_limit_percent', float $value ) Default\n 0.9  Arguments\n $percent_of_memory float The percentage of available WordPress memory Trellis can use.   mv_trellis_model_sidebar_breakpoint Filters the value added to the model for the sidebar breakpoint. This is used by the Mediavine ad script wrapper so that ads are not served when the sidebar is pushed below the content.\napply_filters( 'mv_trellis_model_sidebar_breakpoint', string $value ) Default\n 1135  Arguments\n $value string The last pixel width that the sidebar is viewable.   mv_trellis_nonasync_js_handles Filters the script handles that Trellis should not load asynchronously. Should match handles passed to wp_register_script.\napply_filters( 'mv_trellis_nonasync_js_handles', array $disallowed_handles ) Default\n Empty array  Arguments\n $disallowed_handles array List of handles to be compared against.   mv_trellis_nonasync_js_urls Filters the list of script source URLs that Trellis should not load asynchronously.\napply_filters( 'mv_trellis_nonasync_js_urls', array $disallowed_urls) Default\n Empty array  Arguments\n $disallowed_urls array List of URLs to be compared against.   mv_trellis_nonasync_js_prefixes Filters the list of handle prefixes where Trellis should not load scripts asynchronously. Prefixes should be at the start of the handles passed to wp_register_script.\napply_filters( 'mv_trellis_nonasync_js_prefixes', $disallowed_prefixes ) Default\n Empty array  Arguments\n $disallowed_prefixes array List of handle prefixes to be compared against.   mv_trellis_pages_pagination_args Filters arguments used to display archive and feed page pagination. Available arguments are described on the WordPress paginate_links function page.\napply_filters( 'mv_trellis_pages_pagination_args', array $posts_pagination_args ) Default\n Empty array  Arguments\n $posts_pagination_args array Arguments for displaying pagination links.   mv_trellis_post_link_featured_image_sizes Filters the post link featured image sizes attribute.\napply_filters( 'mv_trellis_post_link_featured_image_sizes', string $sizes ) Default\n (max-width: 599px) 320px, (max-width: 700px) calc(50vw - 30px), 320px  Arguments\n $sizes string Contents of the sizes attribute for featured images in post links.   mv_trellis_process_content Filters the DOMDocument for making changes before it’s output to the browser.\napply_filters( 'mv_trellis_process_content', \\DOMDocument $content_dom ) Default\n DOMDocument of the content being processed (the_content or primary sidebar).  Arguments\n $content_dom \\DOMDocument The DOMDocument content.   mv_trellis_resolution_sizes Filters the resolution sizes to associate with image sizes.\napply_filters( 'mv_trellis_resolution_sizes', array $resolution_sizes, array $custom_image_sizes ) Default\n [ ‘high’, ‘med_high’, ‘med’, ‘low’ ]  Arguments\n $resolution_sizes array List of allowed resolution sizes. $custom_image_sizes array Custom image sizes to be added through the theme.   mv_trellis_settings Filters the theme settings. Used to add or modify theme settings whenever the settings are being built or rebuilt.\napply_filters( 'mv_trellis_settings', array $theme_settings ) Default\n Empty array  Arguments\n $theme_settings array Theme settings to be added to the Trellis Settings page.   mv_trellis_settings_groups Filters the Trellis Settings tabs or groups.\napply_filters( 'mv_trellis_settings_groups', array $default_groups ) Default\n$groups = [ 'issues' =\u003e __( 'Issues', 'mediavine' ), 'hooks' =\u003e __( 'Hooks', 'mediavine' ), 'license' =\u003e __( 'License', 'mediavine' ), 'pwa' =\u003e __( 'PWA', 'mediavine' ), 'advanced' =\u003e __( 'Advanced', 'mediavine' ), 'display' =\u003e __( 'Display', 'mediavine' ), ]; Arguments\n $default_groups array Key/value pair of setting group slugs and display names. These should correspond to the group column of the settings table.   mv_trellis_settings_update Filters the theme settings to be updated.\napply_filters( 'mv_trellis_settings_update', array $theme_settings ) Default\n self::get_theme_settings()  Arguments\n $theme_settings array Theme settings to be added or updated on the settings page.   mv_trellis_sidebar_content Filters the sidebar HTML output. Used internally to apply lazy loading attributes to images.\napply_filters( 'mv_trellis_sidebar_content', string $sidebar_html, string $sidebar_id ) Default\n HTML output of the sidebar.  Arguments\n $sidebar_html string The sidebar HTML. $sidebar_id string The sidebar ID.   mv_trellis_site_title_logo_alt_text Filters the site logo image alt text.\napply_filters( 'mv_trellis_site_title_logo_alt_text', string $site_name ) Default\n get_bloginfo( 'name' )  Arguments\n $site_name string Site name.   mv_trellis_site_title_logo_classes Filters the logo \u003cimg\u003e tag classes.\napply_filters( 'mv_trellis_site_title_logo_classes', array $image_classes, bool $link ) Default\n ['header-logo-img', 'ggnoads']  Arguments\n $image_classes array List of classes to be added to the logo source markup. $link bool Whether site title/logo output should be wrapped in a link.   mv_trellis_site_title_shortcode Filters the site title shortcode output displayed in the site footer.\napply_filters( 'mv_trellis_site_title_shortcode', string $output, array $atts ) Default\n get_bloginfo( 'name' )  Arguments\n  $output string Site title output.\n  $atts array Site title shortcode attributes.\n[ 'after' =\u003e '', 'before' =\u003e '' ]    mv_trellis_site_title_text_classes Filters the site title tag classes.\napply_filters( 'mv_trellis_site_title_text_classes', array $value, bool $link ) Default\n [ ‘header-logo-text’]  Arguments\n $value array Classes to be added to the site title markup. $link bool If the site title/logo output should be wrapped in a link.   mv_trellis_skip_eagerload_classes Filters a list of image classes that will not be eager loaded.\napply_filters( 'mv_trellis_skip_eagerload_classes', array $value ) Default\n Empty  Arguments\n $value array A list of image classes that can skip eager loading.   mv_trellis_sw_ignore Filters the paths to be ignored by the service worker.\napply_filters( 'mv_trellis_sw_ignore', array $ignore_paths ) Default\n Empty array  Arguments\n $ignore_paths array List of file paths to ignore.   mv_trellis_the_title Filters the page title.\napply_filters( 'mv_trellis_the_title', string $title, string $before, string $after ) Default\n The current page/post/archive/cpt title.  Arguments\n $title string The current page/post/archive title. $before string Content to be added to the front of the title, usually in some form of markup. $after string Content to be added to the end of the title, usually in some form of markup.   mv_trellis_top_breadcrumbs_placement Filters the action hook called for the breadcrumb output near the top of pages.\napply_filters( 'mv_trellis_top_breadcrumbs_placement', string $default_header_breadcrumb_hook ) Default\n tha_aside_before_entry_content  Arguments\n $default_header_breadcrumb_hook string The hook to fire on.   mv_trellis_web_stories_compatibility_styles Filters the Web Stories compatibility style overrides.\napply_filters( 'mv_trellis_web_stories_compatibility_styles', string $story_archive_styles ) Default\n.post-type-archive-web-story .excerpt {flex: 1 1 360px; margin: 0px auto; max-width: 360px;} .post-type-archive-web-story .mv-trellis-feed-unit{flex: 1 1 100%;} .post-type-archive-web-story .pagination{flex: 1 1 100%;} .post-type-archive-web-story .excerpt-container,.post-type-archive-web-story .excerpt-post-data{display: block;} .post-type-archive-web-story .excerpt-post-data{text-align:center;} .post-type-archive-web-story .wp-block-embed__wrapper {margin:0 auto;} .post-type-archive-web-story .excerpt-photo {display: none;} Arguments\n $story_archive_styles string CSS styles applied to Web Story archive pages.   mv_trellis_wordpress_link_shortcode Filters the HTML string for the link to WordPress in the site footer.\napply_filters( 'mv_trellis_wordpress_link_shortcode', string $output, array $atts ) Default\n\u003ca href=\"https://wordpress.org/\" target=\"_blank\" rel=\"noopener nofollow\"\u003eWordPress\u003c/a\u003e Arguments\n $output string WordPress link output. $atts array WordPress link shortcode attributes. [ 'after' =\u003e '', 'before' =\u003e '' ]    mvt_processing_css_status_timeout Filters the expiration timestamp for when a Critical CSS request process should timeout.\napply_filters( 'mvt_processing_css_status_timeout', int $value) Default\n Current time + 7200 seconds (2 hours).  Arguments\n $value int timestamp + 7200 seconds.   mvt_requires_default_wp_fields Description\nFilters whether default WordPress Core comment fields should be used in the comments_form call in comments.php. If Trellis Comments are enabled, WordPress comment fields are not used.\napply_filters('mvt_requires_default_wp_fields', bool $value) Default\n False if Trellis Comments are enabled, True if Trellis Comments are disabled.  Arguments\n $value bool Whether to use default WordPress comment fields.  ","categories":"","description":"A detailed list of available filters in Trellis showing the filter name, description, syntax, default values, and arguments.\n","excerpt":"A detailed list of available filters in Trellis showing the filter …","ref":"/docsytrellis/reference/filters/filters-detail/","tags":["filters"],"title":"Filters Detail"},{"body":"Trellis includes the Theme Hook Alliance (THA) standards, offering a consistent set of entry points for easy customization and altering of functionality. However, instead of firing THA hooks directly within templates, Trellis Core and Bamboo, Birch, and Wisteria templates use custom Trellis functions. These functions fire the THA hooks and, in some cases, perform additional tasks.\nFor example, in the content-article.php template part, instead of the traditional method of calling a THA hook:\ndo_action('tha_aside_before_entry_content'); Trellis uses the following custom function:\nmvt_aside_before_entry_content(); This accomplishes two things:\n It runs the tha_aside_before_entry_content hook with less code. It also wraps any hooked content in an aside tag.  Important If you add custom templates to your child theme, you should include the appropriate Trellis functions in your template files. This ensures compatibility with future versions of Trellis.  This article will describe all THA and Trellis hooks that are available for use. For THA hooks, the custom Trellis function which fires it is also listed.\nPublisher Usage As a child theme developer, you can add content by calling a hook in your child theme’s functions.php file. To give publishers an easier way to add their own customizations, a subset of these hooks can be modified by going to Trellis Settings and clicking on Hooks.\nSections  Aside Hooks Body Hooks Content Hooks Comment Hooks Critical CSS Hooks Entry Hooks Footer Hooks Head Hooks Header Hooks HTML Hooks Image Processing Hooks Navigation Hooks Search Hooks Sidebar Hooks Theme Hooks Title Hooks  Aside Hooks tha_aside_before_entry_content Called by the mvt_aside_before_entry_content function. Fires inside the standard loop, before the entry-content container. This wraps any hooked content in an aside tag.\ntha_aside_after_entry_content Called by the mvt_aside_after_entry_content function. Fires inside the standard loop, after the entry-content container. This wraps any hooked content in an aside tag.\n Body Hooks tha_body_top Called by the mvt_body_top function. Fires immediately after wp_body_open().\ntha_body_bottom Called by the mvt_body_bottom function. Fires immediately before wp_footer().\n Cache Hooks mv_trellis_clear_all_cache Clears all the caches associated with a number of caching plugins. Introduced in Trellis 0.17.0.\nmv_trellis_clear_single_cache Clears a single post cache for a number of caching plugins. Introduced in Trellis 0.17.0.\nArguments\n $id int The post ID.   Content Hooks tha_content_before Called by the mvt_content_before function. Fires immediately before the opening \u003cmain\u003e content tag.\ntha_content_after Called by the mvt_content_after function. Fires immediately after the closing \u003c/main\u003e content tag.\ntha_content_top Called by the mvt_content_top function. Fires immediately after the opening \u003cmain\u003e content tag.\ntha_content_bottom Called by the mvt_content_bottom function. Fires immediately before the closing \u003c/main\u003e content tag.\ntha_content_while_before Called by the mvt_content_while_before function. Fires inside the standard loop, before the while() block.\ntha_content_while_after Called by the mvt_content_while_after function. Fires inside the standard loop, after the while() block.\ntha_no_content_top Called by the mvt_no_content_top function. Fires inside the standard loop when there are no posts to show, before the Trellis “No content found” notice.\ntha_no_content_bottom Called by the mvt_no_content_bottom function. Fires inside the standard loop when there are no posts to show, after the Trellis “No content found” notice.\ntha_content_header_after Called by the mvt_content_header_after function. Fires immediately after the closing \u003c/header\u003e content tag.\n Comment Hooks mv_trellis_comments_output Fires where the comments template is output.\ntha_comments_before Called by the mvt_comments_before function. Fires inside the standard loop, before the comments_template() wrapper.\ntha_comments_after Called by the mvt_comments_after function (which also fires the comment_form_after hook). Fires inside the standard loop, after the comments_template() wrapper.\n Critical CSS Hooks mv_trellis_crit_css_disable_flag Fires when the disable_critical_css URL flag exists.\nmv_trellis_crit_css_error Fires when Critical CSS has an error while generating files. Accepts arguments passed to it when the hook is fired.\nArguments\n $params array The API request parameters. $type string The request type.  mv_trellis_crit_css_incoming Fires when Critical CSS has a returned callback. Accepts arguments passed to it when the hook is fired.\nArguments\n $params array The API request parameters.  mv_trellis_crit_css_success Fires when Critical CSS is successfully generated and posted back. Accepts arguments passed to it when the hook is fired.\nArguments\n $params array The API request parameters. $type string The request type.  mv_trellis_pre_crit_css_req Fires when Critical CSS is requested to be generated. Accepts arguments passed to it when the hook is fired.\nArguments\n $params array The API request parameters. $type string The request type.  mv_trellis_purge_critical_css Fires after Critical CSS has been purged.\n Entry Hooks tha_entry_top Called by the mvt_entry_top function. Fires immediately after the opening \u003carticle\u003e content tag.\ntha_entry_bottom Called by the mvt_entry_bottom function. Fires immediately before the closing \u003c/article\u003e content tag.\ntha_entry_excerpt_before Called by the mvt_entry_excerpt_before function. Fires inside the standard loop, before the_excerpt().\ntha_entry_excerpt_after Called by the mvt_entry_excerpt_after function. Fires inside the standard loop, after the_excerpt().\ntha_entry_before Called by the mvt_entry_before function. Fires inside the standard loop, before the entry opening markup.\ntha_entry_after Called by the mvt_entry_after function. Fires inside the standard loop, after the entry closing markup. The mvt_entry_after function accepts arguments passed when the hook is fired.\nDefault\n Empty array  Arguments\n$args array Contains arguments passed when the hook is fired. In the Trellis Core templates, content-article.php and content.php contain an item count for potential Mediavine ad placement.\ntha_entry_content_before Called by the mvt_entry_content_before function. Fires inside the standard loop, before the_content().\ntha_entry_content_after Called by the mvt_entry_content_after function. Fires inside the standard loop, after the_content().\ntha_entry_footer_top Called by the mvt_trellis_entry_footer_top function. Fires immediately after the opening \u003cfooter class=\"entry-footer\"\u003e tag.\ntha_entry_footer_bottom Called by the mvt_trellis_entry_footer_bottom function. Fires immediately before the closing entry-footer \u003c/footer\u003e tag.\n Footer Hooks tha_footer_before Called by the mvt_footer_before function. Fires immediately before the opening \u003cfooter\u003e tag.\ntha_footer_after Called by the mvt_footer_after function. Fires immediately after the closing \u003c/footer\u003e tag.\ntha_footer_top Called by the mvt_footer_top function (which also fires mv_trellis_footer, outputting the main content of the footer). Fires immediately after the opening footer wrapper tag.\ntha_footer_bottom Called by the mvt_footer_bottom function. Fires immediately before the closing footer wrapper tag.\n Head Hooks tha_head_top Called by the mvt_head_top function. Fires immediately after the opening \u003chead\u003e tag.\ntha_head_bottom Called by the mvt_head_bottom function. Fires immediately before wp_head().\n Header Hooks mv_trellis_before_header_content Fires after the header menu and before any other header content.\ntha_header_before Called by the mvt_header_before function. Fires immediately before the opening \u003cheader\u003e tag.\ntha_header_after Called by the mvt_header_after function. Fires immediately after the closing \u003c/header\u003e tag.\ntha_header_top Called by the mvt_header_top function. Fires immediately before the header container.\ntha_header_bottom Called by the mvt_header_bottom function. Fires immediately after the header container.\n HTML Hooks tha_html_before Called by the mvt_html_before function. Fires immediately before the opening \u003chtml\u003e tag.\n Image Processing Hooks mv_trellis_before_image_process_loop Fires before the foreach loop of the process_images() function.\nmv_trellis_after_image_process_loop Fires after the foreach loop of the process_images() function.\n Navigation Hooks tha_entry_navigation_before Called by the mvt_entry_navigation_before function. Fires inside the standard loop, before the article navigation markup.\ntha_entry_navigation_after Called by the mvt_entry_navigation_after function. Fires inside the standard loop, after the article navigation markup.\n Search Hooks mv_trellis_search_form Fires in the header before mv_trellis_site_title. Outputs the search form.\n Sidebar Hooks tha_sidebars_before Called by the mvt_sidebars_before function. Fires immediately before get_sidebar().\ntha_sidebars_after Called by the mvt_sidebars_after function. Fires immediately after get_sidebar().\ntha_sidebar_top Called by the mvt_sidebar_top function. Fires immediately after the opening \u003caside\u003e sidebar tag.\ntha_sidebar_bottom Called by the mvt_sidebar_bottom function. Fires immediately before the closing \u003c/aside\u003e sidebar tag.\nTheme Hooks mv_trellis_parent_loaded Fires after the parent theme is loaded so that the child theme has access to options.\ntrellis_theme_activated Fires when Trellis is activated for the first time, updated, or triggered by the REST endpoint.\ntrellis_theme_deactivated Fires when Trellis is deactivated.\n Title Hooks tha_title_before Called by the mvt_title_before function. Fires immediately before the content title, before the opening \u003ch1\u003e tag.\ntha_title_after Called by the mvt_title_after function. Fires immediately after the content title, after the closing \u003c/h1\u003e tag.\n","categories":"","description":"Trellis includes a number of action hooks that web developers can use in their child themes.\n","excerpt":"Trellis includes a number of action hooks that web developers can use …","ref":"/docsytrellis/reference/hooks/","tags":"","title":"Hooks"},{"body":"Publishers can configure Post Meta in Trellis Settings, selecting what information appears on a post. Available meta information includes: Author, Breadcrumbs (if the Yoast SEO plugin is active), Categories, Comment Count, and Date (Published, Modified, or both).\nNote Trellis templates provided by Mediavine limit Comment Count to the top of a post. If you’d like to add the Comment Count to the bottom of a post, refer to the code in the Additional Information section below.  The image below shows the default Post Meta information as rendered by the Trellis Core theme with Yoast SEO installed.\nSettings Publishers can control the Post Meta information and where it gets displayed in Trellis Settings. These values are then accessed by various filters and functions. Template parts contain logic to render the information.\n   Setting Name Description Usage     Post Meta Display - Top Select which post meta to display in the post header. Options include: Comment Count, Author, Date, and Categories.\nIf Yoast SEO is installed, you can show Yoast breadcrumbs. Refer to the article-meta-header template part in Trellis Core to see how this is implemented.\nLocation: mediavine-trellis/template-parts/article/article-meta-header.php   Post Meta Display - Bottom Select which post meta to display in the post footer. Options include: Author, Date, and Categories.\nIf Yoast SEO is installed, you can show Yoast breadcrumbs. Refer to the article-meta-footer template part in Trellis Core to see how this is implemented.\nLocation: mediavine-trellis/template-parts/article/article-meta-footer.php   Post Meta Date Display Select the date to display in the post header. Options include: Display Modified, Display Published, or Display Both. Created by the mv_trellis_entry_date() function. See Functions for more information. You can also refer to the article-meta-header or article-meta-footer template parts in Trellis Core for reference.    Functions The configuration in Trellis Settings can be accessed via the mv_trellis_is_meta_item_enabled() function. Individual options are queried by their slug to determine if the publisher has them set. Available Post Meta slugs include:\n author breadcrumbs (only available if Yoast SEO is installed) categories comment_count date  The function also specifies a location, which can be:\n post_meta_top post_meta_bottom  Example\nIn the following example, the $display_author variable will be set to true or false depending on (1) if the post type supports an author, and (2) if the Trellis Post Meta Author setting is enabled and set to the top of the post.\n$display_author = ( post_type_supports( get_post_type( $post_id ), 'author' ) \u0026\u0026 mv_trellis_is_meta_item_enabled( 'author', 'post_meta_top' ) ); If a Post Meta item is available, other functions are used to output its value.\n author: mv_trellis_entry_author() date: mv_trellis_entry_date() comment_count: Calculated in the article_meta_header template categories: mv_trellis_entry_taxonomies breadcrumbs: Assembled from an internal class and posted to the hook specified by the mv_trellis_top_breadcrumbs_placement filter.  Example\nThe following example shows how the post’s Author meta information is output in article-meta-header.php.\nif ( $display_author ) { ?\u003e \u003cp class=\"author-meta post-author meta-wrapper\"\u003e \u003c?php echo esc_html__( 'By: ', 'mediavine' ); mv_trellis_entry_author(); ?\u003e \u003c/p\u003e \u003c?php } Useful Filters One filter is available to adjust breadcrumb placement if Yoast SEO is installed:\n mv_trellis_top_breadcrumbs_placement: Filters the action hook called for the breadcrumb output near the top of pages. The default is tha_aside_before_entry_content, which is output by mvt_entry_before() in the Trellis Core templates. See Hooks in the Reference section for a list of all available hooks.  Additional Information To best understand how Post Meta information is displayed, refer to the article-meta-header.php and article-meta-footer.php template parts in Trellis Core.\nMoving the Comment Count If you’d like to display the Comment Count at the bottom of a post, you’ll need to add code to your child theme’s functions.php file as well as modifying the article-meta-footer.php template part.\nFunctions.php\nThis code will add the Comment Count as an option to Post Meta in Trellis Settings:\n/** * Allows the Comment Count to be used at the bottom of Post Meta. */ add_filter( 'mv_trellis_before_update_post_meta_bottom', 'mv_add_comments_option_to_post_meta_bottom' ); function mv_add_comments_option_to_post_meta_bottom( array $setting ) { $setting['data']['options']['comment_count'] = 'Comment Count'; return $setting; } Article-meta-footer.php\nYou’ll need to add three pieces of code in the article-meta-footer.php template part.\n Check if the Comment Count has been enabled for the footer:  // Check if the Comment Count is set for the bottom of Post Meta $mv_trellis_display_comment_count = ( ( comments_open( $mv_trellis_post_id ) || get_comments_number() ) \u0026\u0026 ! post_password_required() \u0026\u0026 mv_trellis_is_meta_item_enabled( 'comment_count', 'post_meta_bottom' ) ); Modify the post’s check for meta output to include the Comment Count:  // If we don't have any meta output, get out if ( ! $mv_trellis_display_author \u0026\u0026 ! $mv_trellis_display_date \u0026\u0026 ! $mv_trellis_display_comment_count \u0026\u0026 ! $mv_trellis_display_categories \u0026\u0026 ! $mv_trellis_display_breadcrumbs ) { return; } Add code to render the Comment Count:  // Comments. if ( $display_comment_count ) { ?\u003e \u003cdiv id=\"comment-count\" class=\"meta-element meta-wrapper\"\u003e \u003cdiv\u003e \u003c?php mv_trellis_get_template_part( 'template-parts/svg/comment-bubble' ); ?\u003e \u003c?php /* translators: %s: number of comments for the post */ echo esc_html( sprintf( _n( '%s Comment', '%s Comments', get_comments_number(), 'mediavine' ), number_format_i18n( get_comments_number() ) ) ); ?\u003e \u003c/div\u003e \u003c/div\u003e \u003c?php } ","categories":"","description":"Post Meta is information that can appear at the top or bottom of every post in Trellis Core and the included Bamboo, Birch, and Wisteria child themes. \n","excerpt":"Post Meta is information that can appear at the top or bottom of every …","ref":"/docsytrellis/advanced-topics/post-meta-output/","tags":["post meta"],"title":"Post Meta Output"},{"body":"Trellis Settings provides options that a publisher can change to alter a theme’s behavior or to perform maintenance functions. Not all settings may be available in a child theme. Some require the theme developer to specifically add support.\nAlso, if you choose to create new or additional templates (or create an entirely new CSS stylesheet), it’s up to you to connect the Trellis Settings options to elements in your theme.\nUsing Settings in a Child Theme The Usage column in the table below describes how a setting is incorporated into a child theme. Some settings are enabled via WordPress’ theme support function; some are accessed via CSS variables; others require adding code to child theme templates; and some require a combination of these methods.\nWhile it’s possible to read the settings programmatically (and then perform an action on them), this page focuses on explaining how the settings are incorporated in the Trellis Core templates.\nTheme Support To enable a feature via WordPress’ theme support function, include the following code in the child theme’s functions.php file at the end of the mv_trellis_child_set_options() function:\nadd_theme_support('{parameter}');  Note If multiple settings use the same theme support parameter, they will all become visible in Trellis Settings when enabled.  For example, if adding support for the Background Accent Color setting, the code would look similar to:\nfunction mv_trellis_child_set_options() { $child_version = '{your-child-version}'; \\Mediavine\\Trellis\\Options::set_multiple( [ 'child_name' =\u003e '{trellis-child-theme-name}', 'child_version' =\u003e $child_version, 'child_css' =\u003e get_stylesheet_directory_uri() . \"/assets/index.$child_version.css\", 'child_js' =\u003e get_stylesheet_directory_uri() . \"/assets/index.$child_version.js\", ] ); /** add theme support for background accent color */ add_theme_support('mv_trellis_background_accent_color'); } Multiple add_theme_support() methods can be added to the function, if needed.\nUsing Trellis CSS Variables Trellis’ default CSS stylesheet incorporates all the settings shown in the table. If you want to make use of a setting color or font in a different part of your theme, you’ll need to reference a Trellis CSS variable.\nImportant Do not redeclare any Trellis CSS variables. Doing so will break Trellis functionality.  The syntax to use a CSS variable is:\nvar({--trellis-variable-name}, {optional-fallback-value}) For example, if using the Trellis Primary Color as the background for a div element (with a fallback value of white), you would use:\ndiv { background-color: var(--mv-trellis-color-primary, #ffffff); } Adding Code to Templates Some settings will reference functions or code that needs to be included in a template file. Refer to the function, hook, filter, or named Trellis Core templates to see how they’re used.\nDisplay Settings Font Sizes and Typefaces    Setting Description Usage     Change Font Size Sets the font size for the body element. CSS variable: --mv-trellis-font-size   H1 Font Size Sets the default size for H1 headings. Add theme support and use a CSS variable.\nTheme support parameter: mv_trellis_headings_control CSS variable:\n--mv-trellis-h1-font-size   Apply H1 Size to All Headings Adjusts the sizes of H2 through H6 elements based on the H1 size. If enabled, the following conversions are used: h2 = h1 * 0.75rem h3 = h1 * 0.67rem h4 = h1 * 0.63rem h5 = h1 * 0.56rem h6 = h1 * 0.5rem Theme support parameter: mv_trellis_headings_control CSS variable:\n--mv-trellis-h2-font-size --mv-trellis-h3-font-size --mv-trellis-h4-font-size --mv-trellis-h5-font-size --mv-trellis-h6-font-size   Body Font Sets the font of the body element. Select a Web Safe font for best performance. CSS variable: —-mv-trellis-font-body   Heading Font Sets the font for all headings. Select a Web Safe font for best performance. CSS variable: —-mv-trellis-font-heading    Colors    Setting Description Usage     Primary Color Sets a main color for use in child themes. Trellis defaults to using this color for links, buttons, and other elements in the Trellis Core theme and in Birch, Wisteria, and Bamboo. CSS variable:\n--mv-trellis-color-primary   Secondary Color Sets an alternate color for use in child themes. Trellis defaults to using this color for hover effects, alternate buttons, and other secondary elements in the Trellis Core theme and in Birch, Wisteria, and Bamboo. CSS variable: --mv-trellis-color-secondary   Background Accent Color Sets the background color of some elements like page and post headers in the Trellis Core theme and in Birch and Wisteria. This setting is not used in the Bamboo child theme. Add theme support and use a CSS variable. Theme support parameter: mv_trellis_background_accent_color CSS variable: --mv-trellis-color-background-accent   H1 Color Sets the color of all H1 headings in the Trellis Core theme and in Birch, Wisteria, and Bamboo. Add theme support and use a CSS variable. Theme support parameter: mv_trellis_headings_control CSS variable: --mv-trellis-h1-font-color   Apply H1 Color to All Headings Sets the color of all H2 to H6 elements to match the H1 color setting in the Trellis Core theme and in Birch, Wisteria, and Bamboo. Add theme support and use a CSS variable. Theme support parameter: mv_trellis_headings_control CSS variable: --mv-trellis-heading-font-color    Post Meta    Setting Description Usage     Post Meta Display - Top Select which post meta to display in the post header. Options include: Comment Count, Author, Date, and Categories. If Yoast SEO is installed, you can show Yoast breadcrumbs. Refer to the article-meta-header template part in Trellis Core to see how this is implemented.   Post Meta Display - Bottom Select which post meta to display in the post footer. Options include: Author, Date, and Categories. If Yoast SEO is installed, you can show Yoast breadcrumbs. Refer to the article-meta-footer template part in Trellis Core to see how this is implemented.   Post Meta Date Display Specifies the date to display in the post header. Options include: Display Modified, Display Published, or Display Both. Output by the mv_trellis_entry_date() function. Refer to the article-meta-header or article-meta-footer template parts in Trellis Core for reference.    Images    Setting Description Usage     Site Logo Sets an image for use as a logo in the site header. If there is no site logo, the site title will be shown. In the Trellis Core theme and Bamboo and Birch, the logo will display inline with the main navigation. In Wisteria, the logo will display next to the sticky post on the homepage, and inline with the main navigation on posts and pages. Output by the mv_trellis_site_title() function. See Functions for more information.   Change logo height Sets the max logo height value that can be shown in the header.\nFull options include:- Small (50 px)- Medium (75 px)- Large (100 px)- Extra Large (150 px) CSS variable: --mv-trellis-max-logo-size   Display Featured Images Shows featured images on posts before the post content. See content-article template part in Trellis Core for reference.   Hide Featured Image from Small Screens Hides the post featured image when the visitor is using a device with a viewport width smaller than 600 px. Displaying featured images to mobile devices impacts the Largest Contentful Paint (LCP) score, one of Google’s Core Web Vitals. Adds a hide-featured-image-on-mobile class to the \u003cbody\u003e tag when post featured images are enabled but hidden on mobile.   Featured Image Size Sets the thumbnail size used for post thumbnails. Also controls the additional image sizes Trellis instructs WordPress Core to create. See Image Delivery and Optimizations in Advanced Topics for more information. Controlled by Trellis Settings.    Footer    Setting Description Usage     Hide Mediavine/Trellis footer links Removes the Mediavine/Trellis footer links. Output by the tha_footer_bottom hook. See Hooks for more information.   Footer Copyright Text Adds personalized copyright text to the footer. Supports HTML markup, including links. Output by the tha_footer_bottom hook. See Hooks for more information.    Layout    Setting Description Usage     Enable Search Bar Adds a search bar to the site header. See header template part in Trellis Core for reference.   Layout space Adjusts the margins between key layout elements like the primary content, sidebar, and widgets. The following defaults are used for new themes (Birch, Wisteria, and Bamboo use their own settings): Compact = 10 px Comfortable = 20 px CSS Variable: --mv-trellis-gutter   Display Tag Links (As of Trellis 0.17.0) Controls if tag links are output in the article footer when viewing a post. Controlled by Trellis Settings.   Article Navigation (As of Trellis 0.17.0) Controls whether a link to the next or previous post is added to the bottom of a post. Controlled by Trellis Settings.   Enable Trellis comments Sets Trellis as the commenting engine for the site. See Trellis Comments in Advanced Topics for more information. Warning: If you are using an additional third party comment tool, deactivating Trellis Comments may be necessary for compatibility. See the comments template in Trellis Core for reference.    Advanced Settings Google Analytics    Setting Description Usage     Universal Analytics Tracking ID The legacy Google Analytics UA Tracking ID. Controlled by Trellis Settings. Inserted within the \u003chead\u003e element.   Google Analytics 4 Tracking ID The newer Google Analytics 4 (GA4) Tracking ID. Controlled by Trellis Settings. Inserted within the \u003chead\u003e element.   Delay Google Analytics Load Forces a three second delay to the initial Google Analytics load. While visitors who leave your site within that time will not be tracked, site performance will improve. Controlled by Trellis Settings.    SEO    Setting Description Usage     Trellis SEO Output Enables meta descriptions, schema output (via JSON-LD), and Open Graph tags for your site. Note: This option is automatically disabled if Trellis detects Yoast, RankMath, or AIO as installed and active. It cannot be turned on while these plugins are active. For all other SEO plugins, disable this to prevent duplicate SEO data. Controlled by Trellis Settings.    Optimization    Setting Description Usage     JavaScript Optimization Enables minification of JavaScript files and defers loading for better performance. Note: If Trellis detects another plugin is performing JavaScript optimizations, it will automatically disable its own optimization functions. Recognized plugins include Autoptimize, Clearfy Cache, Jetpack, Litespeed Cache, NitroPack, SG Optimizer, W3 Total Cache, WP Fastest Cache, and WP Rocket. Controlled by Trellis Settings.   JavaScript Exclusions Matching full or partial URLs in this list are excluded from any deferment or minification performed by Trellis. Note: This setting is only visible when JavaScript Optimization is enabled. Controlled by Trellis Settings.    Permanent Actions    Setting Description Usage     Reset Settings Sets the theme back to default settings (except for the license field). Warning: This cannot be undone. Controlled by Trellis Settings.   Trellis Cache Clears the Trellis cache. Use if new Trellis features or settings are not appearing. Warning: This cannot be undone. Controlled by Trellis Settings.   Regenerate Images Regenerates all image sizes on your site. This is used if images other than your featured images are displaying at the wrong size. See How to Regenerate Your Image Sizes in the Trellis Help Center for more information. Controlled by Trellis Settings.   Rebuild Active Compatibility Plugins List Regenerates a list of active plugins that require compatibility code to work properly with Trellis. See Trellis Themes: Conflicts and Compatibilities in the Trellis Help Center for more information. Controlled by Trellis Settings.    PWA Settings    Setting Description Usage     Enable PWA Enables PWA support for your site. If enabled, it allows users to view your blog as a progressive web app on their desktop or mobile device. Controlled by Trellis Settings.   PWA Short Name Sets the display name of the app on the installed device. Warning: A Short Name is required for PWA to operate. Controlled by Trellis Settings.   Theme Color Sets the color of the URL bar on supported devices to match your site style. Controlled by Trellis Settings.   PWA Site Icon Sets the image for use as the PWA icon. Warning: A Site Icon is required for PWA to operate. Controlled by Trellis Settings.    License Settings    Setting Description Usage     Trellis License Unlocks Trellis’ full features. Visit the Mediavine Marketplace to purchase a license. Controlled by Trellis Settings.    Hooks Settings    Setting Description Usage     Add custom HTML code to the \u003chead\u003e tag Useful for Google Site verification HTML meta tags or a Pinterest domain verification HTML tag. See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by Trellis Settings. Added via thetha_head_bottom hook. See Hooks for more information.   Add custom content after the page header and menu (As of Trellis 0.17.0) This hook is useful to add anything on pages just after the header and before the content. See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by Trellis Settings. Added via the tha_content_before hook. See Hooks for more information.   Add custom content between the post heading and the post content Useful to add anything just before post content. Typically used for affiliate disclaimers and CTAs. See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by Trellis Settings. Added via the tha_aside_before_entry_content hook. See Hooks for more information.   Add custom content after the post content Useful to display anything just after the post content. Typically used for CTAs. See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by Trellis Settings. Added via the tha_content_after hook. See Hooks for more information.   Add custom HTML code to the end of the \u003cbody\u003e tag Useful to add additional scripts required by external services such as newsletters or email opt-in forms. Anything added here should not be needed at the time of the First Contentful Paint (FCP). See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by Trellis Settings. Added via the tha_body_bottom hook. See Hooks for more information.    Critical CSS Settings Settings    Setting Description Usage     Enable Critical CSS Improves your site’s performance by using Critical CSS and Non-Critical CSS files. See Critical CSS in Advanced Topics for more information. Controlled by Trellis Settings.   Purge All Critical CSS Removes all Critical CSS files for the site. New Critical CSS files are added as non-logged in users visit the site. The site’s original CSS code will be served until Critical CSS is regenerated. Controlled by Trellis Settings.    Exclusions    Setting Description Usage     Post/Page Exclusions (As of Trellis 0.17.0) Shows all posts and pages where Critical CSS has been disabled manually in the WordPress Editor. Controlled by Trellis Settings.   Force Non-Critical CSS Adds selectors to the secondary Non-Critical CSS file. Trellis creates the Non-Critical CSS file automatically. This setting is intended for compatiblity purposes. It lets publishers manually force selectors into the Non-Critical CSS file. These are typically selectors that need to be added via JavaScript after the page loads. See Critical CSS in Advanced Topics for more information. Selectors can be added programmatically via mv_trellis_css_allowlist. See Filters for more information.   Force Critical CSS Adds selectors to the primary Critical CSS file.\nTrellis creates a Critical CSS file automatically. Styles that match Critical CSS selectors are added as inline styles to the page markup that appears in the initial viewport. This setting is intended for compatibility purposes. It lets publishers manually add selectors that are not part of the initial viewport of a page. Some of these styles may be necessary to prevent layout shift or a flash of unstyled content on page load. See Critical CSS in Advanced Topics for more information. Selectors can be added programmatically via mv_trellis_css_force_keep. See Filters for more information.    What’s Next?  Get started creating a Trellis child theme Read more about Trellis Hooks Read more about Trellis Filters  ","categories":"","description":"When you activate Trellis, a new menu becomes available under Appearance in the WordPress Admin Dashboard. \n","excerpt":"When you activate Trellis, a new menu becomes available under …","ref":"/docsytrellis/getting-started/trellis-settings/","tags":["settings","critical css"],"title":"Trellis Settings"},{"body":"This document will walk you through the pieces and parts of a Trellis child theme.\nNote Trellis child themes follow the same basic structure as any WordPress child theme. You can refer to the WordPress Theme Handbook for detailed information on how child themes operate.  Child Theme File Structure  Create a new folder for your child theme in your WordPress themes folder. Create the following folder structure inside of your child theme folder:     Folder Subfolders Description     assets (optional) A place to store your child theme’s images, CSS, and JavaScript files.   template-parts article\ncontent\nheader A location to store parts of templates that will be used when serving content. Trellis will cache the location of these template parts to serve content faster.    Add a 1200 x 900 px screenshot.png file to your child theme folder. This screenshot will be shown on the Appearance \u003e Themes page in your WordPress dashboard.  Add CSS Files Create a Style.css File  Create a new file called style.css in your child theme folder. Add the following code, replacing the boilerplate text with your own content:  /* Theme Name: {Your Child Theme Name} Template: mediavine-trellis Theme URI: {URL to your child theme's documentation.} Author: {Your Name or Company Name} Author URI: {URL to your personal or company website.} Description: {A short description of your child theme.} Requires at least: 5.2.0 Version: {Your Child Theme Version (e.g. 0.0.1)} Text Domain: mediavine */ The fields are used in the following ways:\n   Field Description     Theme Name The name of your child theme. This is shown on the Appearance \u003e Themes page in your WordPress dashboard and also in Theme Details.   Template The parent theme directory associated with your child theme.\nWarning: To be a Trellis child theme, this must be set to mediavine-trellis.   Theme URI A web address for more information about your theme or for documentation.   Author The name of the author or company that created the child theme. This is shown on the Theme Details page.   Author URI A web address for more information about you or the company that created the child theme.   Description A short description of the child theme. This is shown on the Theme Details page.   Requires at least The minimum WordPress version required to use the child theme. This should be no earlier than 5.2.0, as this is the oldest version of WordPress supported by Trellis.   Version The version number used to identify the iteration of your child theme.   Text Domain Used to support translations. Normally this is set to mediavine. If you use your own text domain, be sure to follow the instructions in WordPress’ Child Theme Internationalization documentation.    Add Custom CSS Files You can choose to add your custom CSS to the style.css file or you can create separate CSS files for inclusion in your child theme.\nNote As a best practice, we recommend having separate CSS files that are stored in your child theme’s assets folder.  Your custom CSS file can be any name you choose, but we recommend including the child theme version number in the name. This ensures that any CSS changes you make will bust the cache whenever the child theme is upgraded (and its version number changed). You’ll define the name and location of your CSS file in your child theme’s functions.php file.\n Add a custom CSS file to your child theme’s assets folder.  wp-content/themes/my-child-theme-name/assets/ Add your child theme version to the name of your custom CSS file. For example, if your child theme’s version is 0.0.1, name your CSS file index.0.0.1.css.  Note Adding CSS selectors to your child theme’s CSS file will override any matching selectors in Trellis Core’s default CSS stylesheet. If you’d like to start from scratch, you can add code to completely disable Trellis’ default CSS styling. For more information, see Using CSS Variables in Advanced Topics.  Add a Functions.php File Your child theme’s functions.php file will hold custom functions that change how your theme behaves. It lets you enqueue your CSS stylesheet and customize your theme options.\nSet Basic Definitions  Add a functions.php file to your child theme folder. Add the following code to functions.php, replacing the boilerplate text with your own values:  \u003c?php /** Basic Definitions ** * Use mv_trellis_child_set_options() to define the child theme version and other necessary settings. . * Options::set_multiple will enqueue stylesheets and scripts. * * To learn more about functions available to Trellis child themes, see: https://mediavine.github.io/trellis-docs/reference/functions/ * To learn more about settings available to Trellis child themes, see: https://mediavine.github.io/trellis-docs/getting-started/trellis-settings/ */ function mv_trellis_child_set_options() { $child_version = '{replace with your child theme version number}'; \\Mediavine\\Trellis\\Options::set_multiple( [ 'child_name' =\u003e '{replace with your child theme name}', 'child_version' =\u003e $child_version, 'child_css' =\u003e get_stylesheet_directory_uri() . \"/assets/index.$child_version.css\", ] ); add_action( 'mv_trellis_parent_loaded', 'mv_trellis_child_set_options' ); The $child_version variable represents the version number of your child theme. We recommend defining it in a variable so that you can reuse it in other places of your child theme code.\n(Optional) Add Theme Support Options Add the following code after Options::set_multiple to allow the publisher to set accent colors and heading styles in Trellis Settings. See Trellis Settings for information on how to connect your code to the settings in your child theme.\n/** Accent Color and Headings Support ** * Use add_theme_support to use accent colors and heading options defined in Trellis Settings. */ add_theme_support( 'mv_trellis_background_accent_color' ); add_theme_support( 'mv_trellis_headings_control' ); } Create Template Files While Trellis supports the WordPress Template Hierarchy, page load time can be reduced through the use of template parts. Template parts are reusable blocks of code that can be called from different page templates. This allows them to serve up special coding for things like category templates, author templates, and more. Think of template parts as more sophisticated versions of get_header() and get_footer().\nWordPress has a built-in function for template parts, but Trellis offers a faster function called mv_trellis_get_template_part(). This custom function caches your template parts and serves them much faster than WordPress’ built-in function. You can see it in use in the Trellis Core and Bamboo, Birch, and Wisteria child themes. See Functions in Reference for more information.\nBuilt-In Trellis Core Templates Any template placed in your child-theme’s folder will follow the WordPress Template Hierarchy and override a template in the Trellis parent theme folder. However, we recommend using a similar structure of template parts for your own theme files in order to get the biggest speed boost.\nTrellis Core provides the following templates out of the box:\n comments.php footer.php header.php index.php page-full-width.php searchform.php sidebar.php template-parts (directory)  article (directory)  article-excerpt.php article-meta-footer.php article-meta-head.php article-navigation.php   content (directory)  content-article.php content-none.php content.php   header (directory)  header-content-author.php header-content-front-page.php header-content-home.php header-content-singular.php header-content.php header-featured.php header.php navigation.php search-form.php      Bamboo, Birch, and Wisteria Child Themes If you’ve installed the Bamboo, Birch, and Wisteria child themes, you’ll find that each one builds upon Trellis Core’s default templates and stylesheets. Some of the child themes have support for accent colors and heading settings while others don’t. Be sure to activate these child themes and look through them for ideas on how to create your own child theme.\nTrellis Template Markup Trellis also receives higher SEO scores by using semantic HTML markup in all of its templates. While there’s traditional markup mixed in, large blocks are coded with semantic HTML. Semantic HTML makes it easier for Google’s bots to index your site and also increases web page accessibility.\nHere’s a resource to help you understand Trellis’ default markup:\n Trellis Visual Markup Guide  What’s Next?  Learn how to test your Trellis child theme Read more about Trellis Hooks Read more about Trellis Filters  ","categories":"","description":"Trellis Core provides a solid foundation of templates and stylesheets for fast WordPress sites. However, to create a truly unique experience you’ll want to make a child theme.\n","excerpt":"Trellis Core provides a solid foundation of templates and stylesheets …","ref":"/docsytrellis/getting-started/creating-your-child-theme/","tags":"","title":"Creating Your Child Theme"},{"body":"Here’s a short list of Frequently Asked Questions about Trellis. If your question isn’t answered here, check the Trellis Framework FAQ in the Trellis Help Center, which is targeted more towards publishers.\n   Question Answer     Where do I get Trellis? Trellis is available for download in the Mediavine Marketplace.   Is Trellis free? No, Trellis requires an annual subscription to use its features. A subscription includes access to Mediavine APIs that perform image processing and Critical CSS generation.\nTo see current Trellis pricing, visit the Mediavine Marketplace.   Can I use third-party theme builders with Trellis? No, Trellis is not compatible with third-party theme builders. While some may work, they will defeat many of the built-in optimizations Trellis provides.   How do I get support for Trellis? Child theme developers can use this site for information on modifying or creating child themes. For additional information, visit the main Trellis Help Center.   Is Trellis compatible with [insert plugin name]? A compatibility article is available at Trellis Themes: Conflicts and Compatibilities in the Trellis Help Center.   Does Trellis provide built-in SEO support? Trellis does provide meta descriptions, schema output (via JSON-LD), and Open Graph tags for your site.\nTrellis will automatically disable its SEO functionality if it detects Yoast, RankMath, or AIO as installed and active.\nIf you’d prefer to use a different SEO plugin, be sure to disable Trellis SEO by going to Appearance \u003e Mediavine Trellis and clicking on Advanced. The SEO section lets you disable SEO functionality.    ","categories":"","description":"","excerpt":"Here’s a short list of Frequently Asked Questions about Trellis. If …","ref":"/docsytrellis/faqs/","tags":"","title":"FAQ"},{"body":"By using CSS variables in your own child theme, you can make it easy for publishers to update CSS styles in Trellis Settings.\nHow CSS Variables Work Trellis’ default CSS stylesheet incorporates all of the settings shown in the table below. If you want to make use of a setting color or font in a different part of your theme, you’ll need to reference a Trellis CSS variable.\nImportant Do not redeclare any Trellis CSS variables. Doing so will break Trellis functionality.  The syntax to use a CSS variable is:\nvar({--trellis-variable-name}, {optional-fallback-value}) For example, if using the Trellis Primary Color as the background for a div element (with a fallback value of white), you would use:\ndiv { background-color: var(--mv-trellis-color-primary, #ffffff); }  Note A Sass mixin is included in Trellis Core and Mediavine child themes. This mixin will provide fallback for browsers that don’t support CSS variables. For a complete list of browsers that support CSS variables, see https://caniuse.com/mdn-css_properties_custom-property_var.  List of Trellis CSS Variables This table represents a full list of CSS variables available in Trellis.\n   CSS Variable Description Default Value     --mv-trellis-color-heading Applied to the Site Title text when there’s not a logo. #243746   --mv-trellis-color-link Applied to:\n- Link text default color\n- Link icon default fill color\n- Button default background color\nUses --mv-trellis-color-primary. #275f62   --mv-trellis-color-link-hover Applied to:\n- Link text default hover color\n- Link icon default hover fill cover\n- Button default hover background color\nUses --mv-trellis-color-secondary. No Default   --mv-trellis-color-primary Sets a main color for use in child themes. Trellis defaults to using this color for links, buttons, and other elements in the Trellis Core theme and in Birch, Wisteria, and Bamboo.\nUses Primary Color from Trellis Settings. No Default   --mv-trellis-color-secondary Sets an alternate color for use in child themes. Trellis defaults to using this color for hover effects, alternate buttons, and other secondary elements in the Trellis Core theme and in Birch, Wisteria, and Bamboo.\nUses Secondary Color from Trellis Settings. No Default   --mv-trellis-color-background-accent Sets the background color of some elements like page and post headers in the Trellis Core theme and in Birch and Wisteria. This setting is not used in the Bamboo child theme.\nTheme support parameter:\nmv_trellis_background_accent_color #fafafa   --mv-trellis-font-body Sets the font of the body element. Select a Web Safe font for best performance. System Default (Web Safe)   --mv-trellis-font-heading Sets the font for all headings. Select a Web Safe font for best performance. System Default (Web Safe)   --mv-trellis-font-size Sets the font size for the body element. Medium (18px)   --mv-trellis-font-size-ex-sm A font size derived from –mv-trellis-font-size. –mv-trellis-font-size * 0.667   --mv-trellis-font-size-lg A font size derived from –mv-trellis-font-size. –mv-trellis-font-size * 1.125   --mv-trellis-font-size-sm A font size derived from –mv-trellis-font-size. –mv-trellis-font-size * 0.875   --mv-trellis-gutter Adjusts the margins between key layout elements like the primary content, sidebar, and widgets. The following defaults are used:\nCompact = 10 px\nComfortable = 20 px Comfortable   --mv-trellis-gutter-double A gutter value derived from –mv-trellis-gutter. –mv-trellis-gutter * 2   --mv-trellis-gutter-large A gutter value derived from –mv-trellis-gutter. –mv-trellis-gutter * 2.5   --mv-trellis-gutter-small A gutter value derived from –mv-trellis-gutter. floor(–mv-trellis-gutter/2)   --mv-trellis-h1-font-color Sets the color of all H1 headings in the Trellis Core theme and Bamboo, Birch, and Wisteria.\nTheme support parameter:\nmv_trellis_headings_control Each theme has its own defaults.   --mv-trellis-h1-font-size Sets the default size for H1 headings.\nFull options include:\n- Small: 24px\n- Medium: 36px\n- Large: 42px\n- X-Large: 56px\nTheme support parameter: mv_trellis_headings_control Each theme has its own defaults.   --mv-trellis-h2-font-size Adjusts the size of H2 elements based on the H1 size.\nTheme support parameter: mv_trellis_headings_control\nNote: Only output if “Apply H1 Size to All Headings” in Trellis Settings is enabled. –mv-trellis-h1-font-size * 0.75 (rem)   --mv-trellis-h3-font-size Adjusts the size of H3 elements based on the H1 size.\nTheme support parameter: mv_trellis_headings_control\nNote: Only output if “Apply H1 Size to All Headings” in Trellis Settings is enabled. –mv-trellis-h1-font-size * 0.67 (rem)   --mv-trellis-h4-font-size Adjusts the size of H4 elements based on the H1 size.\nTheme support parameter: mv_trellis_headings_control\nNote: Only output if “Apply H1 Size to All Headings” in Trellis Settings is enabled. –mv-trellis-h1-font-size * 0.63 (rem)   --mv-trellis-h5-font-size Adjusts the size of H5 elements based on the H1 size.\nTheme support parameter: mv_trellis_headings_control\nNote: Only output if “Apply H1 Size to All Headings” in Trellis Settings is enabled. –mv-trellis-h1-font-size * 0.56 (rem)   --mv-trellis-h6-font-size Adjusts the size of H6 elements based on the H1 size.\nTheme support parameter: mv_trellis_headings_control\nNote: Only output if “Apply H1 Size to All Headings” in Trellis Settings is enabled. –mv-trellis-h1-font-size * 0.5 (rem)   --mv-trellis-heading-font-color Sets the color of all H2 to H6 elements to match the H1 color setting in the Trellis Core theme and Bamboo, Birch, and Wisteria.\nTheme support parameter: mv_trellis_headings_control Each theme has its own defaults.   --mv-trellis-max-logo-size Sets the max logo height value that can be shown in the header.\nFull options include:\n- Small (50px)\n- Medium (75px)\n- Large (100px)\n- Extra Large (150px) Medium (75px)    Disabling All Trellis CSS Styling If you’d like to start from scratch and discard all default Trellis Core CSS styling, add the following code in your functions.php file:\nImportant Disabling the default Trellis CSS styles will require you to define all layout and styling in your own CSS files.  /** Turn Off Trellis Parent Theme CSS ** * Use add_filter to remove all Trellis parent theme CSS definitions. */ add_filter( 'mv_trellis_enqueue_main_style', '__return_false' ); ","categories":"","description":"Trellis uses CSS variables to control how font, color, and layout spacing settings are applied to the Trellis Core and Bamboo, Birch, and Wisteria child themes. \n","excerpt":"Trellis uses CSS variables to control how font, color, and layout …","ref":"/docsytrellis/advanced-topics/using-css-variables/","tags":["css variables"],"title":"Using CSS Variables"},{"body":"Use this guide to see which hooks appear within or before major HTML elements.\nNote These diagrams show the hooks as coded in the Trellis Core theme. Other themes (such as Bamboo, Birch, and Wisteria) may vary from these diagrams.  Helpful Information  Hooks are fired within custom Trellis functions. THA hooks are shown in the diagrams with the calling Mediavine function in parentheses. Not all available Trellis hooks are displayed in the diagrams. See Hooks for a complete list. Top-level elements such as \u003chtml\u003e, \u003chead\u003e, and \u003cbody\u003e are not shown in the diagrams. Hooks that apply to those areas are shown at the top of Header Hooks. Semantic markup blocks are shown in color and match what is shown in the Visual Markup Guide.  Diagrams Header Area  Header Hooks  Content Area  Content-Feed Page Hooks Content-Full-Width Page Hooks Content-Latest Posts Page Hooks Content-Single Page Hooks  Footer Area  Footer Hooks  What’s Next?  See the Visual Markup Guide to see Trellis Core page layouts without the hooks Read about all available Trellis Hooks  ","categories":"","description":"The Visual Hooks Guide contains diagrams showing where Trellis hooks appear within the Trellis Core templates.\n","excerpt":"The Visual Hooks Guide contains diagrams showing where Trellis hooks …","ref":"/docsytrellis/reference/visual-hooks-guide/","tags":"","title":"Visual Hooks Guide"},{"body":"Changelog 1.0.2 (04/11/2023)  FIX: Prevents layout shift when logo loads in header  1.0.1 (11/09/2022)  FIX: Fixes issue where large horizontal logos were constraining the header navigation area FIX: Fixes CLS issue after Critical CSS is generated  1.0.0 (10/26/2022)  FEATURE: Adds theme support for “Hide page title” setting to Wisteria FIX: Prevents issue where Grow.me carousel and sticky sidebar would overlap FIX: Title before .trellis-comments fixed for html entities like \u0026 FIX: Resolves Logo CLS FIX: Solves desktop sidescroll caused by sub-menu of final menu-item FIX: CLS caused by the logo on desktop is resolved FIX: Fix CLS caused by .header-container FIX: Resolve css validation errors FIX: For better mobile results, make .search-field width a calculation FIX: Ensures links are bold when anchor tag is child of a strong or b tag FIX: Removes redundant layout setting notice FIX: Prevents 2nd-level submenu overlap FIX: Sets max-width for post tags FIX: Fixes WP Block buttons so they have vertical margin when stacked FIX: Centers mobile logo when search icon is disabled CHANGE: Updates Theme URI to the Mediavine Marketplace  0.8.0 (08/23/2021)  FEATURE: Transitional code added for backwards compatibility until Trellis 0.14.x is released FEATURE: Sidebar breakpoint is now added to the local model for use by the web wrapper FEATURE: Implement Trellis Heading Settings from Trellis Core FEATURE: New Post Meta Settings that allow for choice of meta placement on posts FIX: Hide widgets when toggled for mobile/tablet FIX: Critical CSS Status Bar now gives a status FIX: Updates the sizes attribute for images to be more specific for Trellis based themes FIX: Grow Social Sidebar is now accounted for in styling FIX: Updated HTML output to be more semantic FIX: Hero Image on home page COSMETIC: Update Web Stories archive page style COSMETIC: Many style updates for the semantic HTML changes COSMETIC: Removed “Cozy” option from Layout Size Trellis Setting COSMETIC: Changed desktop menu submenu pop out direction for last two menu items COSMETIC: Removed lines from mobile menu  0.7.0 (03/08/2021)  FEATURE: Background accent color setting added FIX: Main nav style being applied to footer widget menu FIX: Full page selector refined to fix padding between sidebar and content COSMETIC: Add form styling COSMETIC: Move logo up into header on home tablet/mobile COSMETIC: Above the fold for mobile/tablet: tighten meta area COSMETIC: Above the fold for mobile/tablet: tighten logo area set to 75px high COSMETIC: Change comments to overflow-x: auto  0.6.0 (11/24/2020)  FEATURE: Add mobile submenu toggle actions FIX: Sidebar selector name fixed. FIX: Right margin fixed on desktop. FIX: Search-toggle separated from search-form so search-toggle JS works again FIX: Full width pages and remove gutters over 1200px FIX: Figcaption style and remove variable gutter from the top/bottom of content images FIX: Harmonize fonts on nav, title, search-field, button and select  0.5.1 (11/16/2020)  FIX: Tiny phone gutters reduced to 10px to accommodate ads in 320px display FIX: Menu navigation carrot removed on desktop menu FIX: Article meta and titles wrap on desktop FIX: Fixes layout of archive pages when hooked content is added  0.5.0 (11/16/2020)  FIX: remove full width mix-in FIX: Full page audit. Sidebar set to 360px and ads always 300px. FIX: Set taxonomy description to 100% width  0.4.0 (10/27/2020)  FIX: remove erroneous border-radius on #content img FIX: Set .archive-heading bottom-margin to zero. FIX: SCSS variables within calc() are now replaced properly FIX: over ride mixin for menu background on widgets FIX: removed lazyload class from primary sidebar container COSMETIC: update the screenshot.png COSMETIC: Set category selector to full width  0.3.0 (05/06/2020)  COSMETIC: many style updates  0.2.0 (04/14/2020)  FEATURE: added mv_trellis_footer hook for handling the footer area FEATURE: added mv_trellis_before_footer and mv_trellis_after_footer hooks to the footer for before and after the footer area FIX: sub-menu UI FIX: site meta description will only be output when Yoast SEO is not active FIX: added theme detail section to style.css FIX: function to add the theme name to the body class list has been moved to Trellis COSMETIC: many style updates  0.1.0 (11/07/2019)  Initial release  ","categories":"","description":"A list of changes made to the Wisteria child theme.\n","excerpt":"A list of changes made to the Wisteria child theme.\n","ref":"/docsytrellis/changelogs/wisteria/","tags":"","title":"Wisteria"},{"body":"The reference section provides detailed information on the filters, functions, and hooks provided by the Trellis framework.\nWhat’s in This Section? ","categories":"","description":"","excerpt":"The reference section provides detailed information on the filters, …","ref":"/docsytrellis/reference/","tags":"","title":"Reference"},{"body":"As a web developer, you may already be familiar with the concept of testing your code prior to launch. When developing a child theme for Trellis, this step is especially important. Trellis’ caching, optimizations, and other features make testing vital to ensure speed boosts and improvements to Core Web Vitals scores work as intended.\nThe WordPress Codex has an extensive list of steps you can take to make sure your child theme is functioning properly. See the Theme Testing section of the Codex for more information.\nTesting on a Staging Server You should always test your child theme on a staging site prior to making it live. This will let you make sure things are working properly without impacting your production site.\nHere are some important things to know if you’re testing your Trellis child theme on a local environment or in a sandbox with a strict firewall configuration:\n Critical CSS requires an SSL certificate and a firewall configured to let Trellis communicate with the Trellis Services API hosted by Mediavine. See Troubleshooting for more information on bots and firewall issues if you receive Critical CSS errors. You may experience license issues on a staging site. Unless you’ve purchased Trellis for multiple sites, remember that a Trellis license defaults to only one WordPress installation. If needed, you can move a Trellis license from one site to another. See Troubleshooting for more information if you experience license errors.  For more information on Trellis and staging sites, see Working With Trellis on a Staging Site in our Help Center.\nTheme Unit Testing The WordPress Theme Unit Test Data is a special import designed to simulate a site that’s been online for several years. The import file creates a number of pages, different types of posts, several menu items, and more. Make use of this test data to ensure your child theme behaves as expected.\nImport the WordPress Theme Test  Download the theme test data from GitHub. Go to Tools \u003e Import WordPress. Click Run Importer.  Note You may need to install the WordPress Importer first. An Install link will let you install the importer before you run it.  Click Choose File and select the themeunittestdata.wordpress.xml file. Click Upload File and Import. Select Authors from your site for the imported data (you can choose to create new authors during import). Select Download and import file attachments to make sure images and other attachments are also imported. Click Submit. Review the different pages and posts to see how the imported content renders.  Testing Site Speed While the other parts of this document focus on steps to take prior to launch, this part advises you to not do something: testing site speed.\nIt’s a natural thing to do when switching to a new framework that promises you increased speed and Core Web Vitals scores. But while you may be tempted to test your site’s performance ahead of time, keep these things in mind:\n If you’re using a staging site, speed tests in Google PageSpeed Insights (or other tools) may not give you accurate results. Trellis’ biggest impact to site speed is through the use of Critical CSS. If your site can’t connect to the Trellis Services API (and vice versa), then Critical CSS will be disabled. Also, Critical CSS files are only generated when a non-logged user visits a page.  When you’re ready to test your site speed, only do so after a reasonable amount of time. Mediavine recommends waiting twenty-four hours after you’ve activated Trellis on your production site, but it could be shorter or longer depending on your traffic. Make sure to give your site time for visitors to trigger Critical CSS generation on the most visited pages.\nWhat’s Next?  Read more about Trellis Hooks Read more about Trellis Filters  ","categories":"","description":"Learn best practices on how to test your Trellis child theme. \n","excerpt":"Learn best practices on how to test your Trellis child theme. \n","ref":"/docsytrellis/getting-started/testing-your-child-theme/","tags":"","title":"Testing Your Child Theme"},{"body":"Changelog 0.7.1 (04/25/2023)  FIXED: Added a comma to the logo source tag’s srcset attribute. The first image URL in the srcset was missing a comma, which could result in a blurred image.  0.7.0 (04/03/2023)  NEW: Trellis Images 0.7.0 now requires a minimum version of Trellis 0.18.0 and a minimum PHP version of 7.3 to run. NEW: Swapping legacy images for WebP versions is now handled by Trellis Images. Previously, Trellis Images only produced new WebP images while Trellis Core handled the swapping functions. NEW: Added a new mv_trellis_images_stop_process filter to terminate image processing. NEW: Added a link to the Mediavine Marketplace in the Trellis Images plugin page. CHANGED: Added the ability to serve a WebP version of a specific image size if it already exists. Previously, all image sizes had to be converted before a WebP version was served. FIXED: Added code to exclude WebP processing for images hosted on a CloudFlare CDN (these are recognized by cdn-cgi in the URL). Previously, images would appear broken after processing due to how CloudFlare operates.  0.6.0 (05/26/2021)  FEATURE: Trellis Images no longer uses transients for throttling. FIX: A logo with an optimized src but no srcset will now be swapped to use its webp version.  0.5.0 (04/26/2021)  FEATURE: Disabling the plugin will also now clear the optimization queue from the WordPress event cron. FIX: If an image in the queue has already been optimized, the queue will be cleared automatically. This prevents fixated (“stuck”) optimization requests. (#133)  0.4.5 (04/26/2021)  FEATURE: Added a workaround where disabling \u0026 re-enabling the plugin will clear “stuck” throttle on image optimization request speed. (#115) FIX: A technically invalid URL in an image srcset attribute could cause no image to display on mobile. (#121) FIX: A missing or broken image srcset attribute was sometimes causing an on-page warning. (#119)  0.4.4 (04/26/2021)  FIX: Fatal error if logo had an empty HTML attribute. (#114)  0.4.3 (09/30/2020)  FIX: When optimization queue was locked, optimized images would not load on front end. (#100)  0.4.1 (09/30/2020)  FIX: Add a conservative queuing limit \u0026 throttling system for image processing. REMOVE: Disable jp2 image generation.  0.4.0 (09/30/2020)  FEATURE: Images will now be optimized asynchronously via cron. Both jp2 and webp variants will be generated for every image currently used in each post and substituted at pageload by the Trellis theme. IMPORTANT: It may take several minutes to process a new article. On sites with caching, the image optimizations would not be seen until the next cache break afterward. When initially enabling this plugin, it may take many hours for it to update the entire site (to avoid overloading the server or causing timeouts). It should (on average) naturally prioritize articles with higher traffic. FEATURE: Image URLs contained in the srcset will now be processed in the optimizer the same as image src. FEATURE: Images will only be marked as optimized for the frontend (with the data-{type} attribute) if all the srcset URLs have also been parsed. FEATURE: Add srcset support for logo optimization using webp and j2. FIX: Security improvements for API connections and file system use. FIX: Move the API timeout to a constant and decrease it from 3 seconds to 1 second. Overall worst-case scenario therefore lowers from 15 seconds (3 sec x 5 images) to 5 seconds.  0.3.1 (05/05/2020)  FIX: replace double slashes with single in the image path sent to Trellis API  0.3.0 (04/27/2020)  FEATURE: use trellis-api to fetch images  0.2.2 (03/24/2020)  FIX: Improve server compatibility  0.2.1 (01/16/2020)  FIX: link up kernl for updates  0.2.0 (01/16/2020)  FIX: Make sure we have directory permission to write to the images when checking server support FIX: Explicitly set a 200 status when returning an image  ","categories":"","description":"A list of changes made to the Trellis Images plugin.\n","excerpt":"A list of changes made to the Trellis Images plugin.\n","ref":"/docsytrellis/changelogs/trellis-images/","tags":"","title":"Trellis Images"},{"body":"Use this guide to see how major block elements are arranged and where class attributes are applied.\nNote These markup diagrams show the layout and classes applied from the Trellis Core theme. Other themes (such as Bamboo, Birch, and Wisteria) may vary from these diagrams.  Helpful Information  Semantic elements such as \u003cheader\u003e, \u003cmain\u003e, \u003carticle\u003e, \u003caside\u003e, and \u003cfooter\u003e have colors applied. Top-level elements such as \u003chtml\u003e, \u003chead\u003e, and \u003cbody\u003e are not shown. All of the markup in the diagrams are contained within the \u003cbody\u003e element.  Diagrams Click on a link to view the diagram.\n Feed Page (Category/Archive) Full-Width Page Home-Latest Posts Page Single Page/Post  What’s Next?  See the Visual Hooks Guide to see where Trellis hooks appear within page layouts  ","categories":"","description":"The Visual Markup Guide contains diagrams showing how Trellis Core templates render pages in a WordPress site.  \n","excerpt":"The Visual Markup Guide contains diagrams showing how Trellis Core …","ref":"/docsytrellis/reference/visual-markup-guide/","tags":"","title":"Visual Markup Guide"},{"body":"See a list of new features, changes, or fixes to the Trellis framework, child themes, or the Trellis Images plugin.\nWhat’s in This Section? ","categories":"","description":"","excerpt":"See a list of new features, changes, or fixes to the Trellis …","ref":"/docsytrellis/changelogs/","tags":"","title":"Changelogs"},{"body":"Trellis defers the loading of the remaining comments (which can be a huge part of page markup) until they’re actually needed.\nEnabling Trellis Comments Trellis Comments are enabled by default. Publishers can access the setting that controls them by going to Appearance \u003e Mediavine Trellis and clicking on Display. The toggle is available in the Layout section.\nHow Trellis Comments Work The first five top-level comments on a post are server-rendered via the WordPress REST API. A Preact app then modifies a div constructed by Trellis' class-comments.php file. Trellis then populates these comments with extra data and user interface elements.\nNote The class-comments.php file can be found in mediavine-trellis/inc/classes/class-comments.php. Markup for the comments is found in the mediavine-trellis/comments.php template.  Finally, Trellis fetches all comments for the post that are stored in the component state. When a site visitor requests more comments, no additional REST requests are made.\nCompatibility Issues When Trellis Comments is enabled, comments are submitted via the WordPress REST API. This can cause conflicts with third-party plugins that add additional fields (such as ratings) to a post’s comments field. Most plugins save data via the form submission, not an API call, which can cause issues.\nTrellis attempts to mitigate any problems by saving each field in the comment form as a piece of comment metadata. However, when a comment plugin uses a different name for the form field than it does the meta key, there will be a problem.\nIf you plan on using additional comment plugins with your Trellis child theme, be sure to test them. If there are conflicts, you may need to disable Trellis Comments entirely. See Trellis Themes: Conflicts and Compatibilities in the Help Center for information on known plugins that don’t work well with Trellis.\nUseful Filters The following filters can be used in Trellis child theme code for comments. For additional filters and functions, see the Reference section.\n mvt_requires_default_wp_fields mv_trellis_comments_template  ","categories":"","description":"Trellis offers a comments feature that improves site performance by rendering only the first five top-level comments of a post. \n","excerpt":"Trellis offers a comments feature that improves site performance by …","ref":"/docsytrellis/advanced-topics/trellis-comments/","tags":["comments"],"title":"Trellis Comments"},{"body":"Visitors Unable to See CSS Changes When Critical CSS is enabled, Trellis will audit the CSS files for your website. When a non-logged in user visits a page, Trellis generates a Critical CSS file and a Non-Critical CSS file. These Critical CSS files are cached, and so visitors may not immediately see any styling changes that are made until the Critical CSS files are regenerated.\nNote When a WordPress user is logged in to your site, they will always see the originally coded CSS styling for your pages. Only non-logged in users are served Critical CSS.  Steps to Troubleshoot  Log in to WordPress and see if your CSS styling is appearing on the page. Logged in users are always served the page’s original CSS files. If the styling is not appearing, you may have issues with how you’ve coded your CSS, or a different caching plugin you use might be causing the problem. Clear any other caching plugins and try again. While logged in, visit the page and check the Critical CSS status in the admin bar. Trellis will tell you if it is regenerating the Critical CSS files or if there was an error during processing.   If the status is Processing, come back to the page later to see if its status has changed to Success. You can then test the page by viewing it while not logged in. For an explanation of all Critical CSS Statuses, see Critical CSS in Advanced Topics. If the status is Success but your visitors are still not seeing the CSS changes, try a hard refresh of the page or clearing your browser cache to see if the style changes appear. If the issue persists, try deleting the Critical CSS file for the page. You can do this by logging in to WordPress, visiting the page, and selecting Manage Trellis JS/CSS Options \u003e Purge Page CSS in the admin bar. Once the page’s Critical CSS status is Success, log out of WordPress and visit the page again.  Critical CSS Errors on Pages The Critical CSS status in the admin bar shows an Error status if Trellis has difficulty parsing the page’s CSS files.\nSteps to Troubleshoot Run your page’s CSS through a CSS validator. It could be that something in the CSS file is causing problems. You can disable a single page’s Critical CSS by calling up the page or post for editing and doing one of the following:\n If using the Block Editor, click on the Trellis icon and select Disable Critical CSS. Then run the page through a CSS validator. If using the Classic Editor, go to the Trellis panel at the bottom and select Disable Critical CSS. Then run the page through a CSS validator.  REST API Error Trellis generates Critical CSS files by connecting to the Trellis Services API hosted by Mediavine. If your Trellis instance is having trouble connecting to the Trellis Services API, you will see an error in Trellis Settings. Critical CSS will be disabled for your entire site until the Trellis Services API can be reached and can communicate with your Trellis instance.\nImportant  If developing or testing with Trellis on your personal workstation (using an environment such as Local or MAMP), it is normal to see a REST API error. An SSL certificate must be present and your URL public to let your Trellis instance connect to the Trellis Services API. Test your instance in an online environment before taking it live to ensure Trellis can connect to the Trellis Services API. If using an online staging site or sandbox, you might also encounter REST API errors since these environments might have limited access to outside services. Check the environment’s firewall policies (explained below) to make sure Trellis can connect to the Trellis Services API.   Steps to Troubleshoot If you are working with your site online and still see a REST API error, follow these steps:\n Go to Appearance \u003e Mediavine Trellis and click on Advanced. Go to the Permanent Actions section and click the Clear button for the Trellis Cache. It could be that something in the Trellis Cache is preventing access to the Trellis Services API. Check whether you have any bot blocking or firewall plugins loaded in your WordPress installation. Plugins such as WordFence, Titan Anti-Spam, and iThemes Security have been known to cause issues connecting with the Trellis Services API.  For WordFence and Titan Anti-Spam: Set the Firewall settings to Learning Mode. For iThemes Security: Make sure the REST API option is Set to Default Access.   Check with your hosting provider to see if your server has bot blocking or firewall settings enabled. If so, provide your host with the information below and ask them to add the Trellis Services API to their firewall’s allowlist.     Firewall Setting Value     X-MV-Trellis-Services trellis-services   User-Agent Trellis-Services    Trellis Features Are Grayed Out (License Errors) If you go to Appearance \u003e Mediavine Trellis and see that some features are grayed out, it could mean that your Trellis license is not installed, you have exceeded the number of sites allowed for your license, or your license has expired.\nSteps to Troubleshoot  Go to Appearance \u003e Mediavine Trellis and click on License. You can see if your license is installed or showing any errors. If you have a license entered, click the Recheck License button to force a validation. Your Trellis license is designed to work on just one site (unless you’ve purchase a multi-site license). This means that you may run into issues if you try to add your license to both a staging site and your production site. If you’re only developing a single site, deactivate the license from your staging site, push your site to a live server, then add your license to the live site.  Core Web Vitals Issues When a Trellis site goes live, pages must first be visited by non-logged in users to trigger Trellis' optimizations. You can do this manually by visiting pages in Incognito mode and then checking if their Critical CSS status changes to Success. You should not test site speed until Critical CSS files are generated, as they provide a big boost.\nSteps to Troubleshoot  In Incognito mode in your browser, test a post to give you a better idea of what your readers are experiencing. This is the best method for getting more accurate speed test results. Check the Critical CSS status for any pages with low scores. Make sure that the Critical CSS status is Success. See Critical CSS in Advanced Topics for more information on Critical CSS statuses. For an extensive list of troubleshooting steps, see Core Web Vitals with Trellis in the Help Center.  ","categories":"","description":"If you’re having trouble using Trellis’ features, learn more about some common situations and how to troubleshoot them. \n","excerpt":"If you’re having trouble using Trellis’ features, learn more about …","ref":"/docsytrellis/getting-started/troubleshooting/","tags":["critical css","troubleshooting"],"title":"Troubleshooting"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/comments/","tags":"","title":"comments"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/critical-css/","tags":"","title":"critical css"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/css-variables/","tags":"","title":"css variables"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/filters/","tags":"","title":"filters"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/image-sizes/","tags":"","title":"image sizes"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/lazy-loading/","tags":"","title":"lazy loading"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/post-meta/","tags":"","title":"post meta"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/settings/","tags":"","title":"settings"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/troubleshooting/","tags":"","title":"troubleshooting"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/webp/","tags":"","title":"WebP"}]