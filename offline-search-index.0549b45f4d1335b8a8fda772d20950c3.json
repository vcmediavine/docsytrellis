[{"body":"Before You Begin    Determine your development environment: You can choose to develop your child theme on your local computer or in a hosted environment that’s running WordPress. When developing on a local computer, Critical CSS and REST API warnings might appear, depending on your configuration. See the SSL certificate item below for more information.\n  Check your WordPress and PHP versions: To install Trellis, you must be using WordPress 5.2 or higher and have PHP 7.2 installed.\n  (Optional for development) Install an SSL certificate: An SSL certificate allows Trellis to create optimized CSS files for faster performance. If you don’t have an SSL certificate installed, you’ll see a Critical CSS error in the WP Dashboard and in Trellis Settings. You can ignore this warning while developing your child theme.\n  Purchase a License: Go to the Mediavine Marketplace to purchase a Trellis license and download the installation files.\n    Install the Trellis Theme Framework  In the WordPress Admin Dashboard, go to Appearance \u003e Themes. Click Add New. Click Upload Theme. Click Choose File and select the Mediavine-Trellis ZIP file. Click Install Now. Click Activate.  Trellis is now running on your WordPress site. The Trellis Core minimally-styled templates will be used to display content.\nActivate Your Trellis License   In the WordPress Admin Dashboard, go to Appearance \u003e Mediavine Trellis.\n  Click License.\n  Enter your Trellis license in the License Code box.\n  Click Activate License.\n  You now have access to all of the Trellis Theme Framework features.\nNote If you’ve installed Trellis on an existing site with posts and images, it’s a good idea to set your Featured Image Size to match your new theme. Click Display and go to the Featured Image Size option and select the ratio you’d like to use. Then click the Regenerate Featured Images button. This will instruct WordPress to recreate your featured images on posts using the ratio you selected. See How to Regenerate Your Image Sizes in the Trellis Help Center for more information.  (Optional) Install the Trellis Images Plugin Trellis Images is a helper plugin that automatically creates a WebP version of legacy image formats and stores it in your site’s uploads folder (the original image is never altered or removed). WebP images load faster and score higher in Google’s Core Web Vitals. If you plan on using a different plugin that generates WebP images, you don’t need to install Trellis Images. Learn more about WebP images.\n In the WordPress Admin Dashboard, go to Plugins \u003e Add New. Click Upload Plugin. Click Choose File and select the Trellis Images plugin. Click Install Now. Click Activate Plugin.  (Optional) Install the Trellis Child Themes Trellis comes with three child themes: Bamboo, Birch, and Wisteria, each available as a separate installation file. When developing a new child theme, it can be useful to refer to these Mediavine-built themes to see how different Trellis features are implemented.\nNote You don’t need to install or activate a child theme to see Trellis at work. Trellis Core comes with minimally-styled templates that will show you all the options that are available. Some of the included child themes will not show all options in the Trellis Mediavine Dashboard or may include functionality specifically coded for that theme.   Click Add New. Click Upload Theme. Click Choose File and select a Trellis child theme ZIP file. Click Install Now. Click Activate.  What’s Next?  Learn about Trellis’ Changes to WordPress Get to know the available options in Trellis Settings Get started creating a Trellis child theme  ","categories":"","description":"Follow these steps to ensure a successful Trellis installation.\n","excerpt":"Follow these steps to ensure a successful Trellis installation.\n","ref":"/docsytrellis/getting-started/installing-trellis/","tags":"","title":"Installing Trellis"},{"body":"While you can use it right out of the box, Trellis’ real power comes from developers like you creating your own child themes. Use Trellis’ customizable and extensible code to make child themes catered to your specifications.\nWhat’s Included? When you purchase Trellis, you’ll get access to the following:\n The Trellis Core framework, which includes a starter theme with minimalistic styling and coded for speed and performance. It also includes a dashboard and enhancements to the WordPress admin bar so that publishers can fine-tune Trellis’ features for their content. Bamboo, Birch, and Wisteria child themes. These separately installed themes offer unique styles to cater to different types of content. Use them as the basis for your own child themes. Trellis Images, a helper plugin that automatically generates and swaps out legacy images for Google-friendly WebP versions.  What’s Next?  Learn more about Trellis’ Benefits See what Add-Ons come with Trellis  ","categories":"","description":"Trellis is a [WordPress theme framework](https://codex.wordpress.org/Theme_Frameworks) built with modern web technologies. It’s designed to boost site speed and optimize ad revenue and provides three custom-built child themes.\n","excerpt":"Trellis is a [WordPress theme …","ref":"/docsytrellis/overview/what-does-trellis-do/","tags":"","title":"What Does Trellis Do?"},{"body":"Critical CSS reduces load time by generating two optimized CSS files: one for content styling that appears in the initial viewport for a page, and another for content styling for the rest of the page. Trellis creates these files for each page of your WordPress site.\nNote In this article, a page refers to either a post or an actual page in WordPress. It’s whatever gets served to your reader when they visit your site in a browser.  How Is Critical CSS Generated?  When a page is first visited by a reader, your Trellis instance submits it to the Trellis API hosted by Mediavine (access to this service is included in your license). The page is rendered in a browser with a 1300 x 900px viewport and its CSS stylesheet is audited. Any CSS styles that affect content in this viewport are saved into a minified primary Critical CSS file. Any CSS styles that fall outside of this viewport are saved into a minified secondary Non-Critical CSS file. CSS styles that are not referenced by elements on the page are completely left out. When the Critical and Non-Critical files are complete, the Trellis API notifies your Trellis instance to download them. These files are saved into your WordPress installation (specifically the /wp-content/mvt-critical/ directory). The next time the page is visited, the Critical and Non-Critical CSS files are served to the reader.  Note The primary Critical CSS file is loaded as inline styles when the page loads. The secondary Non-Critical CSS file is loaded as an external stylesheet. This renders initial page views much more quickly, as the site includes the most important CSS (the Critical CSS styles) in the page markup.  How To Determine the Critical CSS Status of a Page When logged in, a Critical CSS Status will appear in the admin bar when you view a page on your site (See Changes to WordPress for more information). The status tells you where Trellis is in the Critical CSS generation process:\n   Status Description     Disabled Critical CSS generation has been disabled for the post or page.   Error The page encountered an error while generating the Critical CSS files. Email trellis@mediavine.com for help resolving the issue.   None The page has not attempted to generate Critical CSS yet. As of Trellis 0.16.0, a page in the Pending or Processing status will switch to None if it doesn’t receive a response from the Trellis API after two hours.   Processing The page is currently in the process of generating Critical CSS files. A request has been sent to the Trellis API, but the files haven’t been saved to the site yet.   Success The page successfully generated Critical CSS files.    Important When you visit a page while logged in, Trellis does not submit it for Critical CSS generation. Automatic generation only happens when a reader visits the page.  When Does Critical CSS Get Refreshed? Knowing that Critical CSS files are only generated when a visitor reads a page, it’s natural to wonder when Trellis will trigger an update to those files. Here are the events that prompt Critical CSS to purge its existing files:\n   Event Description     Automatic Updates Whenever Wordpress is automatically updated.   Custom functions The functions mv_trellis_purge_all_critical_css() and mv_trellis_purge_page_critical_css() will prompt a refresh of Critical CSS files. See Functions in the Reference section for more information.   Plugin changes Activating or deactivating a plugin will prompt Trellis to regenerate existing Critical CSS files.   Critical CSS commands When logged in, the Manage Trellis JS/CSS menu on the admin bar gives you options to purge Critical CSS for the current page or all pages on the site.   Sidebar widget changes If you add, remove, change position, or change settings on a sidebar widget.   Switching themes Whenever you activate Trellis or a Trellis child theme.    Trellis will continue serving existing Critical CSS files for a page until new ones have been generated and downloaded.\nIf you’ve made a significant change to your theme’s design or functionality, you may want to tell Trellis to discard all existing Critical CSS files and rebuild them from scratch. For more information on when to use Purge, please read Critical CSS in the Admin Bar in the Help Center.\nAdvanced Functionality There are instances where you might want to alter Critical CSS functionality because you intend to use your child-theme with other plugins. You might also use JavaScript to alter the styling of page elements after page load. In these scenarios, Critical CSS’ default functionality might give you unexpected results. For dynamically altered elements that appear in the initial viewport, you’ll want to consider adding their selectors to the Critical CSS file. If those elements appear outside of the initial viewport, add their selectors to the Non-Critical CSS file.\nAdding CSS to the Critical CSS File By default, if a CSS selector doesn’t match an element in the initial 1300 x 900px viewport of a page, it gets saved to that page’s Non-Critical CSS file. This might not be the desired behavior. It’s possible that you need some styles to be present at page load to prevent a layout shift or stop a flash of unstyled content for elements close to the viewport, but not in it.\nWhile publishers can add CSS selectors manually to the Force Keep list with the Mediavine Trellis Dashboard, you can include them programmatically by adding code to your child theme’s functions.php file.\nIn the example below, selectors are added to an array. You can add full selector names or partial names if you want to match a range of selectors. An add_filter is then used to add the matching selectors to Trellis’ Force Keep Critical CSS list. When a page gets submitted to the Trellis API, any matching CSS selectors are added to the Critical CSS file.\nImportant If you add selectors to the Force Keep Critical CSS list, be sure to check your pages in a Google Page Speed Insights report during testing. Adding selectors to the Force Keep list may cause an “Unused CSS” warning to appear if the selectors are not specific enough or only appear outside of the initial viewport.  Example\nIn the example below, a site uses WP Recipe Maker and wants all styles included in the primary Critical CSS file. Since all WP Recipe Maker styles begin with the suffix “wprm,” Trellis will add all of the matching styles.\nfunction theme_forced_styles( $selectors ) { $selectors[] = 'wprm'; return $selectors; } add_filter( 'mv_trellis_css_force_keep', 'theme_forced_styles' ); You can add multiple styles to the array by using an array_merge():\narray_merge( $selectors, [ 'wprm', 'blue' ] ) You can also add them individually by using multiple lines:\n$selectors[] = 'wprm'; $selectors[] = 'blue';  Note Styles added programmatically will not appear in the Mediavine Trellis Dashboard.  Adding CSS to the Non-Critical CSS File When creating the secondary Non-Critical CSS file, Trellis leaves out any CSS styles that don’t apply to elements on the page. This can create issues if elements are added to the page markup after the initial page load. The Trellis API does not execute JavaScript at runtime, so styles for these added elements would not be included in the Non-Critical CSS file.\nPublishers can add these style selectors manually by using the Mediavine Trellis Dashboard, but if you design your child theme to work with a third-party plugin (or are adding your own JavaScript that impacts content styling) you may want to include selectors programmatically. You do this by adding code to your child theme’s functions.php file.\nJust like with Force Keep, the example below shows a custom function where selectors are added to an array. You can add full selector names or partial names if you want to match a range of selectors. An add_filter is then used to add the matching selectors to Trellis’ Allowlist. Any CSS styles that match the expression will get added to the Non-Critical CSS file.\nExample\nIn the example below, dynamic page elements marked with “pop-up” are styled via JavaScript after page load. Specifying “pop-up” will add all matching styles.\nfunction theme_allowlist_styles( $selectors ) { $selectors[] = 'pop-up'; return $selectors; } add_filter( 'mv_trellis_css_allowlist', 'theme_allowlist_styles' ); You can add multiple styles to the array by using an array_merge():\narray_merge( $selectors, [ 'pop-up', 'red' ] ) You can also add them individually by using multiple lines:\n$selectors[] = 'pop-up'; $selectors[] = 'red';  Note Styles added programmatically will not appear in the Mediavine Trellis Dashboard.  Issues with Critical CSS If you encounter problems using Critical CSS during development, refer to Troubleshooting. If you don’t find a solution there, please contact us at trellis@mediavine.com.\n","categories":"","description":"Critical CSS is one of Trellis’ most important features and has a big impact on Google’s Core Web Vitals. \n","excerpt":"Critical CSS is one of Trellis’ most important features and has a big …","ref":"/docsytrellis/advanced-topics/critical-css/","tags":["critical css"],"title":"Critical CSS"},{"body":"These controls let the publisher purge Critical CSS and JavaScript files, add Trellis-specific widgets to areas in the child theme, define the schema for posts, and adjust theme-specific styling, as well as other Trellis settings.\nAdditions to the WordPress Admin Bar When logged in, the WordPress Admin bar will contain a menu for controlling Trellis’ JavaScript and Critical CSS features and for showing the status of Critical CSS file generation.\nManage Trellis JS/CSS Menu This menu provides options for rebuilding, resetting, and purging Critical CSS files (for the entire site or for the displayed page) and for regenerating the Trellis minified Javascript file. The specific commands are explained in the table below.\nNote The Manage Trellis JS/CSS menu will show different commands depending on if you are viewing a page or are in an admin dashboard (refer to the table below). The Critical CSS Status will only appear if you are viewing a page or post on your site.     Command Description     Purge All Critical CSS Sends a request to the Trellis Services API to rebuild the optimized CSS files for the entire site, but removes existing optimized CSS files. No optimized CSS will be served until replacement CSS files have been rebuilt. This option is useful for troubleshooting if you have a display issue appearing on your site, as removing the optimized CSS will use the site’s original CSS files for display.\nThis command is always available.   Purge Page CSS Same as Purge All Critical CSS but for the current page. This command is only available when viewing a page on your site.   Rebuild Minified JS Sends a request to the Trellis Services API to rebuild the minified JavaScript files for the entire site.\nThis command is always available.    For a more detailed explanation of the menu options, see Critical CSS in the Admin bar in the Trellis Help Center.\nCritical CSS Status When viewing pages on your site, a Critical CSS Status bar shows where Trellis is in the Critical CSS file generation process. One of the statuses in the table below will be displayed.\n   Status Description     Disabled Critical CSS generation has been disabled for the post or page.   Error The page encountered an error while generating the Critical CSS files. Email trellis@mediavine.com for help resolving the issue.   None The page has not attempted to generate Critical CSS yet. As of Trellis 0.16.0, a page in the Pending or Processing status will switch to None if it doesn’t receive a response from the Trellis API after two hours.   Pending The page has been queued for regeneration of Critical CSS.   Processing The page is currently in the process of generating Critical CSS files. A request has been sent to the Trellis API, but the files haven’t been saved to the site yet.   Success The page successfully generated Critical CSS files.    Trellis Widgets Trellis adds two new widgets to WordPress: a Mediavine Sidebar Ad Hint widget and an About Widget.\n   Widget Description     About Widget A WordPress legacy widget that displays general information about the site. Publishers can add a Title, Description, and Image.   Mediavine Sidebar Ad Hint Used for sites that display Mediavine ads. The widget controls the placement of Mediavine top sidebar ads and whether they are shown on mobile devices. For more information, see How to Move Your First Sidebar Ad in the Trellis Help Center.    Trellis Settings on the Posts/Pages Editing Screen When editing posts or pages, Trellis Settings let publishers configure individual features. In the Gutenberg editor, a new menu is added to the top toolbar. In the Classic editor, a block is shown below the content. Different options are available depending on whether the content is a post or a page.\nGutenberg Editor (Post Settings)\nClassic Editor (Post Settings)\nAvailable Settings for Posts    Setting Description     Disable on Home/RSS Feed Hides the post from the Home page and RSS feed.   Schema Type Defines the schema type of the post for SEO purposes. Options include Article, NewsArticle, and BlogPosting.   Disable Critical CSS Disables the Critical CSS feature for the post. Useful if the publisher is seeing conflicts or display issues with Critical CSS on an individual post.    Available Settings for Pages    Setting Description     Disable Critical CSS Disables the Critical CSS feature for the page. Useful if the publisher is seeing conflicts or display issues with Critical CSS on an individual page.   Hide the Home Page Title Hides the page title when set as a static home page for the site.    Mediavine Trellis Dashboard Trellis adds a Mediavine Trellis submenu to the WordPress Appearance menu. This dashboard lets publishers and developers set theme options, add a license, and control overall Trellis behavior.\nMore information is available on the Trellis Settings page, which discusses each setting and how to integrate it into Trellis child themes.\nWhat’s Next?  Get to know the available options in Trellis Settings Get started creating a Trellis child theme  ","categories":"","description":"When Trellis is activated, additional controls are added to different parts of the WordPress interface.\n","excerpt":"When Trellis is activated, additional controls are added to different …","ref":"/docsytrellis/getting-started/changes-to-wordpress/","tags":"","title":"Changes to WordPress"},{"body":"Trellis and its helper plugins can replace image generators, HTML/CSS/JavaScript optimizers, and other WordPress plugins (or it can work beside some of your favorite ones). You can refer to our Conflicts and Compatibilities article for detailed information. Here’s a summary of Trellis’ main features:\nFor Publishers  Better Core Web Vitals metrics: Trellis automates key components to raise a site’s Core Web Vitals scores. First Input Delay (FID), Cumulative Layout Shift (CLS), and Largest Contentful Paint (LCP) measurements all improve when using Trellis. Better Core Web Vitals metrics boost a site’s ranking with Google. Image size optimization: Trellis tells WordPress to generate additional image sizes that are more commonly used. Properly sized images load faster, look better, and reduce warnings in Google Page Insights. Built-in Mediavine ad integration: Functions in Trellis automate the placement and sizing of Mediavine ads. A Mediavine Sidebar Ad widget lets publishers utilize the upper sidebar ad unit, and Trellis also provides a default HTML structure for optimal desktop and sidebar ad display. Progressive Web App (PWA) support: Trellis includes the necessary pieces to offer a PWA to visitors. Sites can be installed like an app on a mobile or desktop device without a publisher paying for native app development.  For Developers  Optimized CSS: Trellis’ Critical CSS feature creates two separate, optimized CSS files: one for initial viewport content, and another for the rest. When a reader visits a page, Trellis serves the initial viewport stylesheet first—the other is loaded after, resulting in faster page rendering. Learn more about Critical CSS in our Advanced Topics section or in our Working with Critical CSS Help Center article. Service worker integration: Trellis uses service workers to cache assets in the browser, reducing the need for network round trips. Better SEO with JSON-LD: Trellis generates structured data for search engines in the JSON-LD format (preferred by Google). This improves page indexing and supports displaying rich snippets in search results. JavaScript enhancements: Trellis minifies JavaScript files and defers loading asynchronously. This prevents render blocking and serves up pages faster. Template caching: Trellis caches paths to template files, providing an immediate performance boost. No need for WordPress to do repeated template lookups. REST API-based comments: When using Trellis Comments, only the first five will initially render. Additional comments appear when the user scrolls to the comments section. Font localization: Trellis localizes specific Google Fonts. This speeds up font loading in the browser and keeps site visitor data from being sent to the Google Fonts API. Lazy-loaded images: Trellis lazy loads all images and iframes even for browsers that don’t natively support it.  What’s Next?  See what Add-Ons come with Trellis Get started creating a Trellis child theme Implement Trellis’ features in your own code in the Advanced Topics section  ","categories":"","description":"Improve Core Web Vitals metrics, offer Progressive Web Apps (PWAs), and more when you use Trellis as your theme framework.\n","excerpt":"Improve Core Web Vitals metrics, offer Progressive Web Apps (PWAs), …","ref":"/docsytrellis/overview/trellis-benefits/","tags":"","title":"Trellis Benefits"},{"body":"When using Trellis, several image-specific features are available to make your pages load faster and improve your site’s Google Core Web Vitals score. These include:\n Image delivery enhancement via lazy loading. For older browsers that don’t natively support lazy loading, Trellis uses a JavaScript solution. Developers can also disable lazy loading per image, across the site, or specify eager loading. Lazy loading is also applied to iframe content. Image thumbnail size optimizations. Trellis instructs WordPress to create additional image sizes for uploaded images based on the Featured Image size setting. Existing images can be retroactively processed via a Regenerate Featured Images button or Regenerate All Images button in the Mediavine Trellis Dashboard. (Optional) Image formatting optimizations. If the optional Trellis Images plugin is installed, Trellis will generate WebP versions of legacy image formats when visitors go to a page.  Lazy Loading Delivery Lazy loading is the practice of delaying the load or initialization of objects until they’re needed by the browser. When Trellis is active, a loading=\"lazy\" attribute is automatically added to images and iframes found within Trellis content and sidebars. This allows modern browsers to use their native lazy loading functions. If a browser doesn’t natively support lazy loading, Trellis falls back to using a JavaScript solution to accomplish it.\nOnce the page is loaded, Trellis inserts the correct image or iframe content just before it enters the viewport. An image within a noscript tag is also added to provide compatibility for scenarios where JavaScript is not available.\nNote Lazy loading is also automatically applied to iframe content. The instructions for disabling lazy loading per image (or enabling eager loading) also applies to iframes.  Disabling Lazy Loading Across the Site If you plan on using a different lazy loading solution or just want to disable Trellis’ lazy loading functionality site-wide, you can add the following filter to your child theme’s functions.php file:\n/** * Disable Trellis lazy loading */ add_filter( 'mv_trellis_enable_lazy_load', '__return_false' ); Disabling Lazy Loading Per Image If you want to disable lazy loading on a specific image or to disable Trellis’ lazy loading JavaScript fallback, you can apply a class to an \u003cimg\u003e or \u003ciframe\u003e tag or block.\n   Class Description     no-lazyload This class stops Trellis from adding the loading=“lazy” attribute. The element will be served as-is.   native-lazyload This class allows Trellis to add the loading=“lazy” attribute, but disables the JavaScript fallback. If the browser doesn’t natively support lazy loading, the element will be rendered normally.    Applying Eager-Loading to an Image Eager loading is the opposite of lazy loading. Eager loading initializes or loads a resource as soon as the code is executed. This is useful when you need to have image or iframe resources immediately available — for example, if shown as part of a “Loading” screen.\nEager loading can be applied as a class on an \u003cimg\u003e or \u003ciframe\u003e tag.\n   Class Description     eager-load This class stops Trellis from adding the loading=“lazy” attribute and any other lazy-loading features (such as the JavaScript fallback). Instead, Trellis adds a loading=“eager” attribute (provided one doesn’t already exist).\nNote: This feature is only available as of Trellis 0.15.3.    Image Size Optimization WordPress has a predefined set of image sizes it creates when a new image is uploaded. When active, Trellis modifies this set to add more sizes that are frequently used in publisher sites. This helps prevent the “Properly Sized Image Warning” in Google Pagespeed Insights.\nPublishers can choose a desired featured image thumbnail size and ratio in the Display tab of the Mediavine Trellis Dashboard. Depending on the size selected, additional sizes (as listed in the Image Sizes chart) will be created by WordPress whenever an image is uploaded or on post save when the featured image size is changed.\nThe Regenerate Featured Images button will add all featured images to a queue and have their necessary Trellis sizes created by WordPress. See Trellis Featured Images in the Help Center for more information.\nIf a publisher wants to regenerate Trellis sizes on all of the images on their site (Featured Images included), they can go to the Advanced tab of the Mediavine Trellis Dashboard and use the Regenerate All Images button. Depending on the size selected in the Featured Image Size, additional sizes (as listed in the Image Sizes chart) will be created by WordPress. See How to Regenerate Your Image Sizes in Trellis in the Help Center for more information.\nImage Sizes Chart By default, Trellis will generate all image sizes for the selected Featured Image Size and a high res size for all other sizes not selected. Image sizes are grouped by setting.\nNote Trellis never alters original images. The additional images it creates will, however, be cropped accordingly and take up space in the site’s upload directory.  Trellis: Square (1x1)    Image Size Slug Dimensions Cropping     mv_trellis_1x1 (also mv_trellis_1x1_high_res) 728x728 Cropped to fit.   mv_trellis_1x1_med_high_res 480x480 Cropped to fit.   mv_trellis_1x1_med_res 320x320 Cropped to fit.   mv_trellis_1x1_low_res 200x200 Cropped to fit.   mv_trellis_3x4 546x728 Cropped to fit.   mv_trellis_4x3 728x546 Cropped to fit.   mv_trellis_16x9 728x410 Cropped to fit.   mv_trellis_srcset_960 960x960 Proportionally resized to fit inside dimensions.   mv_trellis_srcset_1080 1080x1080 Proportionally resized to fit inside dimensions.    Trellis: 3x4    Image Size Slug Dimensions Cropping     mv_trellis_3x4 (also mv_trellis_3x4_high_res) 546x728 Cropped to fit.   mv_trellis_3x4_med_res 360x480 Cropped to fit.   mv_trellis_3x4_low_res 240x320 Cropped to fit.   mv_trellis_1x1 728x728 Cropped to fit.   mv_trellis_4x3 728x546 Cropped to fit.   mv_trellis_16x9 728x410 Cropped to fit.   mv_trellis_srcset_960 960x960 Proportionally resized to fit inside dimensions.   mv_trellis_srcset_1080 1080x1080 Proportionally resized to fit inside dimensions.    Trellis: 4x3 (Trellis Default)    Image Size Slug Dimensions Cropping     mv_trellis_4x3 (also mv_trellis_4x3_high_res) 728x546 Cropped to fit.   mv_trellis_4x3_med_res 480x360 Cropped to fit.   mv_trellis_4x3_low_res 320x240 Cropped to fit.   mv_trellis_1x1 728x728 Cropped to fit.   mv_trellis_3x4 546x728 Cropped to fit.   mv_trellis_16x9 728x410 Cropped to fit.   mv_trellis_srcset_960 960x960 Proportionally resized to fit inside dimensions.   mv_trellis_srcset_1080 1080x1080 Proportionally resized to fit inside dimensions.    Trellis: 16x9    Image Size Slug Dimensions Cropping     mv_trellis_16x9 (also mv_trellis_16x9_high_res) 728x410 Cropped to fit.   mv_trellis_16x9_med_res 480x270 Cropped to fit.   mv_trellis_16x9_low_res 320x180 Cropped to fit.   mv_trellis_1x1 728x728 Cropped to fit.   mv_trellis_3x4 546x728 Cropped to fit.   mv_trellis_4x3 728x546 Cropped to fit.   mv_trellis_srcset_960 960x960 Proportionally resized to fit inside dimensions.   mv_trellis_srcset_1080 1080x1080 Proportionally resized to fit inside dimensions.    WP Core Sizes While most WP Core sizes are unaffected, Trellis does make changes to the 1200 x 1200 and post-thumbnail sizes.\n   Image Size Slug Dimensions Cropping Modifications     thumbnail 150x150 Cropped to fit None. This size is provided by WP Core.   medium 300x300 Proportionally resized to fit inside dimensions None. This size is provided by WP Core.   medium_large 768x0 Proportionally resized to fit inside dimensions None. This size is provided by WP Core.   large 1024x1024 Proportionally resized to fit inside dimensions None. This size is provided by WP Core.   1200x1200 1200x1200 Proportionally resized to fit inside dimensions Trellis replaces the WP Core 1536x1536 size with this one.   2048x2048 2048x2048 Proportionally resized to fit inside dimensions None. This size is provided by WP Core.   post-thumbnail Depends Uses the default image size of the selected Trellis Featured Image size. Since it uses Trellis’ size, no additional post-thumbnail file is generated. Provided by WP Core, but the dimensions are controlled by Trellis.    Useful Filters and Functions The following image filters and functions can be used in Trellis child theme code. For more information on them, see Filters or Functions in the Reference section.\nFilters  mv_trellis_article_nav_image_orientation mv_trellis_article_nav_image_res mv_trellis_default_featured_image_size mv_trellis_disable_convert_image_to_lazyload_when_enabled mv_trellis_disable_lazy_load_classes mv_trellis_disable_process_images mv_trellis_disable_set_image_cls_aspect_styles mv_trellis_disable_set_image_dimensions mv_trellis_enable_lazy_load mv_trellis_excerpt_image_res mv_trellis_excerpt_image_sizes mv_trellis_featured_post_image_res mv_trellis_featured_post_image_sizes mv_trellis_image_orientation mv_trellis_image_sizes mv_trellis_image_sizes_attribute mv_trellis_match_image_dimensions mv_trellis_post_link_featured_image_sizes mv_trellis_resolution_sizes  Functions  mv_trellis_get_attachment_image_tag mv_trellis_the_attachment_image_tag mvt_adjust_excerpt_image_orientation_res mvt_adjust_featured_post_image_orientation_res mvt_adjust_excerpt_image_sizes mvt_adjust_featured_post_image_sizes mvt_get_image_orientation_res mv_trellis_get_featured_image_tag  ","categories":"","description":"Trellis offers lazy loading, thumbnail optimization, and optional image formatting features. \n","excerpt":"Trellis offers lazy loading, thumbnail optimization, and optional …","ref":"/docsytrellis/advanced-topics/image-delivery/","tags":["image sizes","lazy loading","WebP"],"title":"Image Delivery and Optimizations"},{"body":"Trellis Images Automatically create WebP versions of your existing legacy images and swap them out on-the-fly. When a user visits a post that includes a legacy image, Trellis Images passes it on to Mediavine’s image processing service (included free in your Trellis purchase). When done, a WebP version of the image is sent back to your site and stored in the uploads directory (the original image is never altered or removed).\nThe next time a visitor lands on the page, they’ll be served the WebP version instead. WebP lossless images are smaller than equivalent PNGs and JPEGs, and are preferred by Google. See the WebP site for more information.\nNote Trellis Images is an optional plugin included with your purchase. If you already create WebP images as part of your workflow (or prefer a different plugin), you don’t need to install Trellis Images.  What’s Next?  Get started creating a Trellis child theme Implement Trellis’ features in your own code in the Advanced Topics section  ","categories":"","description":"When you purchase Trellis, you’ll also get add-ons that can replace existing plugins on your site or help optimize performance.\n","excerpt":"When you purchase Trellis, you’ll also get add-ons that can replace …","ref":"/docsytrellis/overview/add-ons/","tags":"","title":"Add-Ons"},{"body":"The Mediavine Trellis Dashboard provides settings that the publisher can change to alter a theme’s behavior or perform Trellis maintenance functions. Not all settings may be available in a child theme. Some require the theme developer to specifically add support.\nAlso, if you choose to create new or additional templates (or create an entirely new CSS stylesheet), it’s up to you to connect the Trellis Dashboard settings to elements in your theme.\nUsing Settings in a Child Theme The Usage column in the table below describes how a setting is incorporated into a child theme. Some settings are enabled via WordPress’ theme support function; some are accessed via CSS variables; others require adding code to child theme templates. Some require a combination of these methods.\nWhile it’s possible to read the settings programmatically (and then perform an action on them), this page focuses on how the settings are incorporated in the Trellis Core templates.\nTheme Support When enabling a feature via WordPress’ theme support function, use the following code in the child theme’s functions.php file, at the end of the mv_trellis_child_set_options() function:\nadd_theme_support('parameter');  Note If multiple settings use the same theme support parameter, all of those settings will become visible in the Mediavine Trellis Dashboard when enabled.  For example, if adding support for the Background Accent Color setting, the code would look similar to:\nfunction mv_trellis_child_set_options() { $child_version = '0.0.1'; \\Mediavine\\Trellis\\Options::set_multiple( [ 'child_name' =\u003e '\u003ctrellis-child-theme-name\u003e', 'child_version' =\u003e $child_version, 'child_css' =\u003e get_stylesheet_directory_uri() . \"/assets/index.$child_version.css\", 'child_js' =\u003e get_stylesheet_directory_uri() . \"/assets/index.$child_version.js\", ] ); /** add theme support for background accent color */ add_theme_support('mv_trellis_background_accent_color'); } Multiple add_theme_support() methods can be added to the function.\nUsing Trellis CSS Variables Trellis’ default CSS stylesheet incorporates all the settings shown in the table. If you want to make use of a setting color or font in a different part of your theme, you’ll need to reference a Trellis CSS variable.\nImportant Do not redeclare any Trellis CSS variables. Doing so will break Trellis functionality.  The syntax to use a CSS variable is:\nvar(--trellis-variable-name, #optional-fallback-value\u003e) For example, if using the Trellis Primary color as the background for a div element (with a fallback value of white), you would use:\ndiv { background-color: var(--mv-trellis-color-primary, #ffffff); } Adding Code to Templates Some settings will reference functions or code that needs to be included in a template. Refer to the function, hook, filter, or named Trellis Core templates to see how they’re used.\nDisplay Settings Font Sizes and Typefaces    Setting Description Usage     Change Font Size Sets the font size for the body element. CSS variable: --mv-trellis-font-size   H1 Font Size Sets the default size for H1 headings. Add theme support and use a CSS variable.\nTheme support parameter: mv_trellis_headings_control CSS variable:\n--mv-trellis-h1-font-size   Apply H1 Size to All Headings Adjusts the sizes of H2 through H6 elements based on the H1 size. The following conversions are used: h2 = h1 * 0.75rem h3 = h1 * 0.67rem h4 = h1 * 0.63rem h5 = h1 * 0.56rem h6 = h1 * 0.5rem Theme support parameter: mv_trellis_headings_control CSS variable:\n--mv-trellis-h2-font-size --mv-trellis-h3-font-size --mv-trellis-h4-font-size --mv-trellis-h5-font-size --mv-trellis-h6-font-size   Body Font Sets the font of the body element. Select a Web Safe font for best performance. See Font Localization in Advanced Topics for more information. CSS variable: —-mv-trellis-font-body   Heading Font Sets the font for all headings. Select a Web Safe font for best performance. See Font Localization in Advanced Topics for more information. CSS variable: —-mv-trellis-font-heading    Colors    Setting Description Usage     Primary Color Sets a main color for use in child themes. Trellis defaults to using this color for links, buttons, and other elements in the Trellis Core theme and in Birch, Wisteria, and Bamboo. CSS variable:\n--mv-trellis-color-primary   Secondary Color Sets an alternate color for use in child themes. Trellis defaults to using this color for hover effects, alternate buttons, and other secondary elements in the Trellis Core theme and in Birch, Wisteria, and Bamboo. CSS variable: --mv-trellis-color-secondary   Background Accent Color Sets the background color of some elements like page and post headers in the Trellis Core theme and in Birch and Wisteria. This setting is not used in the Bamboo child theme. Add theme support and use a CSS variable. Theme support parameter: mv_trellis_background_accent_color CSS variable: --mv-trellis-color-background-accent   H1 Color Sets the color of all H1 headings in the Trellis Core theme and Bamboo. This setting is not used in the Wisteria and Birch child themes. Add theme support and use a CSS variable. Theme support parameter: mv_trellis_headings_control CSS variable: --mv-trellis-h1-font-color   Apply H1 Color to All Headings Sets the color of all H2 to H6 elements to match the H1 color setting in the Trellis Core theme and Bamboo. This setting is not used in the Wisteria and Birch child themes. Add theme support and use a CSS variable. Theme support parameter: mv_trellis_headings_control CSS variable: --mv-trellis-heading-font-color    Post Meta    Setting Description Usage     Post Meta Display - Top Select which post meta to display in the post header. Options include: Comment Count, Author, Date, and Categories. If Yoast SEO is installed, you can show Yoast breadcrumbs. Refer to the article-meta-header template part in Trellis Core to see how this is implemented.   Post Meta Display - Bottom Select which post meta to display in the post footer. Options include: Author, Date, and Categories. If Yoast SEO is installed, you can show Yoast breadcrumbs. Refer to the article-meta-footer template part in Trellis Core to see how this is implemented.   Post Meta Date Display Determine the date to display in the post header. Options include: Display Modified, Display Published, or Display Both. Created by the mv_trellis_entry_date() function. Refer to the article-meta-header or article-meta-footer template parts in Trellis Core for reference.    Images    Setting Description Usage     Site Logo Sets an image for use as a logo in the site header. If there is no site logo, the site title will be shown. In the Trellis Core theme and Bamboo and Birch, the logo will display inline with the main navigation. In Wisteria, the logo will display next to the sticky post on the homepage, and inline with the main navigation on posts and pages. Created by the mv_trellis_site_title() function. See Hooks for more information.   Change logo height Sets the max logo height value that can be shown in the header. CSS variable: --mv-trellis-max-logo-size   Display Featured Images Shows featured images on posts before the post content. See content-article template part in Trellis Core for reference.   Hide Featured Image from Small Screens Hides the post featured image when the visitor is using a device with a viewport width smaller than 600px. Displaying featured images to mobile devices impacts the Largest Contentful Paint (LCP) score, one of Google’s Core Web Vitals. Adds a hide-featured-image-on-mobile class to the body tag when post featured images are enabled but hidden on mobile.   Featured Image Size Sets the thumbnail size used for post thumbnails. Also controls the additional image sizes Trellis instructs WordPress Core to create. See Image Generation in Advanced Topics for more information. Controlled by the Mediavine Trellis Dashboard.    Footer    Setting Description Usage     Hide Mediavine/Trellis footer links Removes the Mediavine/Trellis footer links. Controlled by the mvt_footer_bottom() function. See Hooks for more information.   Footer Copyright Text Adds personalized copyright text to the footer. Supports HTML markup, including links. Controlled by the mvt_footer_bottom() function. See Hooks for more information.    Layout    Setting Description Usage     Enable Search Bar Adds a search bar to the site header. See header template part in Trellis Core for reference.   Layout space Adjusts the margins between key layout elements like the primary content, sidebar, and widgets. The following defaults are used: Compact = 10px Comfortable = 20px CSS Variable: --mv-trellis-gutter   Enable Trellis comments Sets Trellis as the commenting engine for the site. See Trellis Comments in Advanced Topics for more information. Note: If you are using an additional third party comment tool, deactivating Trellis Comments may be necessary for compatibility. See comments template in Trellis Core for reference.    Advanced Settings Critical CSS    Setting Description Usage     Enable Critical CSS Improves your site’s performance by separating CSS into two cached files. See Critical CSS in Advanced Topics for more information. Controlled by the Mediavine Trellis Dashboard.   CSS Allowlist Allows CSS styling for HTML elements that are rendered after page load. This is a compatibility setting for selectors that are added via JavaScript after the page loads. See Critical CSS in Advanced Topics for more information. Selectors can be added programmatically via mv_trellis_css_allowlist. See Filters for more information.   Force Critical CSS Adds selectors to the initial Critical CSS file. This is a compatibility setting for selectors that are not part of the initial viewport of a page. Some styles may be necessary to add to prevent layout shift or a flash of unstyled content at page load. See Critical CSS in Advanced Topics for more information. Selectors can be added programmatically via mv_trellis_css_force_keep. See Filters for more information.    Google Analytics    Setting Description Usage     Universal Analytics Tracking ID The legacy Google Analytics UA Tracking ID. See Tracking ID and property number in the Trellis Help Center for more information. Controlled by the Mediavine Trellis Dashboard. Inserted within the \u003chead\u003e element.   Google Analytics 4 Tracking ID The newer Google Analytics 4 (GA4) Tracking ID. See Introducing Google Analytics 4 (GA4) in the Trellis Help Center for more information. Controlled by the Mediavine Trellis Dashboard. Inserted within the \u003chead\u003e element.   Delay Google Analytics Load Forces a three second delay to the initial Google Analytics load. While visitors who leave your site within that time will not be tracked, site performance will improve. Controlled by the Mediavine Trellis Dashboard.    SEO    Setting Description Usage     Trellis SEO Output Enables meta descriptions, schema output (via JSON-LD), and Open Graph tags for your site. Note: This option is disabled if Trellis detects Yoast, RankMath, or AIO as installed and active. It cannot be turned on while these plugins are active. For all other SEO plugins, disable this to prevent duplicate SEO data. Controlled by the Mediavine Trellis Dashboard.    Optimization    Setting Description Usage     JavaScript Optimization Enables minification of JavaScript files and defers loading for better performance. Note: If Trellis detects another plugin is performing JavaScript optimizations, it will disable its own optimization functions. Recognized plugins include Autoptimize, Clearfy Cache, Jetpack, Litespeed Cache, NitroPack, SG Optimizer, W3 Total Cache, WP Fastest Cache, and WP Rocket. Controlled by the Mediavine Trellis Dashboard.   JavaScript Exclusions Matching full or partial URLs in this list are excluded from any deferment or minification performed by Trellis. Note: This setting is only visible when JavaScript Optimization is enabled. Controlled by the Mediavine Trellis Dashboard.    Permanent Actions    Setting Description Usage     Reset Settings Sets the theme back to default settings (except for the license field). Warning: This cannot be undone. Controlled by the Mediavine Trellis Dashboard.   Trellis Cache Clears the Trellis cache. Use if new Trellis features or settings are not appearing. Warning: This cannot be undone. Controlled by the Mediavine Trellis Dashboard.   Regenerate Images Regenerates all image sizes on your site. This is used if images other than your featured images are displaying at the wrong size. See How to Regenerate Your Image Sizes in the Trellis Help Center for more information. Controlled by the Mediavine Trellis Dashboard.    PWA Settings    Setting Description Usage     Enable PWA Enables PWA support for your site. If enabled, it allows users to view your blog as a progressive web app on their desktop or mobile device. Controlled by the Mediavine Trellis Dashboard.   PWA Short Name Sets the display name of the app on the installed device. Note: A PWA Short Name is required for this feature to operate. Controlled by the Mediavine Trellis Dashboard.   Theme Color Sets the color of the URL bar on supported devices to match your site style. Controlled by the Mediavine Trellis Dashboard.   PWA Site Icon Sets the image for use as the PWA icon. Note: A PWA Site Icon is required for this feature to operate. Controlled by the Mediavine Trellis Dashboard.    License Settings    Setting Description Usage     Trellis License Unlocks Trellis’ full features. Visit the Mediavine Marketplace to purchase a license. Controlled by the Mediavine Trellis Dashboard.    Hooks Settings    Setting Description Usage     Add custom HTML code to the \u003chead\u003e tag Useful for Google Site verification HTML meta tags or a Pinterest domain verification HTML tag. See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by the Mediavine Trellis Dashboard. Added via mvt_header_bottom() in templates to tha_head_bottom(). See Hooks for more information.   Add custom content between the post heading and the post content Useful for anything to be displayed only on posts just before the content. Typically used for affiliate disclaimers and CTAs. See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by the Mediavine Trellis Dashboard. Added via mvt_aside_before_entry_content() in templates to tha_aside_before_entry_content(). See Hooks for more information.   Add custom content after the post content Useful for anything to be displayed only on posts just after the content. Useful for CTAs. See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by the Mediavine Trellis Dashboard. Added via mvt_content_after() in templates to tha_content_after(). See Hooks for more information.   Add custom HTML code to the end of the \u003cbody\u003e tag Useful for additional scripts required by external services such as newsletters or email opt-in forms. Anything added here should not be needed at the time of the First Contentful Paint (FCP). See Trellis Hooks Settings Overview in the Trellis Help Center for more information. Controlled by the Mediavine Trellis Dashboard. Added via mvt_body_bottom() in templates to tha_body_bottom(). See Hooks for more information.    What’s Next?  Get started creating a Trellis child theme Read more about Trellis Hooks Read more about Trellis Filters  ","categories":"","description":"When you activate Trellis, a new menu becomes available under Appearance in the WordPress Admin Dashboard. \n","excerpt":"When you activate Trellis, a new menu becomes available under …","ref":"/docsytrellis/getting-started/trellis-settings/","tags":"","title":"Trellis Settings"},{"body":"Publishers can control Post Meta settings using the Mediavine Trellis Dashboard, selecting what information appears. Available meta information includes: Author, Breadcrumbs (if the Yoast SEO plugin is active), Categories, Comment Count, and Date (Published, Modified, or both).\nNote Trellis templates provided by Mediavine limit Comment Count to the top of a post. If you’d like to add the Comment Count to the bottom of a post, refer to the code in the Additional Information section.  The image below shows the default Post Meta information as rendered by the Trellis Core theme with Yoast SEO installed.\nSettings Publishers can control the Post Meta information and where it gets displayed via the Mediavine Trellis Dashboard. These settings store values that can be accessed by various filters and functions. Template parts contain logic to render the information.\n   Setting Name Description Usage     Post Meta Display - Top Select which post meta to display in the post header. Options include: Comment Count, Author, Date, and Categories.\nIf Yoast SEO is installed, you can show Yoast breadcrumbs. Refer to the article-meta-header template part in Trellis Core to see how this is implemented.\nLocation: mediavine-trellis/template-parts/article/article-meta-header.php   Post Meta Display - Bottom Select which post meta to display in the post footer. Options include: Author, Date, and Categories.\nIf Yoast SEO is installed, you can show Yoast breadcrumbs. Refer to the article-meta-footer template part in Trellis Core to see how this is implemented.\nLocation: mediavine-trellis/template-parts/article/article-meta-footer.php   Post Meta Date Display Determine the date to display in the post header. Options include: Display Modified, Display Published, or Display Both. Created by the mv_trellis_entry_date() function. Refer to the article-meta-header or article-meta-footer template parts in Trellis Core for reference.    Functions The selected settings in the Mediavine Trellis Dashboard can be accessed via the mv_trellis_is_meta_item_enabled() function. Individual options are queried by their slug to determine if the publisher has them set. Available Post Meta slugs include:\n author breadcrumbs (only available if Yoast SEO is installed) categories comment_count date  The function also specifies a location, which can be:\n post_meta_top post_meta_bottom  Example\nIn the following example, the $display_author variable will be set to true or false depending on (1) if the post type supports an author, and (2) if the Trellis Post Meta Author setting is enabled and set to the top of the post.\n$display_author = ( post_type_supports( get_post_type( $post_id ), 'author' ) \u0026\u0026 mv_trellis_is_meta_item_enabled( 'author', 'post_meta_top' ) ); If a Post Meta item is available, other functions are used to output its value.\n author: mv_trellis_entry_author() date: mv_trellis_entry_date() comment_count: Calculated in the article_meta_header template categories: mv_trellis_entry_taxonomies breadcrumbs: Assembled from an internal class and posted to the hook specified by the mv_trellis_top_breadcrumbs_placement filter.  Example\nThe following example shows how the post’s Author meta information is output in article-meta-header.php.\nif ( $display_author ) { ?\u003e \u003cp class=\"author-meta post-author meta-wrapper\"\u003e \u003c?php echo esc_html__( 'By: ', 'mediavine' ); mv_trellis_entry_author(); ?\u003e \u003c/p\u003e \u003c?php } Useful Filters One filter is available to adjust breadcrumb placement if Yoast SEO is installed:\n mv_trellis_top_breadcrumbs_placement: Specifies the hook where the Post Meta breadcrumbs value is placed. The default is tha_aside_before_entry_content, which is output by mvt_entry_before() in the Trellis Core templates. See Hooks in the Reference section for a list of all available hooks.  Additional Information To best understand how Post Meta information is displayed, refer to the article-meta-header.php and article-meta-footer.php template parts in Trellis Core.\nMoving the Comment Count If you’d like to display the Comment Count at the bottom of a post, you’ll need to add code to your child theme’s functions.php file as well as modifying the article-meta-footer.php template part.\nFunctions.php\nThis code will add the Comment Count as an option to the Post Meta setting in the Mediavine Trellis Dashboard:\n/** * Allows the Comment Count to be used at the bottom of Post Meta. */ add_filter( 'mv_trellis_before_update_post_meta_bottom', 'mv_add_comments_option_to_post_meta_bottom' ); function mv_add_comments_option_to_post_meta_bottom( array $setting ) { $setting['data']['options']['comment_count'] = 'Comment Count'; return $setting; } Article-meta-footer.php\nYou’ll need to add code to three places in the article-meta-footer.php template part. First, you’ll want to check if the Comment Count has been enabled for the footer:\n// Check if the Comment Count is set for the bottom of Post Meta $mv_trellis_display_comment_count = ( ( comments_open( $mv_trellis_post_id ) || get_comments_number() ) \u0026\u0026 ! post_password_required() \u0026\u0026 mv_trellis_is_meta_item_enabled( 'comment_count', 'post_meta_bottom' ) ); Next, you’ll want to modify the post’s check for meta output to include the Comment Count:\n// If we don't have any meta output, get out if ( ! $mv_trellis_display_author \u0026\u0026 ! $mv_trellis_display_date \u0026\u0026 ! $mv_trellis_display_comment_count \u0026\u0026 ! $mv_trellis_display_categories \u0026\u0026 ! $mv_trellis_display_breadcrumbs ) { return; } Finally, enter code to render the Comment Count:\n// Comments. if ( $display_comment_count ) { ?\u003e \u003cdiv id=\"comment-count\" class=\"meta-element meta-wrapper\"\u003e \u003cdiv\u003e \u003c?php mv_trellis_get_template_part( 'template-parts/svg/comment-bubble' ); ?\u003e \u003c?php /* translators: %s: number of comments for the post */ echo esc_html( sprintf( _n( '%s Comment', '%s Comments', get_comments_number(), 'mediavine' ), number_format_i18n( get_comments_number() ) ) ); ?\u003e \u003c/div\u003e \u003c/div\u003e \u003c?php } ","categories":"","description":"Post Meta is information that can appear at the top or bottom of every post in Trellis Core and the included Bamboo, Birch, and Wisteria child themes. \n","excerpt":"Post Meta is information that can appear at the top or bottom of every …","ref":"/docsytrellis/advanced-topics/post-meta-output/","tags":["post meta"],"title":"Post Meta Output"},{"body":"This document will walk you through the pieces and parts of a Trellis child theme.\nNote Trellis child themes follow the same basic structure as any WordPress child theme. You can refer to the WordPress Theme Handbook for detailed information on how child themes operate.  Child Theme File Structure  Create a new folder for your child theme in your WordPress themes folder. Create the following folder structure inside of your child theme folder:     Folder Subfolders Description     assets (optional) A place to store your child theme’s images, CSS, and JavaScript files.   template-parts article\ncontent\nheader A location to store parts of templates that will be used when serving content. Trellis will cache the location of these template parts to serve content faster.    Add a 1200 x 900px screenshot.png file in your child theme folder. This screenshot will be shown on the Appearance \u003e Themes page in your WordPress dashboard.  Add CSS Files Create a Style.css File  Create a new file called style.css in your child theme folder. Add the following code, replacing the boilerplate text with your own content:  /* Theme Name: \u003cYour Child Theme Name\u003e Template: mediavine-trellis Theme URI: \u003cURL to your child theme's documentation.\u003e Author: \u003cYour Name or Company Name\u003e Author URI: \u003cURL to your personal or company website.\u003e Description: \u003cA short description of your child theme.\u003e Requires at least: 5.2.0 Version: \u003cYour Child Theme Version (e.g. 0.0.1)\u003e Text Domain: mediavine */ The fields are used in the following ways:\nAdd Custom CSS Files You can choose to add your custom CSS to the style.css file or you can create separate CSS files for inclusion in your child theme.\nNote We recommend having separate CSS files that are stored in your child theme’s assets folder as a best practice.  Your custom CSS file can be any name you choose, but we recommend including the child theme version number in the name. This ensures that any CSS changes you make will refresh the browser cache whenever the child theme is upgraded. You’ll define the name and location of your CSS file in your child theme’s functions.php file.\n Add a custom CSS file to your child theme’s assets folder.  wp-content/themes/my-child-theme-name/assets/  Add your child theme version to the name of your custom CSS file. For example, if your child theme’s version is 0.0.1, name your CSS file index.0.0.1.css.  Note Adding CSS selectors to your child theme’s CSS file will override any matching selectors in Trellis Core’s default CSS stylesheet. If you’d like to start from scratch, you can add code to completely disable Trellis’ default CSS styling. For more information, see CSS Variables in Advanced Topics.  Add a Functions.php File Your child theme’s functions.php file will hold custom functions that change how your theme behaves. It lets you enqueue your CSS stylesheet and customize your theme options.\nSet Basic Definitions  Add a functions.php file to your child theme folder. Add the following code to the functions.php, replacing the boilerplate text with your own values:  \u003c?php /** Basic Definitions ** * Use mv_trellis_child_set_options() to define the child theme version and other necessary settings. . * Options::set_multiple will enqueue stylesheets and scripts. * * To learn more about functions available to Trellis child themes, see: https://mediavine.github.io/trellis-docs/docs/functions-php/ * To learn more about settings available to Trellis child themes, see: https://mediavine.github.io/trellis-docs/docs/settings/ */ function mv_trellis_child_set_options() { $child_version = '\u003creplace with your child theme version number\u003e'; \\Mediavine\\Trellis\\Options::set_multiple( [ 'child_name' =\u003e '\u003creplace with your child theme name\u003e', 'child_version' =\u003e $child_version, 'child_css' =\u003e get_stylesheet_directory_uri() . \"/assets/index.$child_version.css\", ] ); add_action( 'mv_trellis_parent_loaded', 'mv_trellis_child_set_options' ); The $child_version variable represents the version number of your child theme. We recommend defining it in a variable so that you can reuse it in other places of your child theme code.\nThe other options you set are described in the table below:\n   Field Description     Theme Name The name of your child theme. This is shown on the Appearance \u003e Themes page in your WordPress dashboard and also in Theme Details.   Template The parent theme directory associated with your child theme. To be a Trellis child theme, this must be set to mediavine-trellis.   Theme URI A web address for more information about your theme or for documentation.   Author The name of the author or company that created the child theme. This is shown on the Theme Details page.   Author URI A web address for more information about you or the company that created the child theme.   Description A short description of the child theme. This is shown on the Theme Details page.   Requires at least The minimum WordPress version required to use the child theme. This should be no earlier than 5.2.0, as this is the oldest version of WordPress supported by Trellis.   Version The version number used to identify the iteration of your child theme.   Text Domain Used to support translations. Normally this is set to mediavine. If you use your own text domain, be sure to follow the instructions in WordPress’ Child Theme Internationalization documentation.    (Optional) Add Theme Support Options Add the following code after Options::set_multiple to allow the publisher to set accent colors and heading styles using the Mediavine Trellis Dashboard. See Trellis Settings for information on how to connect your code to the settings in your child theme.\n/** Accent Color and Headings Support ** * Use add_theme_support to use accent colors and heading options defined in Trellis Settings. */ add_theme_support( 'mv_trellis_background_accent_color' ); add_theme_support( 'mv_trellis_headings_control' ); } Create Template Files While Trellis supports the WordPress Template Hierarchy, page load time can be reduced through the use of template parts. Template parts are reusable blocks of code that can be called from different page templates. This allows them to serve up special coding for things like category templates, author templates, and more. Think of template parts as more sophisticated versions of get_header() and get_footer().\nWordPress has a built-in function for template parts, but Trellis offers a faster function called mv_trellis_get_template_part(). This custom function caches your template parts and serves them much faster than WordPress’ built-in function. You can see it in use in the Trellis Core and Bamboo, Birch, and Wisteria child themes. See Functions in Reference for more information.\nBuilt-In Trellis Core Templates Any template placed in your child-theme’s folder will follow the WordPress Template Hierarchy and override a template in the Trellis parent theme folder. However, we recommend using a similar structure of template parts for your own theme files in order to get the biggest speed boost.\nTrellis Core provides the following templates out of the box:\n comments.php footer.php header.php index.php page-full-width.php searchform.php sidebar.php template-parts (directory)  article (directory)  article-excerpt.php article-meta-footer.php article-meta-head.php article-navigation.php   content (directory)  content-article.php content-none.php content.php   header (directory)  header-content-author.php header-content-front-page.php header-content-home.php header-content-singular.php header-content.php header-featured.php header.php navigation.php search-form.php      Bamboo, Birch, and Wisteria Child Themes If you’ve installed the Bamboo, Birch, and Wisteria child themes, you’ll find that each one builds upon Trellis Core’s default templates and stylesheets. Some of the child themes have support for accent colors and heading settings, while others don’t. Be sure to activate and look through these child themes for ideas on how to create your own child theme.\nTrellis Template Markup Trellis also receives higher SEO scores by using semantic HTML markup in all of its templates. While there’s traditional markup mixed in, large blocks are coded with semantic HTML. Semantic HTML makes it easier for Google’s bots to index your site. It also increases web page accessibility.\nHere are some resources to help you understand Trellis’ default markup:\n Visual Trellis Markup Overview Visual Trellis Markup Detail  What’s Next?  Learn how to test your Trellis child theme Read more about Trellis Hooks Read more about Trellis Filters  ","categories":"","description":"Trellis Core provides a solid foundation of templates and stylesheets for fast WordPress sites. However, to create a truly unique experience, you’ll want to make a child theme.\n","excerpt":"Trellis Core provides a solid foundation of templates and stylesheets …","ref":"/docsytrellis/getting-started/create-your-child-theme/","tags":"","title":"Creating Your Child Theme"},{"body":"By using CSS variables in your own child theme, you can make it easy for publishers to update CSS styles using the Mediavine Trellis Dashboard.\nHow CSS Variables Work Trellis’ default CSS stylesheet incorporates all of the settings shown in the table below. If you want to make use of a setting color or font in a different part of your theme, you’ll need to reference a Trellis CSS variable.\nImportant Do not redeclare any Trellis CSS variables. Doing so will break Trellis functionality.  The syntax to use a CSS variable is:\nvar(--trellis-variable-name, #optional-fallback-value) For example, if using the Trellis Primary color as the background for a div element (with a fallback value of white), you would use:\ndiv { background-color: var(--mv-trellis-color-primary, #ffffff); }  Note A Sass mixin is included in Trellis Core and Mediavine child themes. This mixin will provide fallback for browsers that don’t support CSS variables. For a complete list of browsers that support CSS variables, see https://www.lambdatest.com/web-technologies/css-variables.  List of Trellis CSS Variables This table represents a full list of CSS variables available in Trellis.\n   CSS Variable Description Default Value     --mv-trellis-color-heading Applied to Site Title text when there’s not a logo. #243746   --mv-trellis-color-link Applied to:\n- Link text default color\n- Link icon default fill color\n- Button default background color --mv-trellis-color-primary   --mv-trellis-color-link-hover Applied to:\n- Link text default hover color\n- Link icon default hover fill cover\n- Button default hover background color --mv-trellis-color-secondary   --mv-trellis-color-primary Sets a main color for use in child themes. Trellis defaults to using this color for links, buttons, and other elements in the Trellis Core theme and in Birch, Wisteria, and Bamboo. #243746   --mv-trellis-color-secondary Sets an alternate color for use in child themes. Trellis defaults to using this color for hover effects, alternate buttons, and other secondary elements in the Trellis Core theme and in Birch, Wisteria, and Bamboo. #243745   --mv-trellis-color-background-accent Sets the background color of some elements like page and post headers in the Trellis Core theme and in Birch and Wisteria. This setting is not used in the Bamboo child theme.\nTheme support parameter:\nmv_trellis_background_accent_color #fafafa   --mv-trellis-font-body Sets the font of the body element. Select a Web Safe font for best performance. System Default (Web Safe)   --mv-trellis-font-heading Sets the font for all headings. Select a Web Safe font for best performance. System Default (Web Safe)   --mv-trellis-font-size Sets the font size for the body element. Medium (18px)   --mv-trellis-font-size-ex-sm A font size derived from mv-trellis-font-size. font-size * 0.667   --mv-trellis-font-size-lg A font size derived from mv-trellis-font-size. font-size * 1.125   --mv-trellis-font-size-sm A font size derived from mv-trellis-font-size. font-size * 0.875   --mv-trellis-gutter Adjusts the margins between key layout elements like the primary content, sidebar, and widgets. The following defaults are used:\nCompact = 10px\nComfortable = 20px Comfortable   --mv-trellis-gutter-double A gutter value derived from mv-trellis-gutter. gutter * 2   --mv-trellis-gutter-large A gutter value derived from mv-trellis-gutter. gutter * 2.5   --mv-trellis-gutter-small A gutter value derived from mv-trellis-gutter. floor(gutter/2)   --mv-trellis-h1-font-color Sets the color of all H1 headings in the Trellis Core theme and Bamboo.\nThis setting is not used in the Wisteria and Birch child themes.\nTheme support parameter:\nmv_trellis_headings_control #000   --mv-trellis-h1-font-size Sets the default size for H1 headings.\nFull options include:\n- Small: 24px\n- Medium: 36px\n- Large: 42px\n- X-Large: 56px\nTheme support parameter: mv_trellis_headings_control Medium (36px)   --mv-trellis-h2-font-size Adjusts the sizes of H2 through H6 elements based on the H1 size. The following conversions are used:\nTheme support parameter: mv_trellis_headings_control H1 size * 0.75 (rem)   --mv-trellis-h3-font-size Adjusts the sizes of H2 through H6 elements based on the H1 size. The following conversions are used:\nTheme support parameter: mv_trellis_headings_control H1 size * 0.67 (rem)   --mv-trellis-h4-font-size Adjusts the sizes of H2 through H6 elements based on the H1 size. The following conversions are used:\nTheme support parameter: mv_trellis_headings_control H1 size * 0.63 (rem)   --mv-trellis-h5-font-size Adjusts the sizes of H2 through H6 elements based on the H1 size. The following conversions are used:\nTheme support parameter: mv_trellis_headings_control H1 size * 0.56 (rem)   --mv-trellis-h6-font-size Adjusts the sizes of H2 through H6 elements based on the H1 size. The following conversions are used:\nTheme support parameter: mv_trellis_headings_control H1 size * 0.5 (rem)   --mv-trellis-heading-font-color Sets the color of all H2 to H6 elements to match the H1 color setting in the Trellis Core theme and Bamboo.\nThis setting is not used in the Wisteria and Birch child themes.\nTheme support parameter: mv_trellis_headings_control #000   --mv-trellis-max-logo-size Sets the max logo height value that can be shown in the header.\nFull options include:\n- Small (50px)\n- Medium (75px)\n- Large (100px)\n- Extra Large (150px) Extra Large (150px)    Disabling All Trellis CSS Styling If you’d like to start from scratch and discard all default Trellis Core CSS styling, add the following code:\nImportant Disabling the default Trellis CSS styles will require you to define all layout and styling in your own CSS files.  /** Turn Off Trellis Parent Theme CSS ** * Use add_filter to remove all Trellis parent theme CSS definitions. */ add_filter( 'mv_trellis_enqueue_main_style', '__return_false' ); ","categories":"","description":"Trellis uses CSS variables to control how font, color, and layout spacing settings are applied to the Trellis Core and Bamboo, Birch, and Wisteria child themes. \n","excerpt":"Trellis uses CSS variables to control how font, color, and layout …","ref":"/docsytrellis/advanced-topics/using-css-variables/","tags":"","title":"Using CSS Variables"},{"body":"Placeholder text.\nWhat’s Next?  Placeholder link  ","categories":"","description":"Placeholder description. \n","excerpt":"Placeholder description. \n","ref":"/docsytrellis/getting-started/testing-your-child-theme/","tags":"","title":"Testing Your Child Theme"},{"body":"Placeholder text.\nWhat’s Next?  Placeholder link  ","categories":"","description":"Placeholder description. \n","excerpt":"Placeholder description. \n","ref":"/docsytrellis/getting-started/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"Trellis defers the loading of the remaining comments (which can be a huge part of page markup) until they’re actually needed.\nEnabling Trellis Comments Trellis Comments are enabled by default. Publishers can access the setting that controls them by going to Appearance \u003e Mediavine Trellis \u003e Display under the Layout section.\nHow Trellis Comments Work To start, the first five top-level comments on a post are server-rendered via the WordPress REST API. A Preact app then modifies the div rendered by class-comments.php, allowing Trellis to populate these comments with extra data and user interface elements.\nNote The full path to the class-comments.php file is mediavine-trellis/inc/classes/class-comments.php. Trellis Comments markup is found in mediavine-trellis/comments.php.  Trellis then fetches all comments for that post that are stored in the component state. When a site visitor requests more comments, no additional REST requests are made.\nCompatibility Issues When Trellis Comments is enabled, comments are also submitted via the WordPress REST API. This can cause conflicts with third-party plugins that add additional fields (such as ratings) to a post’s comments field. Most plugins save data via the form submission, not an API call, which can cause issues.\nTrellis attempts to mitigate any problems by saving each field in the comment form as a piece of comment metadata. However, when a comment plugin uses a different name for the form field than it does the meta key, there will be a problem.\nIf you plan on using additional comment plugins with your Trellis child theme, be sure to test them. If there are conflicts, you may need to disable Trellis Comments. See Trellis Themes: Conflicts and Compatibilities in the Help Center for information on known plugins that don’t work well with Trellis.\nUseful Filters  mvt_requires_default_wp_fields mv_trellis_comments_template  ","categories":"","description":"Trellis offers a comments feature that improves site performance by rendering only the first five top-level comments of a post. \n","excerpt":"Trellis offers a comments feature that improves site performance by …","ref":"/docsytrellis/advanced-topics/trellis-comments/","tags":"","title":"Trellis Comments"},{"body":"Learn more about what Trellis is, the benefits it offers to publishers and developers, and what add-ons come with your Trellis license. Click on a page title for the details.\n","categories":"","description":"","excerpt":"Learn more about what Trellis is, the benefits it offers to publishers …","ref":"/docsytrellis/overview/","tags":"","title":"Overview"},{"body":"This section shows available filters for Trellis child theme templates. A filter summary page provides a quickly scannable list of filters that link to a more in-depth filter detail page.\n","categories":"","description":"","excerpt":"This section shows available filters for Trellis child theme …","ref":"/docsytrellis/reference/filters/","tags":"","title":"Filters"},{"body":"Follow the instructions on these pages to install Trellis and learn what changes it makes to the WordPress interface. You’ll also find detailed descriptions of Trellis settings and how they interact with your child theme.\n","categories":"","description":"","excerpt":"Follow the instructions on these pages to install Trellis and learn …","ref":"/docsytrellis/getting-started/","tags":"","title":"Getting Started"},{"body":"mvt_processing_css_status_timeout Sets the timeout period for the Processing state in Critical CSS.\n mvt_requires_default_wp_fields Determines whether default WordPress comment fields should be used in the comments_form call in comments.php. If Trellis Comments are enabled, WordPress comment fields are not used.\n mv_trellis_about_widget_image_height Applied to the height attribute on the About Widget \u003cimg\u003e tag.\n mv_trellis_about_widget_image_width Applied to the width attribute on the About Widget \u003cimg\u003e tag.\n mv_trellis_about_widget_image_size The registered size to be used for the About Widget image. This can be a Trellis image size, a WordPress image size, or a custom size.\n mv_trellis_about_widget_image_sizes Applied to the sizes attribute value for the About Widget thumbnail.\n mv_trellis_admin_runtime_dependencies Lists the registered dependencies needed for the mv-trellis/runtime script.\n mv_trellis_allowed_google_fonts Returns a list of allowed Google Fonts to be supplied to Body Font and Heading Font settings. Array keys are the labels provided to the settings and the values are the CSS values.\n mv_trellis_allowed_non_google_fonts Returns a list of web safe fonts to be supplied to Body Font and Heading Font settings. Array keys are the labels provided to the settings and the values are the CSS values.\n mv_trellis_always_scan_template_files Determines if the Trellis template part files should be scanned on every page load. When set to False, Trellis will only scan template part files upon activation, update, or when clearing the Trellis cache.\n mv_trellis_article_nav_image_orientation Applies the image orientation for post navigation images.\n mv_trellis_article_nav_image_res Applies the resolution to be used for the post navigation image size.\n mv_trellis_async_styles_ignore A list of filepaths to ignore from asynchronous stylesheet loading on the site’s front-end.\n mv_trellis_base_gutters Applies to the base gutter sizes used for layout spacing. A value (in pixels) represents the amount of space to apply between layout elements. Uses the Layout Space setting in the Mediavine Trellis Dashboard.\n mv_trellis_before_update_{$setting[‘slug’]} Filters a Trellis setting before updating it in the options table. This provides a way to trigger an action before the value is saved.\nFor example, when changing the featured image size, a developer might want to make sure all of the image sizes used in the srcset are generated.\n mv_trellis_childtheme_link_shortcode Applies the HTML string for the link to the child theme. If the Hide Footer Links setting is off, Trellis will display a link to the child theme in the footer.\n mv_trellis_comments_template The path to the comments template file. Defaults to an empty string so that the comments.php file from the theme is loaded.\n mv_trellis_copyright_shortcode HTML string for the copyright information shown in the footer.\n mv_trellis_crit_css_min_file_size Specifies the minimum size (in bytes) required to save a Critical CSS file. If the generated Critical CSS for a post or page is below this threshold, Trellis will not create a Critical CSS file.\n mv_trellis_critical_css_rate_limit_in_seconds Applies the rate (in seconds) of calls to the Trellis Critical CSS API when generating critical CSS files.\n mv_trellis_critical_css_timeout_in_seconds Applies the Critical CSS request timeout duration. After this time, if a request has not been answered, it will timeout.\n mv_trellis_css_allowlist Applies a list of CSS selectors that will be kept in the Non-Critical CSS file. Partial selector names can be passed in the array to designate multiple selectors.\n mv_trellis_css_force_keep Applies a list of CSS selectors to be kept in the Critical CSS file. Partial selector names can be passed in the array to designate multiple selectors.\n mv_trellis_css_vars Applies the available CSS variables for styling. Returns an array of CSS variables in ‘name’ =\u003e ‘value’ format.\n mv_trellis_default_featured_image_size Applies the slug of the image size to be used as the featured image size. Defaults to the value of the Featured Image Size setting in the Mediavine Trellis Dashboard.\n mv_trellis_disable_add_async_attribute Disables asynchronous loading on all enqueued scripts.\n mv_trellis_disable_convert_iframe_to_lazyload_when_enabled Disables adding “loading=lazy” attribute to iframes.\n mv_trellis_disable_convert_image_to_lazyload_when_enabled Disables adding “loading=lazy” attribute to images.\n mv_trellis_disable_lazy_load_classes An array of class names on image tags that will disable lazy loading for an image.\n mv_trellis_disable_og_plugin_slugs An array of plugin slugs that will disable Trellis Open Graph output if any are active.\n mv_trellis_disable_process_images Disables processing of all image optimizations.\n mv_trellis_disable_{$this-\u003eslug}_compatibility Disables compatibility code for the specified plugin slug. Compatibility code is written by Mediavine and corresponds to plugins listed in Trellis’ compatibility directory (mediavine-trellis/inc/compatibility).\n mv_trellis_disable_set_image_cls_aspect_styles Disables adding inline aspect ratio styles.\n mv_trellis_disable_set_image_data_pin_attribute Disables adding data-pin-media attribute to images. Allows specifying an alternate version of an image for Pinterest.\n mv_trellis_disable_set_image_dimensions Disables setting image width and height attributes on all images.\n mv_trellis_enable_lazy_load Determines whether lazy loading is enabled for images and iframes.\n mv_trellis_enqueue_child_style Determines whether the child theme style should be enqueued.\n mv_trellis_enable_js_optimizations Determines if JavaScript optimizations are enabled. This is used by compatibility classes for JavaScript optimization plugins. Defaults to True but will read the value of the Trellis setting in the Mediavine Trellis Dashboard.\n mv_trellis_entry_content_classes List of CSS classes added to the entry-content \u003cdiv\u003e.\n mv_trellis_excerpt_image_res The resolution to be applied when getting the excerpt image size. Trellis includes the options of high, med_high, med, and low.\n mv_trellis_excerpt_image_sizes Applies the sizes attribute to excerpt thumbnail images.\n mv_trellis_featured_post_image_res The resolution to be used when getting the featured post thumbnail image. Trellis includes the options of high, med_high, med, and low.\n mv_trellis_featured_post_image_sizes The featured post image sizes attribute.\n mv_trellis_filter_localized_font_types Specifies which font types/formats are allowed to be localized.\n mv_trellis_flags An array of flags that Trellis will look for in the submitted URL. Uses the mvt_flags query parameter.\n mv_trellis_force_disable_critical_css Stops Critical CSS requests.\n mv_trellis_footer_copy_text Sets the footer copyright text before being passed to mv_trellis_copyright_shortcode.\n mv_trellis_get_{$post_type}_meta_fields Applies the Trellis meta fields for a specific post type.\n mv_trellis_google_font_style_{$font_type}_default Applies the default font styles to use for a particular type of Google Font.\n mv_trellis_google_font_style_{$font_type}_{$sanitized_font_name} Applies the font styles for a specific Google font.\n mv_trellis_grow_sidebar_compatibility_styles Used to add to or replace custom styles for Grow Social when the plugin is active.\n mv_trellis_grow_sidebar_margin_space Adjusts the sidebar margin space for the Grow Social sticky sidebar when the plugin is active. Helps to prevent Grow Social from covering content.\n mv_trellis_grow_sidebar_media_query_min_width Allows child themes to adjust the minimum viewport width for when the Grow Social styles are active.\n mv_trellis_grow_sidebar_media_query_max_width Allows child themes to adjust the maximum viewport width for when the Grow Social styles are active.\n mv_trellis_hierarchy The array of file names to use when searching for template parts, in hierarchy of search order.\n mv_trellis_image_orientation Specifies the article nav image orientation. This is the image size passed to mv_trellis_get_attachment_image_tag. Defaults to the value of the Featured Image Size setting in the Mediavine Trellis Dashboard.\n mv_trellis_image_sizes A list of theme images sizes in a key/value format. These options are passed to the Featured Image Size setting in the Mediavine Trelllis Dashboard. The array should contain a label key with the value shown in the user interface, and a value key with the slug.\n mv_trellis_image_sizes_attribute Adjusts the Trellis sizes attribute for an image.\n mv_trellis_js_plugin_name Displays the plugin name responsible for disabling JavaScript optimizations.\n mv_trellis_license_required_settings An array of settings dependent on a Trellis license.\n mv_trellis_link_shortcode HTML string for the link to the Trellis homepage that appears in the site footer.\n mv_trellis_local_script_model Allows overriding of the Mediavine Control Panel (MCP) ad settings for the script wrapper.\n mv_trellis_logo_sources Allows Trellis Images to offer an optimized image version via source tags.\n mv_trellis_match_image_dimensions Determines if Trellis should check that dimensions match the registered image size.\n mv_trellis_mediavine_link_shortcode HTML string for the link to the Mediavine homepage in the site footer.\n mv_trellis_memory_exceeded Returns whether Trellis has exceeded its memory limit. Returns False if the memory limit has not been reached. Memory limit is set via mv_trellis_memory_limit_percent.\n mv_trellis_memory_limit_percent Sets the percentage of available WordPress memory as a decimal. Trellis uses this amount to determine if there is enough memory available for its batch processes.\n mv_trellis_model_sidebar_breakpoint Adjusts the value added for the sidebar breakpoint. This is used by the Mediavine ad script wrapper so that ads are not served when the sidebar is pushed below the content.\n mv_trellis_nonasync_js_handles List of handles where Trellis should not load scripts asynchronously. Should match handles passed to wp_register_script.\n mv_trellis_nonasync_js_urls List of script source URLs that Trellis should not load asynchronously.\n mv_trellis_nonasync_js_prefixes List of handle prefixes where Trellis should not load scripts asynchronously. Prefixes should be at the start of the handles passed to wp_register_script.\n mv_trellis_pages_pagination_args Arguments to be passed to the_posts_pagination. Available arguments are described on the WordPress paginate_links function page.\n mv_trellis_post_link_featured_image_sizes Outputs the sizes attribute in featured image post links.\n mv_trellis_process_content Returns the DOM document to make changes before it’s output to the browser.\n mv_trellis_resolution_sizes List of resolution sizes to associate with image sizes.\n mv_trellis_settings Used to add or modify theme settings whenever the settings are being built or rebuilt. A Flags key can be used to force a value update to the default.\n mv_trellis_settings_groups Used to add or modify theme setting groups or tabs.\n mv_trellis_settings_update Used to specify which settings to update.\n mv_trellis_sidebar_content HTML string for the sidebar. Used internally to apply lazy loading attributes to images.\n mv_trellis_site_title_logo_alt_text Alt text used by the site logo. Defaults to the site name.\n mv_trellis_site_title_logo_classes Class names to be added to site logo \u003cimg\u003etag.\n mv_trellis_site_title_shortcode Adjusts the HTML string for the site title displayed in the site footer. Defaults to the site name.\n mv_trellis_site_title_text_classes Adjusts classes for the site title markup.\n mv_trellis_sw_ignore Lists the paths to be ignored by the PWA service worker.\n mv_trellis_the_title Adjusts the current page/post title.\n mv_trellis_top_breadcrumbs_placement Adjusts the hook targeted to output YOAST SEO breadcrumbs.\n mv_trellis_web_stories_compatibility_styles Adjusts the CSS styles applied to the Web Story archive pages.\n mv_trellis_wordpress_link_shortcode Adjusts the HTML string for the link to WordPress in the site footer.\n","categories":"","description":"An alphabetically-sorted list of available filters in Trellis, showing only the filter name and description. Click on a filter name for detailed information.\n","excerpt":"An alphabetically-sorted list of available filters in Trellis, showing …","ref":"/docsytrellis/reference/filters/filters-summary/","tags":["filters"],"title":"Filters Summary"},{"body":"Trellis provides public functions for child theme developers. You can use them to modify data or functionality in a child theme. You’ll find the function’s name, description, and other pertinent information in the list below.\nNote To view the complete function, look for it within Trellis Core’s functions.php file, located in mediavine-trellis/inc/functions.php.   mv_trellis_get_child_theme Gets the name of the child theme.\nNote Use this function when checking for the existence of Trellis.  Return\n string|null Name of the child theme or null if the name is not found.   mv_trellis_is_core Returns whether Trellis Core is the active theme.\nNote Using the WP Core function is_child_theme() is more reliable and is available earlier.  Return\n bool True if Trellis Core is the active theme, False if a Trellis child theme is active.   mv_trellis_get_template_part Loads the found template part.\nParameters\n $slug string Template file (including path) to search for. $name string|array The mv_trellis_template_type will search through the Trellis template hierarchy for the matching template name. Including an array will limit the files to search from what is specified in the array.  Return\n string The HTML of the matching template part.   mv_trellis_nav_menu Outputs the nav menu with toggle button support.\nParameters\n $args array Arguments to be used in the core wp_nav_menu function. $toggle_btn bool Displays the toggle button. Defaults to False. $toggle_text string Text string to be used in the toggle button. Defaults to “Menu.” $toggle_template_part string Template part to be used for the toggle button. This overrides $toggle_text. Defaults to null.  Return\n string The HTML containing the navigation menu.   mv_trellis_get_attachment_image_tag Returns the best resolution image in an \u003cimg\u003e tag with srcset data.\nParameters\n $img_id int|string Image attachment ID. $img_size string Image size. Defaults to large. $attributes array A key/value array of attributes to be added (such as class). Defaults to none. $highest_res string The max resolution to allow. Defaults to null. $lazy_load bool Whether to add lazy load markup to the image. Defaults to True.  Return\n string|null The HTML \u003cimg\u003e tag or null if no image is available.   mv_trellis_the_attachment_image_tag Echoes the best resolution image in an \u003cimg\u003e tag with srcset data.\nParameters\n $img_id int|string The image attachment ID. $img_size string The image size. $attributes array A Key/value array of attributes added (such as class). $highest_res string The max resolution allowed. $lazy_load bool Whether lazy loaded markup is added to the image.  Return\n string|null The HTML \u003cimg\u003e tag or null if no image is available.   mvt_adjust_excerpt_image_orientation_res Returns the specified resolution size for excerpt featured images.\nParameters\n $orientation string The selected orientation for the image.  Return\n string The resolution size.   mvt_adjust_featured_post_image_orientation_res Returns the specificed resolution size of the excerpt featured image for the featured post.\nParameters\n $orientation string The selected orientation for the image.  Return\n string The resolution size.   mvt_adjust_excerpt_image_sizes( string $sizes ) Adjusts the sizes attribute value for excerpt thumbnail images.\nDefault\n (max-width: 599px) 300px, 270px  Parameters\n $sizes string The value of the image sizes attribute.  Return\n string The adjusted sizes attribute value.   mvt_adjust_featured_post_image_sizes Adjusts the sizes attribute value for the featured post thumbnail images.\nDefault\n (max-width: 340px) calc(100vw - 40px), (max-width: 450px) calc(100vw - 100px), (max-width: 959px) 350px, (max-width: 1134px) 275px, 350px  Parameters\n $sizes string The value of the image sizes attribute.  Return\n string The adjusted sizes attribute value.   mvt_get_image_orientation_res Appends a filtered resolution size to the image orientation. Ensures the specific resolution size of the image is used.\nParameters\n $orientation string The selected orientation for the image. Defaults to empty. $image_res string The selected resolution for the image.  Return\n string The orientation with an appended resolution size.   mv_trellis_set_data Sets data that can be used across template parts.\nParameters\n $data_key string Key of the data. $data_value mixed Value of the data.  Return\n Not applicable. Sets data for retrieval using mv_trellis_get_data.   mv_trellis_get_data Gets data that has been previously set using the mv_trellis_set_data function. This is used for passing data across template parts.\nDefault\n Null, which returns all set data.  Parameters\n $data_key string|null Key of the data to retrieve. If no key is set, all data is retrieved.  Return\n mixed Data from a specified key or all data in an array.   mv_trellis_remove_data Removes data from an array that was set using the mv_trellis_set_data function. Data in the array is available across template parts.\nParameters\n $data_key string The key of the data to remove.  Return\n Not applicable.   mv_trellis_site_title Outputs the HTML of the site title and logo.\nParameters\n $link bool Whether to display the site title and logo wrapped in an anchor tag. Defaults to True.  Return\n string HTML of the site title and logo.   mv_trellis_is_plugin_active Checks to see if a plugin is active based on a specified slug.\nParameters\n $plugin_slug string|array Slug of the plugin or an array of slugs to check.  Return\n bool True if the plugin is active, false if the plugin is not found.   mv_trellis_get_term_description Gets the specified term description. Checks for Genesis data if no description is found.\nParameters\n $term_id int ID of the term. Looks for the current term if an ID is not provided.  Return\n string HTML of the term description.   mv_trellis_get_featured_post Gets the ID of the featured/sticky post displayed on the home page.\nParameters\n None  Return\n int The ID of the featured post.   mv_trellis_the_term_description Echos the term description with optional content before and after. Checks for Genesis data if no description is found.\nParameters\n $before string Content to prepend to the term description. Defaults to empty. $after string Content to append to the term description. Defaults to empty.  Return\n string The term description, complete with any specified before or after content.   mv_trellis_get_asset_url Returns the absolute path of an asset.\nParameters\n $asset_path string An optional relative path to the asset. Defaults to empty.  Return\n string The absolute path to the asset.   mv_trellis_has_flag Returns whether any specified flags are found in the URL.\nParameters\n $flag string The flag.  Return\n bool Whether the specified flag exists in the URL.   mv_trellis_entry_taxonomies Returns a list of taxonomies, if they exist.\nParameters\n $sep string The separator to use for the taxonomies. Defaults to comma.  Return\n string A list of taxonomies with the separator between them.   mv_trellis_entry_tags Outputs a list of tags, if they exist, with optional content before or after the list.\nParameters\n $before string The content to display before the tags. Defaults to empty. $sep string The separator to use between the returned tags. Defaults to comma. $after string The content to display after the tags. Defaults to empty.  Return\n string A list of tags with appended and prepended content, using specified separators.   mv_trellis_entry_author Outputs the entry’s author.\nParameters\n None  Return\n string The author name.   mv_trellis_is_meta_item_enabled Checks to see if a meta option (like category count or author) is selected in a Post Meta location.\nParameters\n $item_slug string Slug of the meta item. $meta_location string Location of where the meta item is set to output. Trelis Core defaults to using post_meta_top or post_meta_bottom as the possible locations.  Return\n bool Whether the post meta item is set for the specified location.   mv_trellis_yoast_breadcrumbs Outputs Yoast Breadcrumbs markup if Yoast SEO is available.\nParameters\n None  Return\n string HTML markup of Yoast breadcrumb data.   mv_trellis_entry_date Outputs the entry publish date or updated date (if the entry has been updated).\nParameters\n None  Return\n string Publish date or updated date of the entry.   mv_trellis_the_posts_pagination Displays archive/feed pagination controls using arguments passed by the mv_trellis_pages_pagination_args filter.\nParameters\n Customize arguments in your functions.php file by using the mv_trellis_pages_pagination_args filter. See Filters for more information.  Return\n string HTML output of the pagination links.   mv_trellis_the_title Outputs a title (page, author, category, etc.) with optional content before or after.\nParameters\n $before string Content or markup to be output before the title. Defaults to empty. $after string Content or markup to be output after the title. Defaults to empty. $echo bool Whether the title content will be echoed. Defaults to True.  Return\n string The title, complete with optional content before or after.   mv_trellis_output_sidebar Outputs the sidebars. Content is first run through the mv_trellis_sidebar_content filter.\nParameters\n $sidebar_id string The sidebar id to process.  Return\n string HTML content of the specified sidebar.   mv_trellis_get_featured_image_tag Gets the HTML tag of the featured image.\nParameters\n $post_id int Optional post ID. $attr array Attributes array. Defaults to empty. $echo bool Whether to echo the tag or return. Optional, but defaults to True.  Return\n string|null HTML of the featured image or null if $echo is false.   mv_trellis_get_wp_kses_post_with_images Adds image and style related tags (including attributes) to the default list for posts. Used to sanitize Trellis DOM manipulations and image handling.\nParameters\n None  Return\n array A list of image and style tags.   mv_trellis_entry_content_class Outputs a class attribute for the entry-content container. Includes classes specified by the mv_trellis_entry_content_classes filter.\nParameters\n $class string|array A string or array of additional classes to be added to the entry-content class attribute.  Return\n string Complete list of classes to be added to the entry-content class attribute.   mv_trellis_purge_all_critical_css Deletes all site Critical CSS and removes any pending rebuild requests.\nParameters\n None  Return\n Not applicable   mv_trellis_purge_page_critical_css Deletes Critical CSS files for a specific post or page.\nParameters\n $id int|string Post or page id. Used to get the post or page slug when the slug is not provided. $slug string Post or page slug.  Return\n Not applicable.  ","categories":"","description":"","excerpt":"Trellis provides public functions for child theme developers. You can …","ref":"/docsytrellis/reference/functions/","tags":"","title":"Functions"},{"body":"This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you’d like to copy its docs section.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\nWhat’s in This Section? ","categories":"","description":"","excerpt":"This section is where the user documentation for your project lives - …","ref":"/docsytrellis/advanced-topics/","tags":"","title":"Advanced Topics"},{"body":"Trellis provides a number of filters that can be used to modify data or functionality in a child theme. You’ll find the filter’s name, description, syntax, default value, and any arguments it accepts in the list below.\nNote While the syntax is shown using the apply_filters() function, these filters can also be used with add_filter().   mvt_processing_css_status_timeout Sets the timeout period for the Processing state in Critical CSS.\napply_filters( 'mvt_processing_css_status_timeout', int $value) Default\n 7200 seconds (2 hours) from the current time.  Arguments\n $value int The amount of time measured in seconds since the Unix Epoch (January 1, 1970 00:00:00 GMT).   mvt_requires_default_wp_fields Description\nDetermines whether default WordPress comment fields should be used in the comments_form call in comments.php. If Trellis Comments are enabled, WordPress comment fields are not used.\napply_filters('mvt_requires_default_wp_fields', bool $value) Default\n False if Trellis Comments are enabled, True if Trellis Comments are disabled.  Arguments\n $value bool Whether to use default WordPress comment fields.   mv_trellis_about_widget_image_height Applied to the height attribute on the About Widget \u003cimg\u003e tag.\napply_filters('mv_trellis_about_widget_image_height', int $height) Default\n 100  Arguments\n $height int The height of the About Widget image in pixels.   mv_trellis_about_widget_image_width Applied to the width attribute on the About Widget \u003cimg\u003e tag.\napply_filters( 'mv_trellis_about_widget_image_width', int $width) Default\n 100  Arguments\n $width int The width of the About Widget image in pixels.   mv_trellis_about_widget_image_size The registered size to be used for the About Widget image. This can be a Trellis image size, a WordPress image size, or a custom size.\napply_filters('mv_trellis_about_widget_image_size', string $img_size) Default\n mv_trellis_1x1_low_res  Arguments\n $img_size string The registered image size.   mv_trellis_about_widget_image_sizes Applied to the sizes attribute value for the About Widget thumbnail.\napply_filters('mv_trellis_about_widget_image_sizes', string $sizes) Default\n 100px  Arguments\n $sizes string The value of the About Widget thumbnail sizes attribute.   mv_trellis_admin_runtime_dependencies Lists the registered dependencies needed for the mv-trellis/runtime script.\napply_filters('mv_trellis_admin_runtime_dependencies', array $list) Default\n Empty array  Arguments\n $list array A list of registered dependencies.   mv_trellis_allowed_google_fonts Returns a list of allowed Google Fonts to be supplied to Body Font and Heading Font settings. Array keys are the labels provided to the settings and the values are the CSS values.\napply_filters('mv_trellis_allowed_google_fonts', array $list) Default\n'Abril Fatface' =\u003e '\"Abril Fatface\",serif', 'Amatic SC' =\u003e '\"Amatic SC\",cursive,serif', 'Crimson Text' =\u003e '\"Crimson Text\",serif', 'Great Vibes' =\u003e '\"Great Vibes\",cursive,serif', 'Inconsolata' =\u003e 'Inconsolata,monospace', 'Libre Baskerville' =\u003e '\"Libre Baskerville\",serif', 'Lato' =\u003e 'Lato,sans-serif', 'Lora' =\u003e 'Lora,serif', 'Merriweather' =\u003e 'Merriweather,serif', 'Mr De Haviland' =\u003e '\"Mr De Haviland\",cursive,serif', 'Noto Serif' =\u003e '\"Noto Serif\",serif', 'Open Sans' =\u003e '\"Open Sans\",sans-serif', 'Poppins' =\u003e 'Poppins,sans-serif', 'Playball' =\u003e '\"Playball\",fantasy,serif', 'Playfair Display' =\u003e '\"Playfair Display\",serif', 'Raleway' =\u003e 'Raleway,sans-serif', 'Roboto Slab' =\u003e '\"Roboto Slab\",serif', 'Tangerine' =\u003e 'Tangerine,cursive,serif', 'Work Sans' =\u003e '\"Work Sans\",sans-serif', Arguments\n $list array Key/value list of allowed Google Fonts.   mv_trellis_allowed_non_google_fonts Returns a list of web safe fonts to be supplied to Body Font and Heading Font settings. Array keys are the labels provided to the settings and the values are the CSS values.\napply_filters('mv_trellis_allowed_non_google_fonts', array $list) Default\n'Arial (Web Safe)' =\u003e 'Arial,\"Helvetica Neue\",Helvetica,sans-serif', 'Baskerville (Web Safe)' =\u003e 'Baskerville,\"Baskerville Old Face\",\"Hoefler Text\",Garamond,\"Times New Roman\",serif', 'Book Antiqua (Web Safe)' =\u003e '\"Book Antiqua\",Palatino,\"Palatino Linotype\",\"Palatino LT STD\",Georgia,serif', 'Calibri (Web Safe)' =\u003e 'Calibri,Candara,Segoe,\"Segoe UI\",Optima,Arial,sans-serif', 'Cambria (Web Safe)' =\u003e 'Cambria,Georgia,serif', 'Century Gothic (Web Safe)' =\u003e '\"Century Gothic\",CenturyGothic,AppleGothic,sans-serif', 'Constantia (Web Safe)' =\u003e 'Constantia,\"Lucida Bright\",Lucidabright,\"Lucida Serif\",Lucida,\"DejaVu Serif\",\"Bitstream Vera Serif\",\"Liberation Serif\",Georgia,serif', 'Courier New (Web Safe)' =\u003e '\"Courier New\",Courier,\"Lucida Sans Typewriter\",\"Lucida Typewriter\",monospace', 'Franklin Gothic (Web Safe)' =\u003e '\"Franklin Gothic Medium\",\"Franklin Gothic\",\"ITC Franklin Gothic\",Arial,sans-serif', 'Futura (Web Safe)' =\u003e 'Futura,\"Trebuchet MS\",Arial,sans-serif', 'Garamond (Web Safe)' =\u003e 'Garamond,Baskerville,\"Baskerville Old Face\",\"Hoefler Text\",\"Times New Roman\",serif', 'Georgia (Web Safe)' =\u003e 'Georgia,Times,\"Times New Roman\",serif', 'Gill Sans (Web Safe)' =\u003e '\"Gill Sans\",\"Gill Sans MT\",Calibri,sans-serif', 'Lucida Bright (Web Safe)' =\u003e '\"Lucida Bright\",Georgia,serif', 'Palatino (Web Safe)' =\u003e 'Palatino,\"Palatino Linotype\",\"Palatino LT STD\",\"Book Antiqua\",Georgia,serif', 'System Default (Web Safe)' =\u003e 'system,-apple-system,\".SFNSText-Regular\",\"San Francisco\",\"Roboto\",\"Segoe UI\",\"Helvetica Neue\",\"Lucida Grande\",sans-serif', 'Tahoma (Web Safe)' =\u003e 'Tahoma,Verdana,Segoe,sans-serif', 'Times New Roman (Web Safe)' =\u003e 'TimesNewRoman,\"Times New Roman\",Times,Baskerville,Georgia,serif', 'Trebuchet (Web Safe)' =\u003e '\"Trebuchet MS\",\"Lucida Grande\",\"Lucida Sans Unicode\",\"Lucida Sans\",Tahoma,sans-serif', 'Verdana (Web Safe)' =\u003e 'Verdana,Geneva,sans-serif', Arguments\n $list array Key/value list of allowed Non-Google fonts.   mv_trellis_always_scan_template_files Determines if the Trellis template part files should be scanned on every page load. When set to False, Trellis will only scan template part files upon activation, update, or when clearing the Trellis cache.\napply_filters( 'mv_trellis_always_scan_template_files', bool $value ) Default\n False  Arguments\n $value bool Whether to scan on every page load.   mv_trellis_article_nav_image_orientation Applies the image orientation for post navigation images.\napply_filters( 'mv_trellis_article_nav_image_orientation', string $orientation ) Default\n mv_trellis_4x3  Arguments\n $orientation string The image orientation as set by the Featured Image Size setting in the Mediavine Trellis Dashboard. Default options include mv_trellis_1x1, mv_trellis_3x4, mv_trellis_4x3, mv_trellis_16x9, and full.   mv_trellis_article_nav_image_res Applies the resolution to be used for the post navigation image size.\napply_filters( 'mv_trellis_article_nav_image_res', string $value ) Default\n low  Arguments\n $value string The image resolution to use for the post navigation size. Default options include high, med_high, med, and low.   mv_trellis_async_styles_ignore A list of filepaths to ignore from asynchronous stylesheet loading on the site’s front-end.\napply_filters( 'mv_trellis_async_styles_ignore', array $list ) Default\n Empty array  Arguments\n $list array List of filepaths to ignore.   mv_trellis_base_gutters Applies to the base gutter sizes used for layout spacing. A value (in pixels) represents the amount of space to apply between layout elements. Uses the Layout Space setting in the Mediavine Trellis Dashboard. Defaults to Comfortable. These values impact the base padding and margin values used by Trellis CSS variables:\n gutter-small = base/2 gutter = base gutter-double = base * 2 gutter-large = base * 2.5  The return value should match one of the specified keys.\napply_filters( 'mv_trellis_base_gutters', array $base_gutters ) Default\n [ ‘Compact’ =\u003e 10, ‘Comfortable’ =\u003e 20 ]  Arguments\n $base_gutters array The base values for Compact and Comfortable spacing.   mv_trellis_before_update_{$setting[’slug’]} Filters a Trellis setting before updating it in the options table. This provides a way to trigger an action before the value is saved.\nFor example, when changing the featured image size, a developer might want to make sure all of the image sizes used in the srcset are generated.\napply_filters( 'mv_trellis_before_update_' . $setting['slug'], array $setting ) Default\n Array of all the Trellis setting data.  Arguments\n $setting array The specified setting data.   mv_trellis_childtheme_link_shortcode Applies the HTML string for the link to the child theme. If the Hide Footer Links setting is off, Trellis will display a link to the child theme in the footer.\napply_filters( 'mv_trellis_childtheme_link_shortcode', string $output, array $atts ) Default\n The HTML link to the Trellis Framework, currently https://mediavine.com/.  Arguments\n $output string HTML output of the shortcode. $atts array List of shortcode attributes.   mv_trellis_comments_template The path to the comments template file. Defaults to an empty string so that the comments.php file from the theme is loaded.\napply_filters( 'mv_trellis_comments_template', string $comments_template_file ); Default\n Empty  Arguments\n $comments_template_file string The location of the comments template file.   mv_trellis_copyright_shortcode HTML string for the copyright information shown in the footer.\napply_filters( 'mv_trellis_copyright_shortcode', string $output, array $atts ) Default\n Copyright © {current_year} {site_title}  Arguments\n $output string HTML copyright output of the shortcode. $atts array List of shortcode attributes.   mv_trellis_crit_css_min_file_size Specifies the minimum size (in bytes) required to save a Critical CSS file. If the generated Critical CSS for a post or page is below this threshold, Trellis will not create a Critical CSS file.\napply_filters('mv_trellis_crit_css_min_file_size', int $min_crit_css_size\t) Default\n 2048  Arguments\n $min_crit_css_size int Minimum size in bytes.   mv_trellis_critical_css_rate_limit_in_seconds Applies the rate (in seconds) of calls to the Trellis Critical CSS API when generating critical CSS files.\napply_filters( 'mv_trellis_critical_css_rate_limit_in_seconds', int|bool $critical_css_rate_limit_in_seconds ); Default\n 30  Arguments\n $critical_css_rate_limit_in_seconds int|bool Rate limit in seconds. Set to False to disable critical CSS rate limiting.   mv_trellis_critical_css_timeout_in_seconds Applies the Critical CSS request timeout duration. After this time, if a request has not been answered, it will timeout.\napply_filters( 'mv_trellis_critical_css_timeout_in_seconds', int|bool $value ) Default\n 172800 ( two days)  Arguments\n $critical_css_timeout_in_seconds int|bool Timeout duration in seconds. Set to False to allow Critical CSS requests indefinitely.   mv_trellis_css_allowlist Applies a list of CSS selectors that will be kept in the Non-Critical CSS file. Partial selector names can be passed in the array to designate multiple selectors.\napply_filters( 'mv_trellis_css_allowlist', array $bypass_settings ) Default\n Empty array  Arguments\n $bypass_settings array List of CSS selectors that will be kept in the secondary Non-Critical CSS file.   mv_trellis_css_force_keep Applies a list of CSS selectors to be kept in the Critical CSS file. Partial selector names can be passed in the array to designate multiple selectors.\napply_filters( 'mv_trellis_css_force_keep', array $force_keep_settings ); Default\n Empty array  Arguments\n $force_keep_settings array List of CSS selectors to be kept in the primary Critical CSS file.   mv_trellis_css_vars Applies the available CSS variables for styling. Returns an array of CSS variables in ‘name’ =\u003e ‘value’ format.\napply_filters( 'mv_trellis_css_vars', array $css_vars, array $css_options ) Default\nVariable values are those set in the Mediavine Trellis Dashboard.\n'color-body' =\u003e $css_options['color_body'], 'color-link' =\u003e $css_options['color_link'], 'color-link-hover' =\u003e $css_options['color_link_hover'], 'font-body' =\u003e $css_options['google_font_body'], 'font-heading' =\u003e $css_options['google_font_heading'], 'font-size-ex-sm' =\u003e $base_font_fl * 0.667 . 'rem', 'font-size-sm' =\u003e $base_font_fl * 0.875 . 'rem', 'font-size' =\u003e $css_options['font_size'], 'font-size-lg' =\u003e $base_font_fl * 1.125 . 'rem', 'color-primary' =\u003e '#' . str_replace( '#', '', $primary_color ), 'color-link' =\u003e 'var(--mv-trellis-color-primary)', 'color-secondary' =\u003e '#' . str_replace( '#', '', $secondary_color ), 'color-link-hover' =\u003e 'var(--mv-trellis-color-secondary)', 'max-logo-size' =\u003e $max_logo_size; Arguments\n $css_vars array List of CSS variables in ‘name’ =\u003e ‘value’ format. $css_options array CSS variable options set in the theme’s functions.   mv_trellis_default_featured_image_size Applies the slug of the image size to be used as the featured image size. Defaults to the value of the Featured Image Size setting in the Mediavine Trellis Dashboard.\napply_filters( 'mv_trellis_default_featured_image_size', array $default ) Default\n mv_trellis_4x3  Arguments\n $default array The default image size to use, including optional resolution sizes.   mv_trellis_disable_add_async_attribute Disables asynchronous loading on all enqueued scripts.\napply_filters( 'mv_trellis_disable_add_async_attribute', bool $value ) Default\n False  Arguments\n $value bool Whether to disable asynchronous loading of scripts.   mv_trellis_disable_convert_iframe_to_lazyload_when_enabled Disables adding “loading=lazy” attribute to iframes.\napply_filters( 'mv_trellis_disable_convert_iframe_to_lazyload_when_enabled', bool $value ) Default\n False  Arguments\n $value bool Whether to disable adding “loading=lazy” attribute to iframes.   mv_trellis_disable_convert_image_to_lazyload_when_enabled Disables adding “loading=lazy” attribute to images.\napply_filters( 'mv_trellis_disable_convert_image_to_lazyload_when_enabled', bool $value ) Default\n False  Arguments\n $value bool Whether to disable adding “loading=lazy” attribute to images.   mv_trellis_disable_lazy_load_classes An array of class names on image tags that will disable lazy loading for an image.\napply_filters( 'mv_trellis_disable_lazy_load_classes', array $values ) Default\n [‘no-lazyload’]  Arguments\n $values array List of classes that will not be lazy loaded.   mv_trellis_disable_og_plugin_slugs An array of plugin slugs that will disable Trellis Open Graph output if any are active.\napply_filters( 'mv_trellis_disable_og_plugin_slugs', array $disable_og_plugin_slugs ) Default\n [‘wordpress-seo’]  Arguments\n $disable_og_plugin_slugs array A list of plugin slugs that disable Trellis Open Graph output.   mv_trellis_disable_process_images Disables processing of all image optimizations.\napply_filters( 'mv_trellis_disable_process_images', bool $value ) Default\n False  Arguments\n $value bool Whether to disable image processing on all images.   mv_trellis_disable_{$this-\u003eslug}_compatibility Disables compatibility code for the specified plugin slug. Compatibility code is written by Mediavine and corresponds to plugins listed in Trellis’ compatibility directory (mediavine-trellis/inc/compatibility).\napply_filters( \"mv_trellis_disable_{$this-\u003eslug}_compatibility\", bool $value ) Default\n False  Arguments\n $value bool Whether to disable compatibility code for the specified plugin slug.   mv_trellis_disable_set_image_cls_aspect_styles Disables adding inline aspect ratio styles.\napply_filters( 'mv_trellis_disable_set_image_cls_aspect_styles', bool $value ) Default\n False  Arguments\n $value bool Whether to disable adding inline aspect ratio styles.   mv_trellis_disable_set_image_data_pin_attribute Disables adding data-pin-media attribute to images. Allows specifying an alternate version of an image for Pinterest.\napply_filters( 'mv_trellis_disable_set_image_data_pin_attribute', bool $value ) Default\n False  Arguments\n $value bool Whether to disable adding data-pin-media attribute.   mv_trellis_disable_set_image_dimensions Disables setting image width and height attributes on all images.\napply_filters( 'mv_trellis_disable_set_image_dimensions', bool $value ) Default\n False  Arguments\n $value bool Whether to disable setting image dimension attributes.   mv_trellis_enable_lazy_load Determines whether lazy loading is enabled for images and iframes.\n ✏️ **Note:** Mediavine recommends keeping lazy loading on for the best performance.  apply_filters( 'mv_trellis_enable_lazy_load', bool $value ) Default\n True  Arguments\n $value bool Whether lazy loading is enabled or disabled.   mv_trellis_enqueue_child_style Determines whether the child theme style should be enqueued.\napply_filters( 'mv_trellis_enqueue_child_style', bool $value ) Default\n True  Arguments\n $value bool Whether the child style is enqueued or not.   mv_trellis_enable_js_optimizations Determines if JavaScript optimizations are enabled. This is used by compatibility classes for JavaScript optimization plugins. Defaults to True but will read the value of the Trellis setting in the Mediavine Trellis Dashboard.\napply_filters( 'mv_trellis_enable_js_optimizations', bool $value ) Default\n True  Arguments\n $value bool Whether JavaScript optimizations should be enabled.   mv_trellis_entry_content_classes List of CSS classes added to the entry-content \u003cdiv\u003e.\napply_filters( 'mv_trellis_entry_content_classes', array $class ) Default\n Empty array  Arguments\n $class array List of classes added to entry-content.   mv_trellis_excerpt_image_res The resolution to be applied when getting the excerpt image size. Trellis includes the options of high, med_high, med, and low.\napply_filters( 'mv_trellis_excerpt_image_res', string $image_res ) Default\n low  Arguments\n $image_res string The image resolution.   mv_trellis_excerpt_image_sizes Applies the sizes attribute to excerpt thumbnail images.\napply_filters( 'mv_trellis_excerpt_image_sizes', string $sizes ) Default\n (max-width: 599px) 300px, 270px  Arguments\n $sizes string The sizes attribute value of excerpt thumbnail images.   mv_trellis_featured_post_image_res The resolution to be used when getting the featured post thumbnail image. Trellis includes the options of high, med_high, med, and low.\n$image_res = apply_filters( 'mv_trellis_featured_post_image_res', string $image_res ); Default\n med  Arguments\n $image_res string The featured post thumbnail image resolution.   mv_trellis_featured_post_image_sizes The featured post image sizes attribute.\napply_filters( 'mv_trellis_featured_post_image_sizes', string $sizes ) Default\n (max-width: 340px) calc(100vw - 40px), (max-width: 450px) calc(100vw - 100px), (max-width: 959px) 350px, (max-width: 1134px) 275px, 350px  Arguments\n $sizes string The value of the sizes attribute for featured post images.   mv_trellis_filter_localized_font_types Specifies which font types/formats are allowed to be localized.\napply_filters( 'mv_trellis_filter_localized_font_types', array $font_types ) Default\n [ ‘woff2’]  Arguments\n $font_types array List of types/formats of fonts to localize.   mv_trellis_flags An array of flags that Trellis will look for in the submitted URL. Uses the mvt_flags query parameter.\napply_filters( 'mv_trellis_flags', array $flags ) Default\n Empty array  Arguments\n $flags array List of Trellis URL flags.   mv_trellis_force_disable_critical_css Stops Critical CSS requests.\napply_filters( 'mv_trellis_force_disable_critical_css', bool $value ) Default\n False  Arguments\n $value bool Whether to disable Critical CSS processing.   mv_trellis_footer_copy_text Sets the footer copyright text before being passed to mv_trellis_copyright_shortcode.\napply_filters( 'mv_trellis_footer_copy_text', string $copy_text ) Default\n Copyright and footer links text.  Arguments\n $copy_text string Contents of the copyright text.   mv_trellis_get_{$post_type}_meta_fields Applies the Trellis meta fields for a specific post type.\napply_filters( 'mv_trellis_get_' . string $post_type . '_meta_fields', array $fields ) Default\n Empty array  Arguments\n $fields array Trellis-specific meta fields and their attributes.   mv_trellis_google_font_style_{$font_type}_default Applies the default font styles to use for a particular type of Google Font.\napply_filters( \"mv_trellis_google_font_style_{$font_type}_default\", array $google_font_style ) Default\n [ ‘400’, ‘400i’, ‘700’, ‘700i’ ]  Arguments\n $google_font_style array A list of styles to load.   mv_trellis_google_font_style_{$font_type}_{$sanitized_font_name} Applies the font styles for a specific Google font.\napply_filters( \"mv_trellis_google_font_style_{$font_type}_{$sanitized_font_name}\", array $google_font_style ) Default\n [ ‘400’, ‘400i’, ‘700’, ‘700i’ ]  Arguments\n $google_font_style array A list of styles to load for a particular font.   mv_trellis_grow_sidebar_compatibility_styles Used to add to or replace custom styles for Grow Social when the plugin is active.\napply_filters( 'mv_trellis_grow_sidebar_compatibility_styles', string $grow_sidebar_styles ) Default\n@media only screen and (min-width: ' . $media_query_min_width . ') and (max-width: ' . $media_query_max_width . ') { .has-grow-sidebar .content \u003e .wrapper,.has-grow-sidebar .footer \u003e .wrapper {' . $sidebar_margin_css . '} .has-grow-sidebar .wrapper-content {padding-left:10px;padding-right:10px;} } @media only screen and (max-width:1184px) { .has-grow-sidebar .widget-container.mv_trellis_mobile_hide{display:none;} .has-grow-sidebar .wrapper-content{display:block;} } Arguments\n $grow_sidebar_styles string CSS styles to adjust the display of the Grow Social floating sidebar when it’s active.   mv_trellis_grow_sidebar_margin_space Adjusts the sidebar margin space for the Grow Social sticky sidebar when the plugin is active. Helps to prevent Grow Social from covering content.\napply_filters( 'mv_trellis_grow_sidebar_margin_space', string $value ) Default\n 60px  Arguments\n $value string The margin to be used (in pixels).   mv_trellis_grow_sidebar_media_query_min_width Allows child themes to adjust the minimum viewport width for when the Grow Social styles are active.\napply_filters( 'mv_trellis_grow_sidebar_media_query_min_width', string $value ) Default\n 721px  Arguments\n $value string Specifies the min width that these styles are applied.   mv_trellis_grow_sidebar_media_query_max_width Allows child themes to adjust the maximum viewport width for when the Grow Social styles are active.\napply_filters( 'mv_trellis_grow_sidebar_media_query_max_width', string $value ) Default\n 1350px  Arguments\n $value string Specifies the max width that these styles are applied.   mv_trellis_hierarchy The array of file names to use when searching for template parts, in hierarchy of search order.\nDefault\n ✏️ **Note:** This list shows the default name and order of template parts to search in plain text, but an array must be passed as an argument to the filter.  1. {$slug}-front-page-{$theme_style}.php 2. {$slug}-front-page.php 3. {$slug}-home-{$theme_style}.php 4. {$slug}-home.php 5. {$slug}-author-{$theme_style}.php 6. {$slug}-author.php 7. {$slug}-category-{$theme_style}.php 8. {$slug}-category.php 9. {$slug}-archive-{$post_type}-{$theme_style}.php 10. {$slug}-archive-{$post_type}.php 11. {$slug}-taxonomy-{$theme_style}.php 12. {$slug}-taxonomy.php 13. {$slug}-date-{$theme_style}.php 14. {$slug}-date.php 15. {$slug}-tag-{$theme_style}.php 16. {$slug}-tag.php 17. {$slug}-archive-{$theme_style}.php 18. {$slug}-archive.php 19. {$slug}-{$post_type}-{$theme_style}.php 20. {$slug}-{$post_type}.php 21. {$slug}-singular-{$theme_style}.php 22. {$slug}-singular.php 23. {$slug}-search-{$theme_style}.php 24. {$slug}-search.php 25. {$slug}-404-{$theme_style}.php 26. {$slug}-404.php 27. {$slug}-{$theme_style}.php 28. {$slug}.php Arguments\n $parts_to_search array List of template parts in the file search order.   mv_trellis_image_orientation Specifies the article nav image orientation. This is the image size passed to mv_trellis_get_attachment_image_tag. Defaults to the value of the Featured Image Size setting in the Mediavine Trellis Dashboard.\napply_filters( 'mv_trellis_image_orientation', string $orientation ) Default\n mv_trellis_4x3  Arguments\n $orientation string The slug of the image orientation.   mv_trellis_image_sizes A list of theme images sizes in a key/value format. These options are passed to the Featured Image Size setting in the Mediavine Trelllis Dashboard. The array should contain a label key with the value shown in the user interface, and a value key with the slug.\napply_filters( 'mv_trellis_image_sizes', array $options ) Default\n Array of Trellis custom image sizes in slug =\u003e name format.  Arguments\n $options array Theme image sizes in a key/value format.   mv_trellis_image_sizes_attribute Adjusts the Trellis sizes attribute for an image.\napply_filters( 'mv_trellis_image_sizes_attribute', string $sizes, string|array $size, string|null $image_src, array|null $image_meta, int $attachment_id ) Default\n (max-width: 760px) calc(100vw - ' . $css_gutter_double . ‘), 720px  Arguments\n $sizes string A source size value for use in a sizes attribute. $size string|array The requested image size. It can be any registered image size name or an array of width and height values in pixels (in that order). $image_src string|null The URL to the image file or null. $image_meta array|null The image metadata as returned by wp_get_attachment_metadata or null. $attachment_id int The image attachment ID of the original image or 0. If set to 0, only $image_meta is used.   mv_trellis_js_plugin_name Displays the plugin name responsible for disabling JavaScript optimizations.\napply_filters( 'mv_trellis_js_plugin_name', string $value ) Default\n Empty  Arguments\n $value string The plugin name.   mv_trellis_license_required_settings An array of settings dependent on a Trellis license.\napply_filters( 'mv_trellis_license_required_settings', array $license_dependent ) Default\n$license_dependent = [ 'google_font_body', 'google_font_heading', 'featured_image_size', 'google_analytics_delay', 'hide_footer_links', 'enable_pwa', 'site_logo', 'primary_css_color', 'secondary_css_color', 'background_accent_css_color', 'max_logo_size', 'el_comfort_level', 'pwa_short_name', 'pwa_theme_color', 'site_icon', 'js_optimizations', ]; Arguments\n $license_dependent array List of slugs for settings that are dependent on a license.   mv_trellis_link_shortcode HTML string for the link to the Trellis homepage that appears in the site footer.\napply_filters( 'mv_trellis_link_shortcode', string $output, array $atts ) Default\n\u003ca href=\"https://mediavine.com/\" target=\"_blank\" rel=\"noopener nofollow\"\u003eTrellis Framework\u003c/a\u003e Arguments\n $output string HTML Trellis link output. $atts array Trellis link shortcode attributes.   mv_trellis_local_script_model Allows overriding of the Mediavine Control Panel (MCP) ad settings for the script wrapper.\napply_filters( 'mv_trellis_local_script_model', array $local_model_default_values ) Default\n$local_model_default_values = [ 'optimize_mobile_pagespeed' =\u003e true, 'optimize_desktop_pagespeed' =\u003e true, 'content_selector' =\u003e '.mvt-content', 'footer_selector' =\u003e 'footer.footer', 'content_selector_mobile' =\u003e '.mvt-content', 'comments_selector' =\u003e '', 'sidebar_atf_selector' =\u003e '.sidebar-primary .widget-container:nth-last-child(3)', 'sidebar_atf_position' =\u003e 'afterend', 'sidebar_btf_selector' =\u003e '.mv-sticky-slot', 'sidebar_btf_position' =\u003e 'beforeend', 'content_stop_selector' =\u003e '', 'sidebar_btf_stop_selector' =\u003e 'footer.footer', 'custom_css' =\u003e '', 'ad_box' =\u003e true, /** * Filters the value added to the model for the sidebar breakpoint. Default is 1135. * (Advanced use) * * @param string The last pixel width that the sidebar is viewable */ 'sidebar_minimum_width' =\u003e apply_filters( 'mv_trellis_model_sidebar_breakpoint', '1135' ), ]; Arguments\n $local_model_values array Key/value pairs to override.   mv_trellis_logo_sources Allows Trellis Images to offer an optimized image version via source tags.\napply_filters( 'mv_trellis_logo_sources', '', array $img_html ) Default\n$img_html = mv_trellis_get_attachment_image_tag( $logo_id, 'full', [ 'class' =\u003e $image_classes, 'alt' =\u003e $alt_text, 'data-pin-nopin' =\u003e 'true', ], null, false ); Arguments\n $img_html array Arguments for getting logo sources.   mv_trellis_match_image_dimensions Determines if Trellis should check that dimensions match the registered image size.\napply_filters( 'mv_trellis_match_image_dimensions', bool $value, int $img_id, string $img_size ) Default\n False  Arguments\n $value bool Whether the image dimensions should match. $img_id int The ID of the image. $img_size string The size of the image.   mv_trellis_mediavine_link_shortcode HTML string for the link to the Mediavine homepage in the site footer.\napply_filters( 'mv_trellis_mediavine_link_shortcode', string $output, array $atts ) Default\n\u003ca href=\"https://www.mediavine.com/\" target=\"_blank\" rel=\"noopener nofollow\"\u003eMediavine\u003c/a\u003e Arguments\n $output string Mediavine link output. $atts array Mediavine link shortcode attributes.   mv_trellis_memory_exceeded Returns whether Trellis has exceeded its memory limit. Returns False if the memory limit has not been reached. Memory limit is set via mv_trellis_memory_limit_percent.\napply_filters( 'mv_trellis_memory_exceeded', bool $return ) Default\n False  Arguments\n $return bool Whether Trellis has exceeded its memory limit.   mv_trellis_memory_limit_percent Sets the percentage of available WordPress memory as a decimal. Trellis uses this amount to determine if there is enough memory available for its batch processes.\napply_filters( 'mv_trellis_memory_limit_percent', float $value ) Default\n 0.9  Arguments\n $percent_of_memory float The percentage of available WordPress memory Trellis can use.   mv_trellis_model_sidebar_breakpoint Adjusts the value added for the sidebar breakpoint. This is used by the Mediavine ad script wrapper so that ads are not served when the sidebar is pushed below the content.\napply_filters( 'mv_trellis_model_sidebar_breakpoint', string $value ) Default\n 1135  Arguments\n $value string The last pixel width that the sidebar is viewable.   mv_trellis_nonasync_js_handles List of handles where Trellis should not load scripts asynchronously. Should match handles passed to wp_register_script.\napply_filters( 'mv_trellis_nonasync_js_handles', array $disallowed_handles ) Default\n Empty array  Arguments\n $disallowed_handles array List of handles to be compared against.   mv_trellis_nonasync_js_urls List of script source URLs that Trellis should not load asynchronously.\napply_filters( 'mv_trellis_nonasync_js_urls', array $disallowed_urls) Default\n Empty array  Arguments\n $disallowed_urls array List of URLs to be compared against.   mv_trellis_nonasync_js_prefixes List of handle prefixes where Trellis should not load scripts asynchronously. Prefixes should be at the start of the handles passed to wp_register_script.\napply_filters( 'mv_trellis_nonasync_js_prefixes', $disallowed_prefixes ) Default\n Empty array  Arguments\n $disallowed_prefixes array List of handle prefixes to be compared against.   mv_trellis_pages_pagination_args Arguments to be passed to the_posts_pagination. Available arguments are described on the WordPress paginate_links function page.\napply_filters( 'mv_trellis_pages_pagination_args', array $posts_pagination_args ) Default\n Empty array  Arguments\n $posts_pagination_args array Arguments for displaying pagination links.   mv_trellis_post_link_featured_image_sizes Outputs the sizes attribute in featured image post links.\napply_filters( 'mv_trellis_post_link_featured_image_sizes', string $sizes ) Default\n (max-width: 599px) 320px, (max-width: 700px) calc(50vw - 30px), 320px  Arguments\n $sizes string Contents of the sizes attribute for featured images in post links.   mv_trellis_process_content Returns the DOM document to make changes before it’s output to the browser.\napply_filters( 'mv_trellis_process_content', \\DOMDocument $content_dom ) Default\n DOMDocument of the content being processed (the_content or primary sidebar).  Arguments\n $content_dom \\DOMDocument The DOMDocument content.   mv_trellis_resolution_sizes List of resolution sizes to associate with image sizes.\napply_filters( 'mv_trellis_resolution_sizes', array $resolution_sizes, array $custom_image_sizes ) Default\n [ ‘high’, ‘med_high’, ‘med’, ‘low’ ]  Arguments\n $resolution_sizes array List of allowed resolution sizes. $custom_image_sizes array Custom image sizes to be added through the theme.   mv_trellis_settings Used to add or modify theme settings whenever the settings are being built or rebuilt. A Flags key can be used to force a value update to the default.\nFor example, ‘flags’ =\u003e [ ‘force_default’ =\u003e ‘parent_1.0.0’ ] where 1.0.0 is the parent version number or ‘flags’ =\u003e [ ‘force_default’ =\u003e ‘child_1.0.0’ ] where 1.0.0 is the child version number.\napply_filters( 'mv_trellis_settings', array $theme_settings ) Default\n Empty array  Arguments\n $theme_settings array Theme settings to be added to the Trellis Settings page.   mv_trellis_settings_groups Used to add or modify theme setting groups or tabs.\napply_filters( 'mv_trellis_settings_groups', array $default_groups ) Default\n$groups = [ 'issues' =\u003e __( 'Issues', 'mediavine' ), 'hooks' =\u003e __( 'Hooks', 'mediavine' ), 'license' =\u003e __( 'License', 'mediavine' ), 'pwa' =\u003e __( 'PWA', 'mediavine' ), 'advanced' =\u003e __( 'Advanced', 'mediavine' ), 'display' =\u003e __( 'Display', 'mediavine' ), ]; Arguments\n $default_groups array Key/value pair of setting group slugs and display names. These should correspond to the group column of the settings table.   mv_trellis_settings_update Used to specify which settings to update.\napply_filters( 'mv_trellis_settings_update', array $theme_settings ) Default\n self::get_theme_settings()  Arguments\n $theme_settings array Theme settings to be added or updated on the settings page.   mv_trellis_sidebar_content HTML string for the sidebar. Used internally to apply lazy loading attributes to images.\napply_filters( 'mv_trellis_sidebar_content', string $sidebar_html, string $sidebar_id ) Default\n HTML output of the sidebar.  Arguments\n $sidebar_html string The sidebar HTML. $sidebar_id string The sidebar ID.   mv_trellis_site_title_logo_alt_text Alt text used by the site logo. Defaults to the site name.\napply_filters( 'mv_trellis_site_title_logo_alt_text', string $site_name ) Default\n get_bloginfo( 'name' )  Arguments\n $site_name string Site name.   mv_trellis_site_title_logo_classes Class names to be added to site logo \u003cimg\u003etag.\napply_filters( 'mv_trellis_site_title_logo_classes', array $image_classes, bool $link ) Default\n ['header-logo-img', 'ggnoads']  Arguments\n $image_classes array List of classes to be added to the logo source markup. $link bool Whether site title/logo output should be wrapped in a link.   mv_trellis_site_title_shortcode Adjusts the HTML string for the site title displayed in the site footer. Defaults to the site name.\napply_filters( 'mv_trellis_site_title_shortcode', string $output, array $atts ) Default\n get_bloginfo( 'name' )  Arguments\n $output string Site title output. $atts array Site title shortcode attributes.   mv_trellis_site_title_text_classes Adjusts classes for the site title markup.\napply_filters( 'mv_trellis_site_title_text_classes', array $value, bool $link ) Default\n [ ‘header-logo-text’]  Arguments\n $value array Classes to be added to the site title markup. $link bool If the site title/logo output should be wrapped in a link.   mv_trellis_sw_ignore Lists the paths to be ignored by the PWA service worker.\napply_filters( 'mv_trellis_sw_ignore', array $ignore_paths ) Default\n Empty array  Arguments\n $ignore_paths array List of file paths to ignore.   mv_trellis_the_title Adjusts the current page/post title.\napply_filters( 'mv_trellis_the_title', string $title, string $before, string $after ) Default\n The current page/post/archive/cpt title.  Arguments\n $title string The current page/post/archive title. $before string Content to be added to the front of the title, usually in some form of markup. $after string Content to be added to the end of the title, usually in some form of markup.   mv_trellis_top_breadcrumbs_placement Adjusts the hook targeted to output YOAST SEO breadcrumbs.\napply_filters( 'mv_trellis_top_breadcrumbs_placement', string $default_header_breadcrumb_hook ) Default\n tha_aside_before_entry_content  Arguments\n $default_header_breadcrumb_hook string The hook to fire on.   mv_trellis_web_stories_compatibility_styles Adjusts the CSS styles applied to the Web Story archive pages.\napply_filters( 'mv_trellis_web_stories_compatibility_styles', string $story_archive_styles ) Default\n.post-type-archive-web-story .excerpt {flex: 1 1 360px; margin: 0px auto; max-width: 360px;} .post-type-archive-web-story .mv-trellis-feed-unit{flex: 1 1 100%;} .post-type-archive-web-story .pagination{flex: 1 1 100%;} .post-type-archive-web-story .excerpt-container,.post-type-archive-web-story .excerpt-post-data{display: block;} .post-type-archive-web-story .excerpt-post-data{text-align:center;} .post-type-archive-web-story .wp-block-embed__wrapper {margin:0 auto;} .post-type-archive-web-story .excerpt-photo {display: none;} Arguments\n $story_archive_styles string CSS styles applied to Web Story archive pages.   mv_trellis_wordpress_link_shortcode Adjusts the HTML string for the link to WordPress in the site footer.\napply_filters( 'mv_trellis_wordpress_link_shortcode', string $output, array $atts ) Default\n\u003ca href=\"https://wordpress.org/\" target=\"_blank\" rel=\"noopener nofollow\"\u003eWordPress\u003c/a\u003e Arguments\n $output string WordPress link output. $atts array WordPress link shortcode attributes.  ","categories":"","description":"A detailed list of available filters in Trellis showing the filter name, description, syntax, default values, and arguments.\n","excerpt":"A detailed list of available filters in Trellis showing the filter …","ref":"/docsytrellis/reference/filters/filters-detail/","tags":["filters"],"title":"Filters Detail"},{"body":"Trellis provides a number of action hooks that web developers can use in their child themes. In addition to custom Mediavine hooks, Trellis uses the Theme Hook Alliance (THA) standards, offering a consistent set of entry points for easy customization and altering of functionality. Where applicable, this documentation references which THA hooks are called as part of a Mediavine hook.\nImportant If you add custom templates to your child theme, it’s expected that you’ll include the appropriate hooks in your template files. This ensures compatibility with future versions of Trellis that rely on these hooks.  Usage Publishers can add content to a subset of these hooks by going to the Mediavine Trellis Dashboard \u003e Hooks section.\nAs a child theme developer, you can add content by calling the hook in your child theme’s functions.php file.\nSections  Aside Hooks Body Hooks Content Hooks Comment Hooks Critical CSS Hooks Entry Hooks Footer Hooks Head Hooks Header Hooks HTML Hooks Image Processing Hooks Navigation Hooks Search Hooks Sidebar Hooks Theme Hooks Title Hooks  Aside Hooks mvt_aside_before_entry_content Runs hooks inside the standard loop, before the entry-content container. This wraps any hooked content in an aside tag. Fires the tha_aside_before_entry_content hook.\nmvt_aside_after_entry_content Runs hooks inside the standard loop, after the entry-content container. This wraps any hooked content in an aside tag. Fires the tha_aside_after_entry_content hook.\nBody Hooks mvt_body_top Runs hooks immediately after wp_body_open(). Fires the tha_body_top hook.\nmvt_body_bottom Runs hooks immediately before wp_footer(). Fires the tha_body_bottom hook.\n Content Hooks mvt_content_before Runs hooks immediately before the opening \u003cmain\u003e content tag. Fires the tha_content_before hook.\nmvt_content_after Runs hooks immediately after the closing \u003c/main\u003e content tag. Fires the tha_content_after hook.\nmvt_content_top Runs hooks immediately after the opening \u003cmain\u003e content tag. Fires the tha_content_top hook.\nmvt_content_bottom Runs hooks immediately before the closing \u003c/main\u003e content tag. Fires the tha_content_bottom hook.\nmvt_content_while_before Runs hooks inside the standard loop, before the while() block. Fires the tha_content_while_before hook.\nmvt_content_while_after Runs hooks inside the standard loop, after the while() block. Fires the tha_content_while_after hook.\nmvt_no_content_top Runs hooks inside the standard loop when there are no posts to show, before the Trellis “No content found” notice. Fires the tha_no_content_top hook.\nmvt_no_content_bottom Runs hooks inside the standard loop when there are no posts to show, after the Trellis “No content found” notice. Fires the tha_no_content_bottom hook.\nmvt_content_header_after Runs hooks immediately after the closing \u003c/header\u003e content tag. Fires the tha_content_header_after hook.\n Comment Hooks mvt_comments_before Runs hooks inside the standard loop, before the comments_template() wrapper. Fires the tha_comments_before hook.\nmvt_comments_after Runs hooks inside the standard loop, after the comments_template() wrapper. Fires two hooks: comment_form_after and tha_comments_after.\nmv_trellis_comments_output Fires where the comments template is output.\n Critical CSS Hooks mv_trellis_crit_css_disable_flag Fires when the disable_critical_css URL flag exists.\nmv_trellis_crit_css_error Fires when Critical CSS has an error while generating files. Accepts arguments.\nArguments\n $params array The API request parameters.  mv_trellis_crit_css_incoming Fires when Critical CSS has a returned callback. Accepts arguments.\nArguments\n $params array The API request parameters.  mv_trellis_crit_css_success Fires when Critical CSS is successfully generated and posted back. Accepts arguments.\nArguments\n $params array The API request parameters.  mv_trellis_pre_crit_css_req Fires when Critical CSS is requested to be generated. Accepts arguments.\nArguments\n $params array The API request parameters.  mv_trellis_purge_critical_css Fires after Critical CSS has been purged.\n Entry Hooks mvt_entry_top Runs hooks immediately after the opening \u003carticle\u003e content tag. Fires the tha_entry_top hook.\nmvt_entry_bottom Runs hooks immediately before the closing \u003c/article\u003e content tag. Fires the tha_entry_bottom hook.\nmvt_entry_excerpt_before Runs hooks inside the standard loop, before the_excerpt(). Fires the tha_entry_excerpt_before hook.\nmvt_entry_excerpt_after Runs hooks inside the standard loop, after the_excerpt(). Fires the tha_entry_excerpt_after hook.\nmvt_entry_before Runs hooks inside the standard loop, before the entry opening markup. Fires the tha_entry_before hook.\nmvt_entry_after Runs hooks inside the standard loop, after the entry closing markup. Fires the tha_entry_after hook. Accepts arguments.\nDefault\n Empty array  Arguments\n$args array Contains arguments from the content passed to the hook. In the Trellis Core templates, content-article.php and content.php contain an item count for potential Mediavine ad placement.\nmvt_entry_content_before Runs hooks inside the standard loop, before the_content(). Fires the tha_entry_content_before hook.\nmvt_entry_content_after Runs hooks inside the standard loop, after the_content(). Fires the tha_entry_content_after hook.\nmvt_trellis_entry_footer_top Runs hooks immediately after the opening \u003cfooter class=\"entry-footer\"\u003e tag. Fires the tha_entry_footer_top hook.\nmvt_trellis_entry_footer_bottom Runs hooks immediately before the closing entry-footer \u003c/footer\u003e tag. Fires the tha_entry_footer_bottom hook.\n Footer Hooks mvt_footer_before Runs hooks immediately before the opening \u003cfooter\u003e tag. Fires the tha_footer_before hook.\nmvt_footer_after Runs hooks immediately after the closing \u003c/footer\u003e tag. Fires the tha_footer_after hook.\nmvt_footer_top Runs hooks immediately after the opening footer wrapper tag. Fires two hooks: tha_footer_top and mv_trellis_footer (which contains the main content of the footer).\nmvt_footer_bottom Runs hooks immediately before the closing footer wrapper tag. Fires the tha_footer_bottom hook.\n Head Hooks mvt_head_top Runs hooks immediately after the opening \u003chead\u003e tag. Fires the tha_head_top hook.\nmvt_head_bottom Runs hooks immediately before wp_head(). Fires the tha_head_bottom hook.\n Header Hooks mv_trellis_before_header_content Fires after the header menu and before any other header content.\nmvt_header_before Runs hooks immediately before the opening \u003cheader\u003e tag. Fires the tha_header_before hook.\nmvt_header_after Runs hooks immediately after the closing \u003c/header\u003e tag. Fires the tha_header_after hook.\nmvt_header_top Runs hooks immediately before the header container. Fires the tha_header_top hook.\nmvt_header_bottom Runs hooks immediately after the header container. Fires the tha_header_bottom hook.\n HTML Hooks mvt_html_before Runs hooks immediately before the opening \u003chtml\u003e tag. Fires the tha_html_before hook.\n Image Processing Hooks mv_trellis_before_image_process_loop Fires before the foreach loop of the process_images() function.\nmv_trellis_after_image_process_loop Fires after the foreach loop of the process_images() function.\n Navigation Hooks mvt_entry_navigation_before Runs hooks inside the standard loop, before the article navigation markup. Fires the tha_entry_navigation_before hook.\nmvt_entry_navigation_after Runs hooks inside the standard loop, after the article navigation markup. Fires the tha_entry_navigation_after hook.\n Search Hooks mv_trellis_search_form Outputs the search form in the header.\n Sidebar Hooks mvt_sidebars_before Runs hooks immediately before get_sidebar(). Fires the tha_sidebars_before hook.\nmvt_sidebars_after Runs hooks immediately after get_sidebar(). Fires the tha_sidebars_after hook.\nmvt_sidebar_top Runs hooks immediately after the opening \u003caside\u003e sidebar tag. Fires the tha_sidebar_top hook.\nmvt_sidebar_bottom Runs hooks immediately before the closing \u003c/aside\u003e sidebar tag. Fires the tha_sidebar_bottom hook.\n Theme Hooks mv_trellis_parent_loaded Fires after the parent theme is loaded so that the child theme has access to options.\ntrellis_theme_activated Fires when Trellis is activated for the first time, updated, or triggered by the REST endpoint.\ntrellis_theme_deactivated Fires when Trellis is deactivated.\n Title Hooks mvt_title_before Runs hooks immediately before the content title, before the opening \u003ch1\u003e tag. Fires the tha_title_before hook.\nmvt_title_after Runs hooks immediately after the content title, after the closing \u003c/h1\u003e tag. Fires the tha_title_after hook.\n","categories":"","description":"","excerpt":"Trellis provides a number of action hooks that web developers can use …","ref":"/docsytrellis/reference/hooks/","tags":"","title":"Hooks"},{"body":"Placeholder text.\nWhat’s Next?  Placeholder link  ","categories":"","description":"Placeholder description. \n","excerpt":"Placeholder description. \n","ref":"/docsytrellis/reference/visual-hooks-guide/","tags":"","title":"Visual Hooks Guide"},{"body":"Here’s a short list of Frequently Asked Questions about Trellis. If your question isn’t answered here, check the Trellis Framework FAQ in the Trellis Help Center, which is targeted more towards publishers.\n   Question Answer     Where do I get Trellis? Trellis is available for download in the Mediavine Marketplace.   Is Trellis free? No, Trellis requires an annual subscription to use its features. This is because a subscription includes access to several online Trellis APIs that perform image processing and Critical CSS generation.\nTo see current Trellis pricing, visit the Mediavine Marketplace.   Can I use third-party theme builders with Trellis? No, Trellis is not compatible with third-party theme builders. While some may work, they will defeat many of the built-in optimizations Trellis provides.   How do I get support for Trellis? Mediavine provides three kinds of support for Trellis:\n- Child theme developers can use this site for information on modifying or creating child themes.\n- Publishers can access the Trellis Help Center for information on how to use Trellis features.\n- If an answer isn’t available in one of the above sites, send an email to trellis@mediavine.com.   Is Trellis compatible with [insert plugin name]? A compatibility article is available at Trellis Themes: Conflicts and Compatibilities in the Trellis Help Center.   Does Trellis provide built-in SEO support? Trellis does provide meta descriptions, schema output (via JSON-LD), and Open Graph tags for your site.\nTrellis will automatically disable its SEO functionality if it detects Yoast, RankMath, or AIO as installed and active.\nIf you’d prefer to use a different SEO plugin, be sure to disable Trellis SEO in Appearance \u003e Mediavine Trellis \u003e Advanced under the SEO section.    ","categories":"","description":"","excerpt":"Here’s a short list of Frequently Asked Questions about Trellis. If …","ref":"/docsytrellis/faqs/","tags":"","title":"FAQ"},{"body":"This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you’d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\nWhat’s in This Section? ","categories":"","description":"","excerpt":"This section is where the user documentation for your project lives - …","ref":"/docsytrellis/reference/","tags":"","title":"Reference"},{"body":"Placeholder text.\nWhat’s Next?  Placeholder link  ","categories":"","description":"Placeholder description. \n","excerpt":"Placeholder description. \n","ref":"/docsytrellis/reference/visual-markup-guide/","tags":"","title":"Visual Markup Guide"},{"body":"This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you’d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\n","categories":"","description":"","excerpt":"This section is where the user documentation for your project lives - …","ref":"/docsytrellis/changelogs/","tags":"","title":"Changelogs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/critical-css/","tags":"","title":"critical css"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/filters/","tags":"","title":"filters"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/image-sizes/","tags":"","title":"image sizes"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/lazy-loading/","tags":"","title":"lazy loading"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/post-meta/","tags":"","title":"post meta"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docsytrellis/tags/webp/","tags":"","title":"WebP"}]